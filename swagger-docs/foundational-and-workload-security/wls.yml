basePath: /wls/v1
definitions:
  Author:
    description: Author defines the email address of the author
    properties:
      email:
        type: string
        x-go-name: Email
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  Description:
    description: Description contains information about the host hardware identifiers
    properties:
      bios_name:
        type: string
        x-go-name: BiosName
      bios_version:
        type: string
        x-go-name: BiosVersion
      comment:
        type: string
        x-go-name: Comment
      flavor_part:
        type: string
        x-go-name: FlavorPart
      hardware_uuid:
        type: string
        x-go-name: HardwareUUID
      ip_address:
        type: string
        x-go-name: IPAddress
      label:
        type: string
        x-go-name: Label
      os_name:
        type: string
        x-go-name: OSName
      os_version:
        type: string
        x-go-name: OSVersion
      source:
        type: string
        x-go-name: Source
      tpm_version:
        type: string
        x-go-name: TPMVersion
      vmm_name:
        type: string
        x-go-name: VMMName
      vmm_version:
        type: string
        x-go-name: VMMVersion
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  Encryption:
    description: Encryption contains information pertaining to the encryption policy
      of the image
    properties:
      digest:
        type: string
        x-go-name: Digest
      key_url:
        type: string
        x-go-name: KeyURL
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  ExpectedEncryption:
    description: ExpectedEncryption is a data template that defines the json tag name
      of the encryption requirement, and the expected boolean value
    properties:
      name:
        type: string
        x-go-name: Name
      value:
        type: boolean
        x-go-name: Value
    type: object
    x-go-package: intel/isecl/lib/verifier/v3
  Fault:
    description: Fault defines failure events when applying a Rule
    properties:
      cause:
        type: string
        x-go-name: Cause
      description:
        type: string
        x-go-name: Description
    type: object
    x-go-package: intel/isecl/lib/verifier/v3
  FlavorsResponse:
    items:
      $ref: '#/definitions/ImageFlavor'
    type: array
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  Image:
    description: |-
      Image struct defines the metadata of the image and
      encryption details such as key URL, digest etc.
    properties:
      encryption:
        $ref: '#/definitions/Encryption'
      encryption_required:
        type: boolean
        x-go-name: EncryptionRequired
      integrity:
        $ref: '#/definitions/Integrity'
      integrity_enforced:
        type: boolean
        x-go-name: IntegrityEnforced
      meta:
        $ref: '#/definitions/Meta'
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  ImageFlavor:
    description: |-
      ImageFlavor is a flavor for an image with the encryption requirement information
      and key details of an encrypted image.
    properties:
      flavor:
        $ref: '#/definitions/Image'
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  ImageInfo:
    properties:
      flavor_ids:
        items:
          type: string
        type: array
        x-go-name: FlavorIDs
      id:
        type: string
        x-go-name: ID
    type: object
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  ImagesResponse:
    items:
      $ref: '#/definitions/ImageInfo'
    type: array
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  Info:
    properties:
      host_hardware_uuid:
        type: string
        x-go-name: HostHardwareUUID
      image_id:
        type: string
        x-go-name: ImageID
      instance_id:
        type: string
        x-go-name: InstanceID
    type: object
    x-go-package: intel/isecl/lib/common/v3/pkg/instance
  Integrity:
    description: Integrity contains information pertaining to the Integrity policy
      of the image
    properties:
      notary_url:
        type: string
        x-go-name: NotaryURL
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  Manifest:
    properties:
      image_encrypted:
        type: boolean
        x-go-name: ImageEncrypted
      image_integrity_enforced:
        type: boolean
        x-go-name: ImageIntegrityEnforced
      instance_info:
        $ref: '#/definitions/Info'
    type: object
    x-go-package: intel/isecl/lib/common/v3/pkg/instance
  Meta:
    description: Meta defines meta data of the flavor
    properties:
      author:
        $ref: '#/definitions/Author'
      description:
        $ref: '#/definitions/Description'
      id:
        type: string
        x-go-name: ID
      realm:
        type: string
        x-go-name: Realm
      schema:
        $ref: '#/definitions/Schema'
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  Report:
    properties:
      cert:
        type: string
        x-go-name: Cert
      data:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: Data
      hash_alg:
        type: string
        x-go-name: Alg
      id:
        type: string
        x-go-name: ID
      instance_manifest:
        $ref: '#/definitions/Manifest'
      policy_name:
        type: string
        x-go-name: PolicyName
      results:
        items:
          $ref: '#/definitions/Result'
        type: array
        x-go-name: Results
      signature:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: Signature
      trusted:
        type: boolean
        x-go-name: Trusted
    type: object
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  ReportsResponse:
    items:
      $ref: '#/definitions/Report'
    type: array
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  RequestKey:
    description: RequestKey struct defines input parameters to retrieve a key
    properties:
      hardware_uuid:
        type: string
        x-go-name: HwId
      key_url:
        type: string
        x-go-name: KeyUrl
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v3/pkg/model/wls
  Result:
    properties:
      faults:
        items:
          $ref: '#/definitions/Fault'
        type: array
        x-go-name: Faults
      flavor_id:
        type: string
        x-go-name: FlavorID
      rule:
        $ref: '#/definitions/Rule'
      trusted:
        type: boolean
        x-go-name: Trusted
    type: object
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  ReturnKey:
    description: ReturnKey to return key Json
    properties:
      key:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: Key
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v3/pkg/model/wls
  Rule:
    properties:
      expected:
        $ref: '#/definitions/ExpectedEncryption'
      markers:
        items:
          type: string
        type: array
        x-go-name: Markers
      rule_name:
        type: string
        x-go-name: RuleName
    type: object
    x-go-package: intel/isecl/workload-service/v3/swagger/docs
  Schema:
    description: Schema defines the URI of the schema
    properties:
      uri:
        type: string
        x-go-name: URI
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
  SignedImageFlavor:
    description: |-
      SignedImageFlavor struct defines the image flavor and
      its corresponding signature
    properties:
      flavor:
        $ref: '#/definitions/Image'
      signature:
        type: string
        x-go-name: Signature
    type: object
    x-go-package: intel/isecl/lib/flavor/v3
host: workloadservice.com:5000
info:
  description: |-
    Workload Service resources are used to manage images, flavors and reports.
    Workload Service handles the mapping of the image ID to the appropriate key ID in the form of Flavors.
    When the encrypted image is used to launch new VM or container, WLA will request the decryption key from the Workload Service.
    Then Workload Service will initiate the key transfer request to the Key Broker.
  license:
    name: 'Copyright (C) 2020 Intel Corporation. SPDX-License-Identifier: BSD-3-Clause'
  title: Workload Service
  version: "2.2"
paths:
  /flavors:
    get:
      description: |
        Search(es) for the flavor(s) based on the provided filter criteria in the workload service database.
        A valid bearer token should be provided to authorize this REST call.
      operationId: queryFlavors
      parameters:
      - description: |
          Boolean value to indicate whether the response should be filtered to return specific flavors instead of listing
          all flavors. When the filter is true and no other query parameter is specified, error response will be returned.
          Default value is true.
        in: query
        name: filter
        type: boolean
      - description: Unique ID of the flavor.
        format: uuid
        in: query
        name: id
        type: string
      - description: Label associated with the flavor.
        in: query
        name: label
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavors based on the provided filter
            criteria.
          schema:
            $ref: '#/definitions/FlavorsResponse'
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/flavors?label=label_image-test-4
      x-sample-call-output: |
        [
          {
              "flavor": {
                  "meta": {
                      "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                      "description": {
                          "flavor_part": "CONTAINER_IMAGE",
                          "label": "label_image-test-4"
                      }
                  },
                  "encryption_required": true,
                  "encryption": {
                      "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                      "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
                  },
                  "integrity_enforced": false
              }
          }
        ]
    post:
      consumes:
      - application/json
      description: |
        Creates a flavor for the encrypted image in the workload service database.
        Flavor can be created by providing the image flavor content obtained from the WPM after encrypting the image.
        A valid bearer token should be provided to authorize this REST call.
      operationId: createFlavor
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/SignedImageFlavor'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the flavor.
          schema:
            $ref: '#/definitions/ImageFlavor'
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/flavors
      x-sample-call-input: |
        {
           "flavor": {
              "meta": {
                 "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                 "description": {
                    "flavor_part": "CONTAINER_IMAGE",
                    "label": "label_image-test-4"
                 }
              },
              "encryption_required": true,
              "encryption": {
                 "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                 "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
              }
           },
           "signature": "CStRpWgj0De7+xoX1uFSOacLAZeEcodUuvH62B4hVoiIEriVaHxrLJhBjnIuSPmIoZewCdTShw7GxmMQiMik
           CrVhaUilYk066TckOcLW/E3K+7NAiZ5kuS96J6dVxgJ+9k7iKf7Z+6lnWUJz92VWLP4U35WK4MtV+MPTYn2Zj1p+/tTUuSqlk8
           KCmpywzI1J1/XXjvqee3M9cGInnbOUGEFoLBAO1+w30yptoNxKEaB/9t3qEYywk8buT5GEMYUjJEj9PGGaW+lR37x0zcXggwMg
           /RsijMV6rNKsjjC0fN1vGswzoaIJPD1RJkQ8X9l3AaM0qhLBQDrurWxKK4KSQSpI0BziGPkKi5vAeeRkVfU5JXNdPxdOkyXVeb
           eMQR9bYntXtZl41qjOZ0zIOKAHNJiBLyMYausbTZHVCwDuA/HBAT8i7JAIesxexX89bL+khPebHWkHaifS4NejymbGzM+n62EH
           uoeIo33qDMQ/U0FA3i6gRy0s/sFQVXR0xk8l"
        }
      x-sample-call-output: |
        {
          "flavor": {
              "meta": {
                  "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                  "description": {
                      "flavor_part": "CONTAINER_IMAGE",
                      "label": "label_image-test-4"
                  }
              },
              "encryption_required": true,
              "encryption": {
                  "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                  "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
              },
              "integrity_enforced": false
          }
        }
  /flavors/{flavor_id}:
    delete:
      description: |
        Deletes the flavor associated with a specified flavor id from the workload service
        database. A valid bearer token should be provided to authorize this REST call.
      operationId: deleteFlavorByID
      parameters:
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted the flavor for the specified flavor id.
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/flavors/d6129610-4c8f-4ac4-8823-df4e925688c4
      x-sample-call-output: |
        204 No content
    get:
      description: |
        Retrieves the flavor associated with a specified flavor ID or flavor label from the workload service
        database. The path parameter can be either flavor ID or flavor Label.
        A valid bearer token should be provided to authorize this REST call.
      operationId: getFlavorByIdOrLabel
      parameters:
      - description: Unique ID of the flavor.
        in: path
        name: flavor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavor for the specified flavor
            id or flavor label.
          schema:
            $ref: '#/definitions/ImageFlavor'
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/flavors/d6129610-4c8f-4ac4-8823-df4e925688c4
      x-sample-call-output: |
        {
          "flavor": {
              "meta": {
                  "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                  "description": {
                      "flavor_part": "CONTAINER_IMAGE",
                      "label": "label_image-test-4"
                  }
              },
              "encryption_required": true,
              "encryption": {
                  "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                  "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
              },
              "integrity_enforced": false
          }
        }
  /images:
    get:
      description: |
        Search(es) for the image(s) based on the provided filter criteria from the workload service database.
        Minimum one query parameter should be provided to retrieve the images.
        A valid bearer token should be provided to authorize this REST call.
      operationId: queryImages
      parameters:
      - description: |
          Boolean value to indicate whether the response should be filtered to return specific images instead of
          listing all images. When the filter is true and no other query parameter is specified, error response will be returned.
          Default value is true.
        in: query
        name: filter
        type: boolean
      - description: Unique ID of the flavor.
        format: uuid
        in: query
        name: flavor_id
        type: string
      - description: Unique ID of the image.
        format: uuid
        in: query
        name: image_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the images based on the provided filter
            criteria.
          schema:
            $ref: '#/definitions/ImagesResponse'
      security:
      - bearerAuth: []
      tags:
      - Images
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/images/image_id=ffff021e-9669-4e53-9224-8880fb4e4081
      x-sample-call-output: |
        [
          {
              "id": "ffff021e-9669-4e53-9224-8880fb4e4081",
              "flavor_ids": [
                  "d6129610-4c8f-4ac4-8823-df4e925688c4",
                  "d6129610-4c8f-4ac4-8823-df4e925688c3"
              ]
          }
        ]
    post:
      consumes:
      - application/json
      description: |
        Creates an association between the image and flavor(s) in the workload service database.
        An image id from the image storage and flavor id(s) should be provided in the request body.
        A valid bearer token should be provided to authorize this REST call.
      operationId: createImage
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/ImageInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the association between specified image
            and flavor(s).
          schema:
            $ref: '#/definitions/ImageInfo'
      security:
      - bearerAuth: []
      tags:
      - Images
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/images
      x-sample-call-input: |
        {
           "id" : "ffff021e-9669-4e53-9224-8880fb4e4081",
           "flavor_ids" : [
               "d6129610-4c8f-4ac4-8823-df4e925688c3",
               "d6129610-4c8f-4ac4-8823-df4e925688c4"
           ]
        }
      x-sample-call-output: |
        {
           "id" : "ffff021e-9669-4e53-9224-8880fb4e4081",
           "flavor_ids" : [
               "d6129610-4c8f-4ac4-8823-df4e925688c3",
               "d6129610-4c8f-4ac4-8823-df4e925688c4"
           ]
        }
  /images/{image_id}:
    delete:
      description: |
        Deletes the image details associated with a specified image id in the workload service
        database. A valid bearer token should be provided to authorize this REST call.
      operationId: deleteImageById
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted the image.
      security:
      - bearerAuth: []
      tags:
      - Images
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081
      x-sample-call-output: |
        204 No content
    get:
      description: |
        Retrieves the image details associated with a specified image id from the workload service
        database. A valid bearer token should be provided to authorize this REST call.
      operationId: getImageById
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the image for the specified image id.
          schema:
            $ref: '#/definitions/ImageInfo'
      security:
      - bearerAuth: []
      tags:
      - Images
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081
      x-sample-call-output: |
        {
           "id": "ffff021e-9669-4e53-9224-8880fb4e4081",
           "flavor_ids" : [
               "d6129610-4c8f-4ac4-8823-df4e925688c3",
               "d6129610-4c8f-4ac4-8823-df4e925688c4"
            ]
        }
  /images/{image_id}/flavors:
    get:
      description: |
        Retrieves all the associated flavors for the specified image.
        A valid bearer token should be provided to authorize this REST call.
      operationId: getImageFlavors
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the associated flavors for the specified
            image.
          schema:
            $ref: '#/definitions/FlavorsResponse'
      security:
      - bearerAuth: []
      tags:
      - ImageFlavor
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081/flavors
      x-sample-call-output: |
        [
          {
              "flavor": {
                  "meta": {
                      "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                      "description": {
                          "flavor_part": "CONTAINER_IMAGE",
                          "label": "label_image-test-4"
                      }
                  },
                  "encryption_required": true,
                  "encryption": {
                      "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                      "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
                  },
                  "integrity_enforced": false
              }
          },
          {
              "flavor": {
                  "meta": {
                      "id": "d6129610-4c8f-4ac4-8823-df4e925688c3",
                      "description": {
                          "flavor_part": "CONTAINER_IMAGE",
                          "label": "label_image-test-3"
                      }
                  },
                  "encryption_required": true,
                  "encryption": {
                      "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                      "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
                  },
                  "integrity_enforced": false
              }
          }
        ]
  /images/{image_id}/flavors/{flavor_id}:
    delete:
      description: |
        Removes the specified flavor associated with an image id from the workload service database.
        A valid bearer token should be provided to authorize this REST call.
      operationId: deleteImageFlavor
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully removed the specified flavor associated with the
            image.
      security:
      - bearerAuth: []
      tags:
      - ImageFlavor
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081/flavors/d6129610-4c8f-4ac4-8823-df4e925688c4
      x-sample-call-output: |
        204 No content
    get:
      description: |
        Retrieves the specified flavor associated with an image id from the workload service database.
        A valid bearer token should be provided to authorize this REST call.
      operationId: getImageFlavorByID
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specified flavor associated with
            the image.
          schema:
            $ref: '#/definitions/ImageFlavor'
      security:
      - bearerAuth: []
      tags:
      - ImageFlavor
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081/flavors/d6129610-4c8f-4ac4-8823-df4e925688c4
      x-sample-call-output: |
        {
          "flavor": {
              "meta": {
                  "id": "d6129610-4c8f-4ac4-8823-df4e925688c4",
                  "description": {
                      "flavor_part": "CONTAINER_IMAGE",
                      "label": "label_image-test-4"
                  }
              },
              "encryption_required": true,
              "encryption": {
                  "key_url": "https://10.105.168.234:443/v1/keys/60a9fe49-612f-4b66-bf86-b75c7873f3b3/transfer",
                  "digest": "3JiqO+O4JaL2qQxpzRhTHrsFpDGIUDV8fTWsXnjHVKY="
              },
              "integrity_enforced": false
          }
        }
    put:
      description: |
        Assigns a flavor to the image associated with the specified image id in the workload service database.
        A valid bearer token should be provided to authorize this REST call.
      operationId: addImageFlavor
      parameters:
      - description: Unique ID of the image.
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created a new flavor association with the specified
            image.
      security:
      - bearerAuth: []
      tags:
      - ImageFlavor
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/images/ffff021e-9669-4e53-9224-8880fb4e4081/flavors/d6129610-4c8f-4ac4-8823-df4e925688c4
      x-sample-call-output: |
        201 Created
  /keys:
    post:
      consumes:
      - application/json
      description: |
        Gets and returns the wrapped key from KBS for given key url, if saml report from hvs for given host with hardware uuid is trusted.
      operationId: CreateKey
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/RequestKey'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully return wrapped key from KBS
          schema:
            $ref: '#/definitions/ReturnKey'
      security:
      - bearerAuth: []
      tags:
      - Keys
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/keys
      x-sample-call-input: |
        {
            "hardware_uuid": "ecee021e-9669-4e53-9224-8880fb4e4080"
            "key_url": "http://kbs.server.com:9443/v1/keys/73755fda-c910-46be-821f-e8ddeab189e9/transfer"
        }
      x-sample-call-output: |-
        {
         "key": "eyJpbnN0YW5jZV9tYW5pZmVzdCI6eyJpbnN0YW5jZV9pbmZvIjp7Imluc3RhbmNlX2lkIjoiN2Y4MDMwMTgtZjU2Zi00NWJiLTk0Mm
          EtODhmYjgzOGNhMjMxIiwiaG9zdF9oYXJkd2FyZV91dWlkIjoiODA4YjcwNmYtNTYzMS1lNTExLTkwNmUtMDAxMjc5NWQ5NmRkIiwiaW1hZ2VfaW
          QiOiIxMjAwMjQwMC1kMDZiLTRjOWItYWUzYi1hZDQ2MmNjZWI2NzQifSwiaW1hZ2VfZW5jcnlwdGVkIjp0cnVlfSwicG9saWN5X25hbWUiOiJJbn
          RlbCBDb250YWluZXIgUG9saWN5IiwicmVzdWx0cyI6W3sicnVsZSI6eyJydWxlX25hbWUiOiJFbmNyeXB0aW9uTWF0Y2hlcyIsIm1hcmtlcnMiOl
          siQ09OVEFJTkVSX0lNQUdFIl0sImV4cGVjdGVkIjp7Im5hbWUiOiJlbmNyeXB0aW9uX3JlcXVpcmVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2
          lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OGE0NDdmIiwidHJ1c3RlZCI6dHJ1ZX0seyJydWxlIjp7InJ1bGVfbmFtZSI6IkludG
          Vncml0eU1hdGNoZXMiLCJtYXJrZXJzIjpbIkNPTlRBSU5FUl9JTUFHRSJdLCJleHBlY3RlZCI6eyJuYW1lIjoiaW50ZWdyaXR5X2VuZm9yY2VkIiw
          idmFsdWUiOmZhbHNlfX0sImZsYXZvcl9pZCI6IjY5MjFjOTVkLTE0YTgtNGVhOC05NDlkLWQzMzhkODhhNDQ3ZiIsInRydXN0ZWQiOnRydWV9LHsi
          cnVsZSI6eyJydWxlX25hbWUiOiJGbGF2b3JJbnRlZ3JpdHlNYXRjaGVzIiwibWFya2VycyI6WyJmbGF2b3JJbnRlZ3JpdHkiXSwiZXhwZWN0ZWQiO
          nsibmFtZSI6ImZsYXZvcl90cnVzdGVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OG
          E0NDdmIiwidHJ1c3RlZCI6dHJ1ZX1dLCJ0cnVzdGVkIjp0cnVlfQ==",
        }
  /reports:
    get:
      description: |
        Search(es) for the trust report(s) based on filter criteria in the workload service database.
        Minimum one query parameter should be provided to retrieve the reports.
        A valid bearer token should be provided to authorize this REST call.
      operationId: queryReports
      parameters:
      - description: |
          Boolean value to indicate whether the response should be filtered to return no results instead of listing all reports.
          When the filter is true and no other query parameter is specified, error response will be returned. Default value is true.
        in: query
        name: filter
        type: boolean
      - description: Unique ID of the VM.
        format: uuid
        in: query
        name: instance_id
        type: string
      - description: Unique ID of the report.
        format: uuid
        in: query
        name: report_id
        type: string
      - description: Unique hardware UUID of the host.
        format: uuid
        in: query
        name: hardware_uuid
        type: string
      - description: Reports returned will be restricted to after this date. from_date
          should be given in date format yyyy-mm-ddTHH:mm:ss.
        in: query
        name: from_date
        type: string
      - description: Reports returned will be restricted to before this date. to_date
          should be given in date format yyyy-mm-ddTHH:mm:ss.
        in: query
        name: to_date
        type: string
      - description: |
          By default this is set to TRUE, returning only the latest report for each VM.
        in: query
        name: latest_per_vm
        type: boolean
      - description: |
          Results returned will be restricted to between the current date and number of days prior.
          This option will override other date options.
        in: query
        name: num_of_days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the reports based on filter criteria.
          schema:
            $ref: '#/definitions/ReportsResponse'
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/reports?report_id=f52023eb-7991-47ba-91fc-c43bd9d80c29
      x-sample-call-output: |-
        {
         "id": "f52023eb-7991-47ba-91fc-c43bd9d80c29",
         "instance_manifest": {
             "instance_info": {
             "instance_id": "7f803018-f56f-45bb-942a-88fb838ca231",
             "host_hardware_uuid": "808b706f-5631-e511-906e-0012795d96dd",
             "image_id": "12002400-d06b-4c9b-ae3b-ad462cceb674"
             },
             "image_encrypted": true
         },
         "policy_name": "Intel Container Policy",
         "results": [
            {
               "rule": {
                  "rule_name": "EncryptionMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                     "name": "encryption_required",
                     "value": true
                   }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
            },
            {
                "rule": {
                  "rule_name": "IntegrityMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                  "name": "integrity_enforced",
                  "value": false
                  }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             },
             {
                "rule": {
                  "rule_name": "FlavorIntegrityMatches",
                  "markers": [
                     "flavorIntegrity"
                  ],
                  "expected": {
                  "name": "flavor_trusted",
                  "value": true
                  }
               },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             }
         ],
         "trusted": true,
         "data": "eyJpbnN0YW5jZV9tYW5pZmVzdCI6eyJpbnN0YW5jZV9pbmZvIjp7Imluc3RhbmNlX2lkIjoiN2Y4MDMwMTgtZjU2Zi00NWJiLTk0Mm
          EtODhmYjgzOGNhMjMxIiwiaG9zdF9oYXJkd2FyZV91dWlkIjoiODA4YjcwNmYtNTYzMS1lNTExLTkwNmUtMDAxMjc5NWQ5NmRkIiwiaW1hZ2VfaW
          QiOiIxMjAwMjQwMC1kMDZiLTRjOWItYWUzYi1hZDQ2MmNjZWI2NzQifSwiaW1hZ2VfZW5jcnlwdGVkIjp0cnVlfSwicG9saWN5X25hbWUiOiJJbn
          RlbCBDb250YWluZXIgUG9saWN5IiwicmVzdWx0cyI6W3sicnVsZSI6eyJydWxlX25hbWUiOiJFbmNyeXB0aW9uTWF0Y2hlcyIsIm1hcmtlcnMiOl
          siQ09OVEFJTkVSX0lNQUdFIl0sImV4cGVjdGVkIjp7Im5hbWUiOiJlbmNyeXB0aW9uX3JlcXVpcmVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2
          lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OGE0NDdmIiwidHJ1c3RlZCI6dHJ1ZX0seyJydWxlIjp7InJ1bGVfbmFtZSI6IkludG
          Vncml0eU1hdGNoZXMiLCJtYXJrZXJzIjpbIkNPTlRBSU5FUl9JTUFHRSJdLCJleHBlY3RlZCI6eyJuYW1lIjoiaW50ZWdyaXR5X2VuZm9yY2VkIiw
          idmFsdWUiOmZhbHNlfX0sImZsYXZvcl9pZCI6IjY5MjFjOTVkLTE0YTgtNGVhOC05NDlkLWQzMzhkODhhNDQ3ZiIsInRydXN0ZWQiOnRydWV9LHsi
          cnVsZSI6eyJydWxlX25hbWUiOiJGbGF2b3JJbnRlZ3JpdHlNYXRjaGVzIiwibWFya2VycyI6WyJmbGF2b3JJbnRlZ3JpdHkiXSwiZXhwZWN0ZWQiO
          nsibmFtZSI6ImZsYXZvcl90cnVzdGVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OG
          E0NDdmIiwidHJ1c3RlZCI6dHJ1ZX1dLCJ0cnVzdGVkIjp0cnVlfQ==",
         "hash_alg": "SHA-256",
         "cert": "-----BEGIN CERTIFICATE-----
         MIIFEDCCA3igAwIBAgIIbb/wqvbCU/swDQYJKoZIhvcNAQEMBQAwGzEZMBcGA1UEAxMQbXR3aWxzb24tcGNhLWFpazA
         eFw0xOTA4MjMxMjQxMzlaFw0yOTA4MjAxMjQxMzlaMCUxIzAhBgNVBAMMGkNOPVNpZ25pbmdfS2V5X0NlcnRpZmljYX
         RlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtykLA0i8F/i8/XaxxiOQODQ8DBtmHFUmagQt0/Uanfe7g
         ZIlDWXidc7JJ0c4BaO8TACTOU2RH3aI4qOdTM3KzCERyssuJPFpJyhAbMlQcW1GqO/ZnH1SinnrDnDuCaFE1H1oWldW
         GIJFG964Chlu1tDBaSpHqhrSe9HFT2ne+k8SbWNCKQp99UJWwvE9ZIb8HI42I+duwkazPEKGcL64AKhx+/9su3qJ51k
         PaIp3LnPlFWj8GTQ1hPCTCxMZcc6b/BdGjfQYuz7XFL8Vnwx53ILidMsAf/7WWT9dc99yYFIl4AtzcToAIV28gRBzRe
         6AVQPa8tPtgixg34LIwDGZZQIDAQABo4IBzDCCAcgwDgYDVR0PAQH/BAQDAgbAMIGdBgdVBIEFAwIpBIGR/1RDR4AXA
         CIAC6PFIigCakiZJBZJguUgZk6BUJXqvvNG5JPeoTyYzN3uAAQA/1WqAAAAAAA7OO4AAAAEAAAAAQAABAABFQQVCQAi
         AAsx6pP2c46F7wuGDjaihI06cBKS3tSCGFm4ekaqR45d0gAiAAuh4F4oZZ1bUYKd4p5cle2322+fKD09GJ8/NSyl1FF
         E3TCCARQGCFUEgQUDAikBBIIBBgAUAAsBAI/eR4gVGaVG3DGO4n8bhmeBHlVgeuUkWyDet3oA+GZqtITbVM4PsChznS
         7l2hZx3HkevL2LWX3WycR0VSR1uylWVeHCJUJjwArA2i9LhItFZdoUlEvVMnfzaGdoa2m2VuHs7NUDW1Nd0rE9eAlHA
         EdUzCIE2wNr7dloHZHs6S7F3KJrWH5ATGfEayiBYg+/hj4jXqxyW1VNGNI6KdKzZyzk+QlGQkFtdRpBTqUhrZBp4FYD
         lKq81PuJ3ayVS1FY6vQ2Nz70ueGoF1K73qbEAFTcBuMHzpU8ZS5JUO9eEeWHRCn+BbA1KMB6576pVAXz//e3/sEDsCX
         nlieYETzPbA8wDQYJKoZIhvcNAQEMBQADggGBAJuupBNdZwCZ6gDoZEOYr0SeM6O+xK0Q/Oe7ecPjTGXrdsgbul5DnI
         prIav7fZ4e7q+utzh8l9uij3wAfOM5gT1ud1TJLuCyl70e3VSHcuGBCRcFC4xXGykT+UqfdnqCnkSnQbQUAIBr46zoy
         Ap1P4/QdMBDJo/BjPQTdThFValrp95EfNTavFkXogryEKmWMANgHh+ZNyQfXunjjaaS99yFdoPGgoLFHbVQ1ehUP3m5
         4X1la90+59TccPD01JHibA9Tp9hsDA9NVGf3tBokoEzPBgu9ilHUR7sZ+C6CZ3YjHhcghJoau03UzUQ/pyLGs+lV9U+
         PpCr4i/w4OgOOOfh0u0vJrFf3x7BiFikwgcTJHspvdRzAkNAndSNH6PnJrpd+Q/s1mlEwytUumycenIRLwDmWGYCSGB
         xcU6IfSaeUPI6JROuhFjNjb2N6CpiswU1pWAGKVLi3a5BcmPnJc7XQcG+vb9sAX9BVmwL1sRqC1Dz0IBjLz8eYzebLu
         uMb8Q==
          -----END CERTIFICATE-----",
         "signature": "tcWuM6dk/a0XYFcbqSpDIe7BvN/EsX2CskB6xecryFhXS3HbbeB97K6GqI/TQnZZPC40KfQDUTVn7oSDH9AvnFIDQSsBUCqcfl0Q0CRdm9KE9brCT
          zwxPTHdN4kcC8I2iMxQVzsqV/TL39QUGlwhtYLJOqEaJ5sDqbmnW9XVO6TaEkcagHoF3Je+iglVbMmL7cfpySlppU9+TO6tSYlLP/nX53mEhBgN4ANSQ0gKNQR3izG
          Ca8mHgqGWnoahrR/dHHWADrKDF6SeMbmvo0e4/EOXaO89QyPrGwF8kuzI04HpXUWlOYfaubKkNHi3gckXFzNB84nhrp0SNz3RHxNEkA=="
        }
    post:
      consumes:
      - application/json
      description: |
        Creates an image trust report. A report contains the status of an associated image.
        The report schema provided in the request body contains an interface called Rule which works on
        any matching policy based on provided rule_name. Rule policy can be either image encryption policy
        or flavor integrity policy or integrity policy.
        A valid bearer token should be provided to authorize this REST call.
      operationId: createReport
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/Report'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the trust report for the image.
          schema:
            $ref: '#/definitions/Report'
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/reports
      x-sample-call-input: |
        {
         "id": "f52023eb-7991-47ba-91fc-c43bd9d80c29",
         "instance_manifest": {
             "instance_info": {
             "instance_id": "7f803018-f56f-45bb-942a-88fb838ca231",
             "host_hardware_uuid": "808b706f-5631-e511-906e-0012795d96dd",
             "image_id": "12002400-d06b-4c9b-ae3b-ad462cceb674"
             },
             "image_encrypted": true
         },
         "policy_name": "Intel Container Policy",
         "results": [
            {
               "rule": {
                  "rule_name": "EncryptionMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                     "name": "encryption_required",
                     "value": true
                   }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
            },
            {
                "rule": {
                  "rule_name": "IntegrityMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                  "name": "integrity_enforced",
                  "value": false
                  }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             },
             {
                "rule": {
                  "rule_name": "FlavorIntegrityMatches",
                  "markers": [
                     "flavorIntegrity"
                  ],
                  "expected": {
                  "name": "flavor_trusted",
                  "value": true
                  }
               },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             }
         ],
         "trusted": true,
         "data": "eyJpbnN0YW5jZV9tYW5pZmVzdCI6eyJpbnN0YW5jZV9pbmZvIjp7Imluc3RhbmNlX2lkIjoiN2Y4MDMwMTgtZjU2Zi00NWJiLTk0Mm
          EtODhmYjgzOGNhMjMxIiwiaG9zdF9oYXJkd2FyZV91dWlkIjoiODA4YjcwNmYtNTYzMS1lNTExLTkwNmUtMDAxMjc5NWQ5NmRkIiwiaW1hZ2VfaW
          QiOiIxMjAwMjQwMC1kMDZiLTRjOWItYWUzYi1hZDQ2MmNjZWI2NzQifSwiaW1hZ2VfZW5jcnlwdGVkIjp0cnVlfSwicG9saWN5X25hbWUiOiJJbn
          RlbCBDb250YWluZXIgUG9saWN5IiwicmVzdWx0cyI6W3sicnVsZSI6eyJydWxlX25hbWUiOiJFbmNyeXB0aW9uTWF0Y2hlcyIsIm1hcmtlcnMiOl
          siQ09OVEFJTkVSX0lNQUdFIl0sImV4cGVjdGVkIjp7Im5hbWUiOiJlbmNyeXB0aW9uX3JlcXVpcmVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2
          lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OGE0NDdmIiwidHJ1c3RlZCI6dHJ1ZX0seyJydWxlIjp7InJ1bGVfbmFtZSI6IkludG
          Vncml0eU1hdGNoZXMiLCJtYXJrZXJzIjpbIkNPTlRBSU5FUl9JTUFHRSJdLCJleHBlY3RlZCI6eyJuYW1lIjoiaW50ZWdyaXR5X2VuZm9yY2VkIiw
          idmFsdWUiOmZhbHNlfX0sImZsYXZvcl9pZCI6IjY5MjFjOTVkLTE0YTgtNGVhOC05NDlkLWQzMzhkODhhNDQ3ZiIsInRydXN0ZWQiOnRydWV9LHsi
          cnVsZSI6eyJydWxlX25hbWUiOiJGbGF2b3JJbnRlZ3JpdHlNYXRjaGVzIiwibWFya2VycyI6WyJmbGF2b3JJbnRlZ3JpdHkiXSwiZXhwZWN0ZWQiO
          nsibmFtZSI6ImZsYXZvcl90cnVzdGVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OG
          E0NDdmIiwidHJ1c3RlZCI6dHJ1ZX1dLCJ0cnVzdGVkIjp0cnVlfQ==",
         "hash_alg": "SHA-256",
         "cert": "-----BEGIN CERTIFICATE-----
         MIIFEDCCA3igAwIBAgIIbb/wqvbCU/swDQYJKoZIhvcNAQEMBQAwGzEZMBcGA1UEAxMQbXR3aWxzb24tcGNhLWFpazA
         eFw0xOTA4MjMxMjQxMzlaFw0yOTA4MjAxMjQxMzlaMCUxIzAhBgNVBAMMGkNOPVNpZ25pbmdfS2V5X0NlcnRpZmljYX
         RlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtykLA0i8F/i8/XaxxiOQODQ8DBtmHFUmagQt0/Uanfe7g
         ZIlDWXidc7JJ0c4BaO8TACTOU2RH3aI4qOdTM3KzCERyssuJPFpJyhAbMlQcW1GqO/ZnH1SinnrDnDuCaFE1H1oWldW
         GIJFG964Chlu1tDBaSpHqhrSe9HFT2ne+k8SbWNCKQp99UJWwvE9ZIb8HI42I+duwkazPEKGcL64AKhx+/9su3qJ51k
         PaIp3LnPlFWj8GTQ1hPCTCxMZcc6b/BdGjfQYuz7XFL8Vnwx53ILidMsAf/7WWT9dc99yYFIl4AtzcToAIV28gRBzRe
         6AVQPa8tPtgixg34LIwDGZZQIDAQABo4IBzDCCAcgwDgYDVR0PAQH/BAQDAgbAMIGdBgdVBIEFAwIpBIGR/1RDR4AXA
         CIAC6PFIigCakiZJBZJguUgZk6BUJXqvvNG5JPeoTyYzN3uAAQA/1WqAAAAAAA7OO4AAAAEAAAAAQAABAABFQQVCQAi
         AAsx6pP2c46F7wuGDjaihI06cBKS3tSCGFm4ekaqR45d0gAiAAuh4F4oZZ1bUYKd4p5cle2322+fKD09GJ8/NSyl1FF
         E3TCCARQGCFUEgQUDAikBBIIBBgAUAAsBAI/eR4gVGaVG3DGO4n8bhmeBHlVgeuUkWyDet3oA+GZqtITbVM4PsChznS
         7l2hZx3HkevL2LWX3WycR0VSR1uylWVeHCJUJjwArA2i9LhItFZdoUlEvVMnfzaGdoa2m2VuHs7NUDW1Nd0rE9eAlHA
         EdUzCIE2wNr7dloHZHs6S7F3KJrWH5ATGfEayiBYg+/hj4jXqxyW1VNGNI6KdKzZyzk+QlGQkFtdRpBTqUhrZBp4FYD
         lKq81PuJ3ayVS1FY6vQ2Nz70ueGoF1K73qbEAFTcBuMHzpU8ZS5JUO9eEeWHRCn+BbA1KMB6576pVAXz//e3/sEDsCX
         nlieYETzPbA8wDQYJKoZIhvcNAQEMBQADggGBAJuupBNdZwCZ6gDoZEOYr0SeM6O+xK0Q/Oe7ecPjTGXrdsgbul5DnI
         prIav7fZ4e7q+utzh8l9uij3wAfOM5gT1ud1TJLuCyl70e3VSHcuGBCRcFC4xXGykT+UqfdnqCnkSnQbQUAIBr46zoy
         Ap1P4/QdMBDJo/BjPQTdThFValrp95EfNTavFkXogryEKmWMANgHh+ZNyQfXunjjaaS99yFdoPGgoLFHbVQ1ehUP3m5
         4X1la90+59TccPD01JHibA9Tp9hsDA9NVGf3tBokoEzPBgu9ilHUR7sZ+C6CZ3YjHhcghJoau03UzUQ/pyLGs+lV9U+
         PpCr4i/w4OgOOOfh0u0vJrFf3x7BiFikwgcTJHspvdRzAkNAndSNH6PnJrpd+Q/s1mlEwytUumycenIRLwDmWGYCSGB
         xcU6IfSaeUPI6JROuhFjNjb2N6CpiswU1pWAGKVLi3a5BcmPnJc7XQcG+vb9sAX9BVmwL1sRqC1Dz0IBjLz8eYzebLu
         uMb8Q==
          -----END CERTIFICATE-----",
         "signature": "tcWuM6dk/a0XYFcbqSpDIe7BvN/EsX2CskB6xecryFhXS3HbbeB97K6GqI/TQnZZPC40KfQDUTVn7oSDH9AvnFIDQSsBUCqcfl0Q0CRdm9KE9brCT
          zwxPTHdN4kcC8I2iMxQVzsqV/TL39QUGlwhtYLJOqEaJ5sDqbmnW9XVO6TaEkcagHoF3Je+iglVbMmL7cfpySlppU9+TO6tSYlLP/nX53mEhBgN4ANSQ0gKNQR3izG
          Ca8mHgqGWnoahrR/dHHWADrKDF6SeMbmvo0e4/EOXaO89QyPrGwF8kuzI04HpXUWlOYfaubKkNHi3gckXFzNB84nhrp0SNz3RHxNEkA=="
        }
      x-sample-call-output: |-
        {
         "id": "f52023eb-7991-47ba-91fc-c43bd9d80c29",
         "instance_manifest": {
             "instance_info": {
             "instance_id": "7f803018-f56f-45bb-942a-88fb838ca231",
             "host_hardware_uuid": "808b706f-5631-e511-906e-0012795d96dd",
             "image_id": "12002400-d06b-4c9b-ae3b-ad462cceb674"
             },
             "image_encrypted": true
         },
         "policy_name": "Intel Container Policy",
         "results": [
            {
               "rule": {
                  "rule_name": "EncryptionMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                     "name": "encryption_required",
                     "value": true
                   }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
            },
            {
                "rule": {
                  "rule_name": "IntegrityMatches",
                  "markers": [
                     "CONTAINER_IMAGE"
                  ],
                  "expected": {
                  "name": "integrity_enforced",
                  "value": false
                  }
                },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             },
             {
                "rule": {
                  "rule_name": "FlavorIntegrityMatches",
                  "markers": [
                     "flavorIntegrity"
                  ],
                  "expected": {
                  "name": "flavor_trusted",
                  "value": true
                  }
               },
                "flavor_id": "6921c95d-14a8-4ea8-949d-d338d88a447f",
                "trusted": true
             }
         ],
         "trusted": true,
         "data": "eyJpbnN0YW5jZV9tYW5pZmVzdCI6eyJpbnN0YW5jZV9pbmZvIjp7Imluc3RhbmNlX2lkIjoiN2Y4MDMwMTgtZjU2Zi00NWJiLTk0Mm
          EtODhmYjgzOGNhMjMxIiwiaG9zdF9oYXJkd2FyZV91dWlkIjoiODA4YjcwNmYtNTYzMS1lNTExLTkwNmUtMDAxMjc5NWQ5NmRkIiwiaW1hZ2VfaW
          QiOiIxMjAwMjQwMC1kMDZiLTRjOWItYWUzYi1hZDQ2MmNjZWI2NzQifSwiaW1hZ2VfZW5jcnlwdGVkIjp0cnVlfSwicG9saWN5X25hbWUiOiJJbn
          RlbCBDb250YWluZXIgUG9saWN5IiwicmVzdWx0cyI6W3sicnVsZSI6eyJydWxlX25hbWUiOiJFbmNyeXB0aW9uTWF0Y2hlcyIsIm1hcmtlcnMiOl
          siQ09OVEFJTkVSX0lNQUdFIl0sImV4cGVjdGVkIjp7Im5hbWUiOiJlbmNyeXB0aW9uX3JlcXVpcmVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2
          lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OGE0NDdmIiwidHJ1c3RlZCI6dHJ1ZX0seyJydWxlIjp7InJ1bGVfbmFtZSI6IkludG
          Vncml0eU1hdGNoZXMiLCJtYXJrZXJzIjpbIkNPTlRBSU5FUl9JTUFHRSJdLCJleHBlY3RlZCI6eyJuYW1lIjoiaW50ZWdyaXR5X2VuZm9yY2VkIiw
          idmFsdWUiOmZhbHNlfX0sImZsYXZvcl9pZCI6IjY5MjFjOTVkLTE0YTgtNGVhOC05NDlkLWQzMzhkODhhNDQ3ZiIsInRydXN0ZWQiOnRydWV9LHsi
          cnVsZSI6eyJydWxlX25hbWUiOiJGbGF2b3JJbnRlZ3JpdHlNYXRjaGVzIiwibWFya2VycyI6WyJmbGF2b3JJbnRlZ3JpdHkiXSwiZXhwZWN0ZWQiO
          nsibmFtZSI6ImZsYXZvcl90cnVzdGVkIiwidmFsdWUiOnRydWV9fSwiZmxhdm9yX2lkIjoiNjkyMWM5NWQtMTRhOC00ZWE4LTk0OWQtZDMzOGQ4OG
          E0NDdmIiwidHJ1c3RlZCI6dHJ1ZX1dLCJ0cnVzdGVkIjp0cnVlfQ==",
         "hash_alg": "SHA-256",
         "cert": "-----BEGIN CERTIFICATE-----
         MIIFEDCCA3igAwIBAgIIbb/wqvbCU/swDQYJKoZIhvcNAQEMBQAwGzEZMBcGA1UEAxMQbXR3aWxzb24tcGNhLWFpazA
         eFw0xOTA4MjMxMjQxMzlaFw0yOTA4MjAxMjQxMzlaMCUxIzAhBgNVBAMMGkNOPVNpZ25pbmdfS2V5X0NlcnRpZmljYX
         RlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtykLA0i8F/i8/XaxxiOQODQ8DBtmHFUmagQt0/Uanfe7g
         ZIlDWXidc7JJ0c4BaO8TACTOU2RH3aI4qOdTM3KzCERyssuJPFpJyhAbMlQcW1GqO/ZnH1SinnrDnDuCaFE1H1oWldW
         GIJFG964Chlu1tDBaSpHqhrSe9HFT2ne+k8SbWNCKQp99UJWwvE9ZIb8HI42I+duwkazPEKGcL64AKhx+/9su3qJ51k
         PaIp3LnPlFWj8GTQ1hPCTCxMZcc6b/BdGjfQYuz7XFL8Vnwx53ILidMsAf/7WWT9dc99yYFIl4AtzcToAIV28gRBzRe
         6AVQPa8tPtgixg34LIwDGZZQIDAQABo4IBzDCCAcgwDgYDVR0PAQH/BAQDAgbAMIGdBgdVBIEFAwIpBIGR/1RDR4AXA
         CIAC6PFIigCakiZJBZJguUgZk6BUJXqvvNG5JPeoTyYzN3uAAQA/1WqAAAAAAA7OO4AAAAEAAAAAQAABAABFQQVCQAi
         AAsx6pP2c46F7wuGDjaihI06cBKS3tSCGFm4ekaqR45d0gAiAAuh4F4oZZ1bUYKd4p5cle2322+fKD09GJ8/NSyl1FF
         E3TCCARQGCFUEgQUDAikBBIIBBgAUAAsBAI/eR4gVGaVG3DGO4n8bhmeBHlVgeuUkWyDet3oA+GZqtITbVM4PsChznS
         7l2hZx3HkevL2LWX3WycR0VSR1uylWVeHCJUJjwArA2i9LhItFZdoUlEvVMnfzaGdoa2m2VuHs7NUDW1Nd0rE9eAlHA
         EdUzCIE2wNr7dloHZHs6S7F3KJrWH5ATGfEayiBYg+/hj4jXqxyW1VNGNI6KdKzZyzk+QlGQkFtdRpBTqUhrZBp4FYD
         lKq81PuJ3ayVS1FY6vQ2Nz70ueGoF1K73qbEAFTcBuMHzpU8ZS5JUO9eEeWHRCn+BbA1KMB6576pVAXz//e3/sEDsCX
         nlieYETzPbA8wDQYJKoZIhvcNAQEMBQADggGBAJuupBNdZwCZ6gDoZEOYr0SeM6O+xK0Q/Oe7ecPjTGXrdsgbul5DnI
         prIav7fZ4e7q+utzh8l9uij3wAfOM5gT1ud1TJLuCyl70e3VSHcuGBCRcFC4xXGykT+UqfdnqCnkSnQbQUAIBr46zoy
         Ap1P4/QdMBDJo/BjPQTdThFValrp95EfNTavFkXogryEKmWMANgHh+ZNyQfXunjjaaS99yFdoPGgoLFHbVQ1ehUP3m5
         4X1la90+59TccPD01JHibA9Tp9hsDA9NVGf3tBokoEzPBgu9ilHUR7sZ+C6CZ3YjHhcghJoau03UzUQ/pyLGs+lV9U+
         PpCr4i/w4OgOOOfh0u0vJrFf3x7BiFikwgcTJHspvdRzAkNAndSNH6PnJrpd+Q/s1mlEwytUumycenIRLwDmWGYCSGB
         xcU6IfSaeUPI6JROuhFjNjb2N6CpiswU1pWAGKVLi3a5BcmPnJc7XQcG+vb9sAX9BVmwL1sRqC1Dz0IBjLz8eYzebLu
         uMb8Q==
          -----END CERTIFICATE-----",
         "signature": "tcWuM6dk/a0XYFcbqSpDIe7BvN/EsX2CskB6xecryFhXS3HbbeB97K6GqI/TQnZZPC40KfQDUTVn7oSDH9AvnFIDQSsBUCqcfl0Q0CRdm9KE9brCT
          zwxPTHdN4kcC8I2iMxQVzsqV/TL39QUGlwhtYLJOqEaJ5sDqbmnW9XVO6TaEkcagHoF3Je+iglVbMmL7cfpySlppU9+TO6tSYlLP/nX53mEhBgN4ANSQ0gKNQR3izG
          Ca8mHgqGWnoahrR/dHHWADrKDF6SeMbmvo0e4/EOXaO89QyPrGwF8kuzI04HpXUWlOYfaubKkNHi3gckXFzNB84nhrp0SNz3RHxNEkA=="
        }
  /reports/{report_id}:
    delete:
      description: |
        Deletes the image trust report associated with a specified report id from the workload service
        database. A valid bearer token should be provided to authorize this REST call.
      operationId: deleteReportById
      parameters:
      - description: Unique ID of the report.
        format: uuid
        in: path
        name: report_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the image trust report associated with
            specified report id.
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-sample-call-endpoint: |
        https://workloadservice.com:5000/wls/v1/reports/f52023eb-7991-47ba-91fc-c43bd9d80c29
      x-sample-call-output: |
        204 No content
  /version:
    get:
      description: |
        GetVersion is used to get the version of the application.
        Returns - The version of the application.
      operationId: GetVersion
      produces:
      - text/plain
      responses:
        "200":
          description: Successfully retrieved the version.
      tags:
      - Version
      x-sample-call-endpoint: https://workloadservice.com:5000/wls/v1/version
      x-sample-call-output: |-
        Service Name: Workload Service
        Version: v3.4.0-0f0162ea
        Build Date: 2021-03-08T12:18:54+0000
responses:
  FlavorResponse:
    description: FlavorResponse response payload
    schema:
      $ref: '#/definitions/ImageFlavor'
  FlavorsResponse:
    description: FlavorsResponse response payload
    schema:
      $ref: '#/definitions/FlavorsResponse'
  ImagesResponse:
    description: ImagesResponse response payload
    schema:
      $ref: '#/definitions/ImagesResponse'
  KeyResponse:
    description: KeyResponse response payload
    schema:
      $ref: '#/definitions/ReturnKey'
  ReportsResponse:
    description: ReportsResponse response payload
    schema:
      $ref: '#/definitions/ReportsResponse'
schemes:
- https
securityDefinitions:
  bearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
