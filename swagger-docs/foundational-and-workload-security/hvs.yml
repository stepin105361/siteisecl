basePath: /hvs/v2/
definitions:
  AES_NI:
    description: AES_NI
    properties:
      enabled:
        type: boolean
        x-go-name: Enabled
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  AssetTag:
    description: AssetTag is used to hold the Asset Tag certificate provisioned by
      VS for the host
    properties:
      tag_certificate:
        $ref: '#/definitions/X509AttributeCertificate'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  AttrObjects:
    description: AttrObject holds the individual TagKeyValue Pair - TagKVAttribute
      which is decoded from ASN.1 values
    properties:
      objects:
        $ref: '#/definitions/TagKvAttribute'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  Attribute:
    description: Attribute is used to store the custom Asset Tags embedded in the
      tag certificate
    properties:
      attr_type:
        properties:
          id:
            type: string
            x-go-name: ID
        type: object
        x-go-name: AttrType
      attribute_values:
        items:
          $ref: '#/definitions/AttrObjects'
        type: array
        x-go-name: AttributeValues
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  Bios:
    description: Bios holds details of the Bios vendor firmware information
    properties:
      bios_name:
        type: string
        x-go-name: BiosName
      bios_version:
        type: string
        x-go-name: BiosVersion
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  CBNT:
    properties:
      enabled:
        type: string
        x-go-name: Enabled
      meta:
        properties:
          msr:
            type: string
            x-go-name: MSR
          profile:
            type: string
            x-go-name: Profile
        type: object
        x-go-name: Meta
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  CaCertificate:
    description: CaCertificate is to represent certificate/ca certificate
    properties:
      certificate:
        format: base64
        type: string
        x-go-name: Certificate
      name:
        type: string
        x-go-name: Name
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  CaCertificateCollection:
    description: CaCertificateCollection is collection of certificates/ca certificates
    properties:
      ca_certificate:
        items:
          $ref: '#/definitions/CaCertificate'
        type: array
        x-go-name: CaCerts
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  DeployManifestRequest:
    properties:
      flavor_id:
        format: uuid
        type: string
        x-go-name: FlavorId
      host_id:
        format: uuid
        type: string
        x-go-name: HostId
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  DirManifestType:
    properties:
      Exclude:
        type: string
      FilterType:
        type: string
      Include:
        type: string
      Path:
        type: string
      SearchType:
        type: string
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  ESXiCluster:
    properties:
      cluster_name:
        type: string
        x-go-name: ClusterName
      connection_string:
        type: string
        x-go-name: ConnectionString
      hosts:
        items:
          type: string
        type: array
        x-go-name: HostNames
      id:
        format: uuid
        type: string
        x-go-name: Id
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  ESXiClusterCollection:
    properties:
      esxi_clusters:
        items:
          $ref: '#/definitions/ESXiCluster'
        type: array
        x-go-name: ESXiCluster
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  ESXiClusterCreateRequest:
    properties:
      cluster_name:
        type: string
        x-go-name: ClusterName
      connection_string:
        type: string
        x-go-name: ConnectionString
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  EventLog:
    properties:
      measurement:
        type: string
        x-go-name: Measurement
      tags:
        items:
          type: string
        type: array
        x-go-name: Tags
      type_id:
        type: string
        x-go-name: TypeID
      type_name:
        type: string
        x-go-name: TypeName
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  EventLogEqual:
    properties:
      events:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: Events
      exclude_tags:
        items:
          type: string
        type: array
        x-go-name: ExcludeTags
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  EventLogEquals:
    description: 'EventlogEquals key needs to be included when equals rule has to
      be applied for the particular PCR. Sample value: "eventlog_equals": {"excluding_tags":
      ["LCP_CONTROL_HASH","initrd","vmlinuz"]}'
    properties:
      excluding_tags:
        description: To exclude events, list of event tags need to be provided as
          string array.
        items:
          type: string
        type: array
        x-go-name: ExcludingTags
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  External:
    description: External is a component of flavor that encloses the AssetTag cert
    properties:
      asset_tag:
        $ref: '#/definitions/AssetTag'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  Fault:
    properties:
      actual_pcrvalue:
        type: string
        x-go-name: ActualPcrValue
      actual_value:
        type: string
        x-go-name: ActualValue
      calculated_value:
        type: string
        x-go-name: CalculatedValue
      description:
        type: string
        x-go-name: Description
      exclude_tags:
        items:
          type: string
        type: array
        x-go-name: ExcludeTags
      expected_pcrvalue:
        type: string
        x-go-name: ExpectedPcrValue
      expected_value:
        type: string
        x-go-name: ExpectedValue
      fault_name:
        type: string
        x-go-name: Name
      flavor_digest_alg:
        type: string
        x-go-name: FlavorDigestAlg
      flavor_id:
        $ref: '#/definitions/UUID'
      measurement_digest_alg:
        type: string
        x-go-name: MeasurementDigestAlg
      measurement_id:
        type: string
        x-go-name: MeasurementId
      mismatch_measurements:
        items:
          $ref: '#/definitions/FlavorMeasurement'
        type: array
        x-go-name: MismatchMeasurements
      missing_entries:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: MissingEntries
      missing_measurements:
        items:
          $ref: '#/definitions/FlavorMeasurement'
        type: array
        x-go-name: MissingMeasurements
      pcr_bank:
        $ref: '#/definitions/SHAAlgorithm'
      pcr_index:
        $ref: '#/definitions/PcrIndex'
      unexpected_entries:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: UnexpectedEntries
      unexpected_measurements:
        items:
          $ref: '#/definitions/FlavorMeasurement'
        type: array
        x-go-name: UnexpectedMeasurements
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Feature:
    description: Feature encapsulates the presence of various Platform security features
      on the Host hardware
    properties:
      AES_NI:
        $ref: '#/definitions/AES_NI'
      BMC:
        $ref: '#/definitions/HardwareFeature'
      CBNT:
        $ref: '#/definitions/CBNT'
      PFR:
        $ref: '#/definitions/HardwareFeature'
      TPM:
        $ref: '#/definitions/TPM'
      TXT:
        $ref: '#/definitions/HardwareFeature'
      UEFI:
        $ref: '#/definitions/UEFI'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  FileManifestType:
    properties:
      Path:
        type: string
      SearchType:
        type: string
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  Flavor:
    description: |-
      Flavor is a standardized set of expectations that determines what platform
      measurements will be considered “trusted.”
    properties:
      bios:
        $ref: '#/definitions/Bios'
      external:
        $ref: '#/definitions/External'
      hardware:
        $ref: '#/definitions/Hardware'
      meta:
        $ref: '#/definitions/Meta'
      pcrs:
        items:
          $ref: '#/definitions/FlavorPcrs'
        type: array
        x-go-name: Pcrs
      software:
        $ref: '#/definitions/Software'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  FlavorCollection:
    description: FlavorCollection is a list of Flavor objects in response to a Flavor
      Search query
    properties:
      flavors:
        items:
          $ref: '#/definitions/Flavors'
        type: array
        x-go-name: Flavors
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorCreateRequest:
    properties:
      connection_string:
        type: string
        x-go-name: ConnectionString
      flavor_collection:
        $ref: '#/definitions/FlavorCollection'
      flavorgroup_names:
        items:
          type: string
        type: array
        x-go-name: FlavorgroupNames
      partial_flavor_types:
        items:
          $ref: '#/definitions/FlavorPart'
        type: array
        x-go-name: FlavorParts
      signed_flavor_collection:
        $ref: '#/definitions/SignedFlavorCollection'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/hvs/domain/models
  FlavorGroup:
    properties:
      flavor_match_policies:
        $ref: '#/definitions/FlavorMatchPolicies'
      flavorIds:
        format: uuid
        type: string
        x-go-name: FlavorIds
      flavorTemplateIds:
        format: uuid
        type: string
        x-go-name: FlavorTemplateIds
      flavors:
        items:
          $ref: '#/definitions/Flavor'
        type: array
        x-go-name: Flavors
      id:
        format: uuid
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorMatchPolicies:
    items:
      $ref: '#/definitions/FlavorMatchPolicy'
    type: array
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorMatchPolicy:
    properties:
      flavor_part:
        $ref: '#/definitions/FlavorPart'
      match_policy:
        $ref: '#/definitions/MatchPolicy'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorMeasurement:
    properties:
      Exclude:
        type: string
      FilterType:
        type: string
      Include:
        type: string
      Path:
        type: string
      SearchType:
        type: string
      type:
        $ref: '#/definitions/MeasurementType'
      value:
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  FlavorPart:
    properties:
      meta:
        additionalProperties:
          type: object
        description: Meta is key:value pair section used to define flavorparts with
          its own meta fields.
        type: object
        x-go-name: Meta
      pcr_rules:
        items:
          $ref: '#/definitions/PcrRules'
        type: array
        x-go-name: PcrRules
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorParts:
    properties:
      HOST_UNIQUE:
        $ref: '#/definitions/FlavorPart'
      OS:
        $ref: '#/definitions/FlavorPart'
      PLATFORM:
        $ref: '#/definitions/FlavorPart'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorPcrs:
    properties:
      eventlog_equals:
        $ref: '#/definitions/EventLogEqual'
      eventlog_includes:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: EventlogIncludes
      measurement:
        type: string
        x-go-name: Measurement
      pcr:
        $ref: '#/definitions/Pcr'
      pcr_matches:
        type: boolean
        x-go-name: PCRMatches
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  FlavorRequiredPolicy:
    type: string
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTemplate:
    properties:
      condition:
        description: 'An array of ''jsonquery'' statements that are used to determine
          if the template should be executed. Sample value: ["//host_info/os_name//*[text()=''RedHatEnterprise'']","//host_info/hardware_features/TPM/meta/tpm_version//*[text()=''2.0'']"].'
        items:
          type: string
        type: array
        x-go-name: Condition
      flavor_parts:
        $ref: '#/definitions/FlavorParts'
      id:
        $ref: '#/definitions/UUID'
      label:
        type: string
        x-go-name: Label
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTemplateFlavorgroup:
    properties:
      flavorgroup_id:
        format: uuid
        type: string
        x-go-name: FlavorgroupId
      flavortemplate_id:
        format: uuid
        type: string
        x-go-name: FlavortemplateId
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTemplateFlavorgroupCollection:
    properties:
      flavorgroup_flavortemplate_links:
        items:
          $ref: '#/definitions/FlavorTemplateFlavorgroup'
        type: array
        x-go-name: FlavorTemplateFlavorgroups
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTemplateFlavorgroupCreateRequest:
    properties:
      flavorgroup_id:
        format: uuid
        type: string
        x-go-name: FlavorgroupId
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTemplateReq:
    properties:
      flavor_template:
        $ref: '#/definitions/FlavorTemplate'
      flavorgroup_names:
        items:
          type: string
        type: array
        x-go-name: FlavorgroupNames
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorTrustStatus:
    properties:
      rules:
        items:
          $ref: '#/definitions/RuleResult'
        type: array
        x-go-name: RuleResultCollection
      trust:
        type: boolean
        x-go-name: Trust
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorgroupCollection:
    properties:
      flavorgroups:
        items:
          $ref: '#/definitions/FlavorGroup'
        type: array
        x-go-name: Flavorgroups
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorgroupFlavorLink:
    properties:
      flavor_id:
        format: uuid
        type: string
        x-go-name: FlavorID
      flavorgroup_id:
        format: uuid
        type: string
        x-go-name: FlavorGroupID
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorgroupFlavorLinkCollection:
    properties:
      flavor_flavorgroup_links:
        items:
          $ref: '#/definitions/FlavorgroupFlavorLink'
        type: array
        x-go-name: FGFLinks
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  FlavorgroupFlavorLinkCriteria:
    description: FlavorgroupFlavorLinkCriteria is used to hold the request details
      of a Flavor-FlavorGroup Link Request
    properties:
      flavor_id:
        format: uuid
        type: string
        x-go-name: FlavorID
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Flavors:
    properties:
      flavor:
        $ref: '#/definitions/Flavor'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Hardware:
    description: Hardware contains information about the host's Hardware, Processor
      and Platform Features
    properties:
      feature:
        $ref: '#/definitions/Feature'
      processor_flags:
        type: string
        x-go-name: ProcessorFlags
      processor_info:
        type: string
        x-go-name: ProcessorInfo
      vendor:
        type: string
        x-go-name: Vendor
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  HardwareFeature:
    properties:
      enabled:
        type: string
        x-go-name: Enabled
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  HardwareFeatures:
    properties:
      BMC:
        $ref: '#/definitions/HardwareFeature'
      CBNT:
        $ref: '#/definitions/CBNT'
      PFR:
        $ref: '#/definitions/HardwareFeature'
      TPM:
        $ref: '#/definitions/TPM'
      TXT:
        $ref: '#/definitions/HardwareFeature'
      UEFI:
        $ref: '#/definitions/UEFI'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  Host:
    properties:
      connection_string:
        type: string
        x-go-name: ConnectionString
      description:
        type: string
        x-go-name: Description
      flavorgroup_names:
        items:
          type: string
        type: array
        x-go-name: FlavorgroupNames
      hardware_uuid:
        format: uuid
        type: string
        x-go-name: HardwareUuid
      host_name:
        type: string
        x-go-name: HostName
      id:
        format: uuid
        type: string
        x-go-name: Id
      report:
        $ref: '#/definitions/TrustReport'
      status:
        $ref: '#/definitions/HostStatusInformation'
      trusted:
        type: boolean
        x-go-name: Trusted
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostCollection:
    properties:
      hosts:
        items:
          $ref: '#/definitions/Host'
        type: array
        x-go-name: Hosts
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostCreateRequest:
    properties:
      connection_string:
        type: string
        x-go-name: ConnectionString
      description:
        type: string
        x-go-name: Description
      flavorgroup_names:
        items:
          type: string
        type: array
        x-go-name: FlavorgroupNames
      host_name:
        type: string
        x-go-name: HostName
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostFlavorgroup:
    properties:
      flavorgroup_id:
        format: uuid
        type: string
        x-go-name: FlavorgroupId
      host_id:
        format: uuid
        type: string
        x-go-name: HostId
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostFlavorgroupCollection:
    properties:
      flavorgroup_host_links:
        items:
          $ref: '#/definitions/HostFlavorgroup'
        type: array
        x-go-name: HostFlavorgroups
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostFlavorgroupCreateRequest:
    properties:
      flavorgroup_id:
        format: uuid
        type: string
        x-go-name: FlavorgroupId
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostInfo:
    properties:
      bios_name:
        type: string
        x-go-name: BiosName
      bios_version:
        type: string
        x-go-name: BiosVersion
      hardware_features:
        $ref: '#/definitions/HardwareFeatures'
      hardware_uuid:
        type: string
        x-go-name: HardwareUUID
      host_name:
        type: string
        x-go-name: HostName
      installed_components:
        items:
          type: string
        type: array
        x-go-name: InstalledComponents
      is_docker_env:
        type: string
        x-go-name: IsDockerEnvironment
      no_of_sockets:
        format: int64
        type: string
        x-go-name: NumberOfSockets
      os_name:
        type: string
        x-go-name: OSName
      os_type:
        type: string
        x-go-name: OSType
      os_version:
        type: string
        x-go-name: OSVersion
      process_flags:
        type: string
        x-go-name: ProcessorFlags
      processor_info:
        type: string
        x-go-name: ProcessorInfo
      tboot_installed:
        type: string
        x-go-name: TbootInstalled
      vmm_name:
        type: string
        x-go-name: VMMName
      vmm_version:
        type: string
        x-go-name: VMMVersion
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  HostManifest:
    properties:
      aik_certificate:
        type: string
        x-go-name: AIKCertificate
      asset_tag_digest:
        type: string
        x-go-name: AssetTagDigest
      binding_key_certificate:
        type: string
        x-go-name: BindingKeyCertificate
      host_info:
        $ref: '#/definitions/HostInfo'
      measurement_xmls:
        items:
          type: string
        type: array
        x-go-name: MeasurementXmls
      pcr_manifest:
        $ref: '#/definitions/PcrManifest'
      quote_digest:
        type: string
        x-go-name: QuoteDigest
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  HostManifestPcrs:
    properties:
      index:
        $ref: '#/definitions/PcrIndex'
      pcr_bank:
        $ref: '#/definitions/SHAAlgorithm'
      value:
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  HostState:
    description: HostState is an enumerated set of states that describe the connection
      state between VS and the Host at any point of time
    format: int64
    type: integer
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostStatus:
    description: HostStatus contains the response for the Host Status API for an individual
      host
    properties:
      created:
        format: date-time
        type: string
        x-go-name: Created
      host_id:
        format: uuid
        type: string
        x-go-name: HostID
      host_manifest:
        $ref: '#/definitions/HostManifest'
      id:
        format: uuid
        type: string
        x-go-name: ID
      status:
        $ref: '#/definitions/HostStatusInformation'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostStatusCollection:
    description: HostStatusCollection holds a collection of HostStatus in response
      to an API query
    properties:
      host_status:
        items:
          $ref: '#/definitions/HostStatus'
        type: array
        x-go-name: HostStatuses
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  HostStatusInformation:
    description: |-
      HostStatusInformation holds the current connection state between the Host's Trust Agent and VS and the timestamp of the
      last successful connection
    properties:
      host_state:
        format: string
        type: string
        x-go-name: HostState
      last_time_connected:
        format: date-time
        type: string
        x-go-name: LastTimeConnected
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Manifest:
    description: |-
      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
      <Manifest xmlns="lib:wml:manifests:1.0" Label="ISecL_Default_Workload_Flavor_v1.0" Uuid="7a9ac586-40f9-43b2-976b-26667431efca" DigestAlg="SHA384">
      <Dir Exclude="" FilterType="regex" Include=".*" Path="/opt/workload-agent/bin"/>
      <Symlink Path="/opt/workload-agent/bin/wlagent"/>
      <File Path="/opt/workload-agent/bin/.*" SearchType="regex"/>
      </Manifest>
    properties:
      DigestAlg:
        type: string
      Dir:
        items:
          $ref: '#/definitions/DirManifestType'
        type: array
      File:
        items:
          $ref: '#/definitions/FileManifestType'
        type: array
      Label:
        type: string
      Symlink:
        items:
          $ref: '#/definitions/SymlinkManifestType'
        type: array
      Uuid:
        type: string
      XMLName:
        $ref: '#/definitions/Name'
      Xmlns:
        type: string
    title: xml request format sent from VS...
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  ManifestRequest:
    properties:
      ConnectionString:
        type: string
      FlavorGroupNames:
        items:
          type: string
        type: array
      HostId:
        format: uuid
        type: string
      Manifest:
        $ref: '#/definitions/Manifest'
      XMLName:
        $ref: '#/definitions/Name'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  MatchPolicy:
    properties:
      match_type:
        $ref: '#/definitions/MatchType'
      required:
        $ref: '#/definitions/FlavorRequiredPolicy'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  MatchType:
    type: string
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  MeasurementType:
    type: string
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  Meta:
    description: Meta holds metadata information related to the Flavor
    properties:
      description:
        additionalProperties:
          type: object
        type: object
        x-go-name: Description
      id:
        format: uuid
        type: string
        x-go-name: ID
      realm:
        type: string
        x-go-name: Realm
      schema:
        $ref: '#/definitions/Schema'
      vendor:
        $ref: '#/definitions/Vendor'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  MismatchField:
    properties:
      description:
        type: string
        x-go-name: Description
      missing_entries:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: MissingEntries
      name:
        type: string
        x-go-name: Name
      pcr_bank:
        $ref: '#/definitions/SHAAlgorithm'
      pcr_index:
        $ref: '#/definitions/PcrIndex'
      unexpected_entries:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: UnexpectedEntries
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Name:
    description: |-
      A Name represents an XML name (Local) annotated
      with a name space identifier (Space).
      In tokens returned by Decoder.Token, the Space identifier
      is given as a canonical URL, not the short prefix used
      in the document being parsed.
    properties:
      Space:
        type: string
        x-go-name: Local
    type: object
    x-go-package: encoding/xml
  PCR:
    properties:
      bank:
        description: Valid PCR banks are SHA1, SHA256, SHA384 and SHA512.
        items:
          type: string
        type: array
        x-go-name: Bank
      index:
        description: Valid PCR index is from 0 to 23.
        format: int64
        type: integer
        x-go-name: Index
    title: PCR - To store PCR index with respective PCR bank.
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Pcr:
    properties:
      bank:
        description: Valid PCR banks are SHA1, SHA256, SHA384 and SHA512.
        type: string
        x-go-name: Bank
      index:
        description: Valid PCR index is from 0 to 23.
        format: int64
        type: integer
        x-go-name: Index
    title: PCR - To store PCR index with respective PCR bank.
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  PcrEventLogMap:
    properties:
      SHA1:
        items:
          $ref: '#/definitions/TpmEventLog'
        type: array
        x-go-name: Sha1EventLogs
      SHA256:
        items:
          $ref: '#/definitions/TpmEventLog'
        type: array
        x-go-name: Sha256EventLogs
      SHA384:
        items:
          $ref: '#/definitions/TpmEventLog'
        type: array
        x-go-name: Sha384EventLogs
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  PcrIndex:
    format: int64
    type: integer
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  PcrManifest:
    properties:
      pcr_event_log_map:
        $ref: '#/definitions/PcrEventLogMap'
      sha1pcrs:
        items:
          $ref: '#/definitions/HostManifestPcrs'
        type: array
        x-go-name: Sha1Pcrs
      sha2pcrs:
        items:
          $ref: '#/definitions/HostManifestPcrs'
        type: array
        x-go-name: Sha256Pcrs
      sha3pcrs:
        items:
          $ref: '#/definitions/HostManifestPcrs'
        type: array
        x-go-name: Sha384Pcrs
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  PcrRules:
    properties:
      eventlog_equals:
        $ref: '#/definitions/EventLogEquals'
      eventlog_includes:
        description: 'To include events, list of event tags need to be provided as
          string array. Sample value: "eventlog_includes": ["shim","db","kek","vmlinuz"]'
        items:
          type: string
        type: array
        x-go-name: EventlogIncludes
      pcr:
        $ref: '#/definitions/PCR'
      pcr_matches:
        description: Boolean value to denote whether pcr matches rule needs to be
          applied.
        type: boolean
        x-go-name: PcrMatches
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Report:
    properties:
      created:
        format: date-time
        type: string
        x-go-name: CreatedAt
      expiration:
        format: date-time
        type: string
        x-go-name: Expiration
      host_id:
        format: uuid
        type: string
        x-go-name: HostID
      host_info:
        $ref: '#/definitions/HostInfo'
      id:
        format: uuid
        type: string
        x-go-name: ID
      trust_information:
        $ref: '#/definitions/TrustInformation'
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  ReportCollection:
    properties:
      reports:
        items:
          $ref: '#/definitions/Report'
        type: array
        x-go-name: Reports
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  ReportCreateRequest:
    properties:
      hardware_uuid:
        format: uuid
        type: string
        x-go-name: HardwareUUID
      host_id:
        format: uuid
        type: string
        x-go-name: HostID
      host_name:
        type: string
        x-go-name: HostName
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  RuleInfo:
    properties:
      excluding_tag:
        items:
          type: string
        type: array
        x-go-name: Exclude_Tags
      expected_measurements:
        items:
          $ref: '#/definitions/FlavorMeasurement'
        type: array
        x-go-name: ExpectedMeasurements
      expected_pcr:
        $ref: '#/definitions/FlavorPcrs'
      expected_pcrvalues:
        $ref: '#/definitions/TpmEventLog'
      expected_tag:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: ExpectedTag
      expected_value:
        type: string
        x-go-name: ExpectedValue
      flavor_id:
        $ref: '#/definitions/UUID'
      flavor_name:
        type: string
        x-go-name: FlavorName
      markers:
        items:
          $ref: '#/definitions/FlavorPart'
        type: array
        x-go-name: Markers
      measurement:
        type: string
        x-go-name: Measurement
      pcr:
        $ref: '#/definitions/Pcr'
      pcr_matches:
        type: boolean
        x-go-name: PCRMatches
      rule_name:
        type: string
        x-go-name: Name
      tags:
        additionalProperties:
          type: string
        type: object
        x-go-name: Tags
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  RuleResult:
    properties:
      faults:
        items:
          $ref: '#/definitions/Fault'
        type: array
        x-go-name: Faults
      flavor_id:
        $ref: '#/definitions/UUID'
      mismatch_fields:
        items:
          $ref: '#/definitions/MismatchField'
        type: array
        x-go-name: MismatchField
      rule:
        $ref: '#/definitions/RuleInfo'
      trusted:
        type: boolean
        x-go-name: Trusted
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  SHAAlgorithm:
    type: string
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  Schema:
    description: Schema defines the Uri of the schema
    properties:
      uri:
        type: string
        x-go-name: Uri
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  SignedFlavor:
    description: SignedFlavor combines the Flavor along with the cryptographically
      signed hash that authenticates its source
    properties:
      flavor:
        $ref: '#/definitions/Flavor'
      signature:
        type: string
        x-go-name: Signature
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  SignedFlavorCollection:
    description: SignedFlavorCollection is a list of SignedFlavor objects
    properties:
      signed_flavors:
        items:
          $ref: '#/definitions/SignedFlavor'
        type: array
        x-go-name: SignedFlavors
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  Software:
    description: Software consists of integrity measurements of Software/OS related
      resources
    properties:
      cumulative_hash:
        type: string
        x-go-name: CumulativeHash
      measurements:
        additionalProperties:
          $ref: '#/definitions/FlavorMeasurement'
        type: object
        x-go-name: Measurements
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
  SymlinkManifestType:
    properties:
      Path:
        type: string
      SearchType:
        type: string
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  TPM:
    properties:
      enabled:
        type: string
        x-go-name: Enabled
      meta:
        properties:
          tpm_version:
            type: string
            x-go-name: TPMVersion
        type: object
        x-go-name: Meta
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  TagCertificate:
    description: TagCertificate model lays out the attributes required for TagCertificates
    properties:
      asset_tag_digest:
        type: string
        x-go-name: TagCertDigest
      certificate:
        format: base64
        type: string
        x-go-name: Certificate
      hardware_uuid:
        format: uuid
        type: string
        x-go-name: HardwareUUID
      id:
        format: uuid
        type: string
        x-go-name: ID
      issuer:
        type: string
        x-go-name: Issuer
      not_after:
        format: date-time
        type: string
        x-go-name: NotAfter
      not_before:
        format: date-time
        type: string
        x-go-name: NotBefore
      subject:
        type: string
        x-go-name: Subject
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  TagCertificateCollection:
    description: TagCertificateCollection is the response sent by the tag-certificate
      API
    properties:
      certificates:
        items:
          $ref: '#/definitions/TagCertificate'
        type: array
        x-go-name: TagCertificates
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  TagCertificateCreateCriteria:
    description: TagCertificateCreateCriteria holds the data used to create a TagCertificate
    properties:
      hardware_uuid:
        description: HardwareUUID The hardware UUID of the host to which the tag certificate
          is associated.
        format: uuid
        type: string
        x-go-name: HardwareUUID
      selection_content:
        description: SelectionContent is an array of one or more key-value pairs with
          the tag selection attributes.
        items:
          $ref: '#/definitions/TagKvAttribute'
        type: array
        x-go-name: SelectionContent
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/hvs/domain/models
  TagCertificateDeployCriteria:
    description: TagCertificateDeployCriteria holds the data used to deploy a TagCertificate
      onto a host
    properties:
      certificate_id:
        format: uuid
        type: string
        x-go-name: CertID
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/hvs/domain/models
  TagKvAttribute:
    description: TagKvAttribute struct is the key-value asset-tag attributes
    properties:
      name:
        type: string
        x-go-name: Key
      value:
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/asset-tag
  TpmEndorsement:
    description: TpmEndorsement struct
    properties:
      certificate:
        type: string
        x-go-name: Certificate
      certificate_digest:
        type: string
        x-go-name: CertificateDigest
      comment:
        type: string
        x-go-name: Comment
      hardware_uuid:
        format: uuid
        type: string
        x-go-name: HardwareUUID
      id:
        format: uuid
        type: string
        x-go-name: ID
      issuer:
        type: string
        x-go-name: Issuer
      revoked:
        type: boolean
        x-go-name: Revoked
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  TpmEndorsementCollection:
    properties:
      tpmendorsements:
        items:
          $ref: '#/definitions/TpmEndorsement'
        type: array
        x-go-name: TpmEndorsement
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  TpmEventLog:
    properties:
      pcr:
        $ref: '#/definitions/Pcr'
      tpm_events:
        items:
          $ref: '#/definitions/EventLog'
        type: array
        x-go-name: TpmEvent
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/types
  TrustInformation:
    properties:
      OVERALL:
        type: boolean
        x-go-name: Overall
      flavors_trust:
        additionalProperties:
          $ref: '#/definitions/FlavorTrustStatus'
        type: object
        x-go-name: FlavorTrust
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  TrustReport:
    properties:
      host_manifest:
        $ref: '#/definitions/HostManifest'
      policy_name:
        type: string
        x-go-name: PolicyName
      results:
        items:
          $ref: '#/definitions/RuleResult'
        type: array
        x-go-name: Results
      trusted:
        type: boolean
        x-go-name: Trusted
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/hvs
  UEFI:
    properties:
      enabled:
        type: string
        x-go-name: Enabled
      meta:
        properties:
          secure_boot_enabled:
            type: boolean
            x-go-name: SecureBootEnabled
        type: object
        x-go-name: Meta
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/model/ta
  UUID:
    description: |-
      A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC
      4122.
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/google/uuid
  Vendor:
    format: int64
    type: integer
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/host-connector/constants
  X509AttributeCertificate:
    description: X509AttributeCertificate holds a subset of x509.Certificate that
      has relevant information for Flavor
    properties:
      attribute:
        items:
          $ref: '#/definitions/Attribute'
        type: array
        x-go-name: Attributes
      encoded:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: Encoded
      fingerprint_sha384:
        type: string
        x-go-name: FingerprintSha384
      issuer:
        type: string
        x-go-name: Issuer
      not_after:
        format: date-time
        type: string
        x-go-name: NotAfter
      not_before:
        format: date-time
        type: string
        x-go-name: NotBefore
      serial_number:
        format: int64
        type: integer
        x-go-name: SerialNumber
      subject:
        type: string
        x-go-name: Subject
    type: object
    x-go-package: github.com/intel-secl/intel-secl/v4/pkg/lib/flavor/model
host: hvs.com:8443
info:
  description: |-
    The Host Verification Service (HVS) is a component responsible for generating and maintaining accurate trust
    evaluations for data center servers. The HVS provides an interface for defining acceptable passlisted policies (flavors)
    for data center servers. These flavor policies incorporate server firmware measurements, hardware capabilities,
    security technology information and additional configuration. The measured data and configuration injected into the
    HVS flavor policies incorporate chain of trust technology requirements for platform attestation.
  license:
    name: 'Copyright (C) 2020 Intel Corporation. SPDX-License-Identifier: BSD-3-Clause'
  title: Host Verification Service
  version: "2"
paths:
  /ca-certificates:
    get:
      description: |
        SearchCACerts returns a collection of CA certificates in PEM/JSON format based on domain.
        Returns - The retrieved CA Certificate collection from the CA Certificates store.
      operationId: SearchCACerts
      parameters:
      - description: Available Certificate Domains are {saml, ek, endorsement, root}
        enum:
        - saml
        - ek
        - endorsement
        - root
        in: query
        name: domain
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        - application/x-pem-file
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      - application/x-pem-file
      responses:
        "200":
          description: Successfully retrieved the CA Certificate Collection from CertStore.
          schema:
            $ref: '#/definitions/CaCertificateCollection'
        "400":
          description: Invalid domain/Certificate Type provided
        "415":
          description: Invalid Accept Header in Request - should be application/json
            or application/x-pem-file
        "500":
          description: Internal server error - Certificates with specified type have
            not been created/loaded
      tags:
      - CACertificates
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/ca-certificates?domain=ek
      x-sample-call-output: |-
        {
        "ca_certificate": [
        {
          "name": "GlobalSign Trusted Platform Module Root CA",
          "certificate": "MIID/DCCAmSgAwIBAgIBCDANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzELMAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UEAxMOQ01TIFNpZ25pbmcgQ0EwHhcNMjAwODExMDEzMDE2WhcNMjEwODExMDEzMDE2WjAfMR0wGwYDVQQDExRIVlMgU0FNTCBDZXJ0aWZpY2F0ZTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALsrGJ2+r+uqHKDC4LyVdyHQB2X9sNvs0eBbUz1bDY/vYAvXaIJ05ay32sxw0MeccvkTWFfS+4us/Ou6cz+9j+vi2MwpMHMWbZb3twj7L6TVagQ4D1kkc6XXBKjnuFLnaRoZPw5CNHT8UgXDI5ZwulMk90MOfbh4Dubp9jGgnFJB0npShZPcIww/spiSUFbhDBCeEe9zRhOHpGtsonRfRRgC8KYMELvS8dgadaJcQt6X079wvNu/YU1ypAf+fa85F+knycsxcN82yu6LwYl6QlFizbrTOqZR/pFL/y8rM4t+xySApOj7sf84uuLGP3YjhCiBS2w2e9AUTav1fwLLja3adJjFtg6p9E7HG5KzUmMt/sd3vU17ZtNQK7OI5BEuKVafuWjIyBYyrp4cEtFZg382x9XWf5L6ZrCBxV0IH7MNkmM56QCwuMU02tZEZhIlz0k+QUu56K/7OO4Fe25SSC4UFPz2AC8v2IF06vLYaas+icfAFoTEnBZzcVZTW63LlwIDAQABoxIwEDAOBgNVHQ8BAf8EBAMCBsAwDQYJKoZIhvcNAQEMBQADggGBAMCsexjl3bqCgmWOcZfMCT+yEf/r6kYUPsMYSzQE4jlxIHVfySNaMUhOsxS6x7XUDizMDGudorH4yLCXGSHfA0uhipArLEeIZjMI0ED6NAnlr3xgUHTQG9bwfCO5Gqw5yh+WrpzuyCjH4I560pf6JSzLuOJcdXf7H3s3f9MNwtTpKl6V2DUj7+X7HvyANyWqALvlSCAxbM2wyt0eIC8DhVkTvsqF5eCqOjkBD4UXj9rPJfFdVdMzhrkzr3iT+XSFHY6WMn6ePcvI6NNkHZ8SCI3A7VSXeiZyIe81igRY3WlkQbRvXEXAuwKC494DrnlN18xMlUBRj70QOW2wgEA1TbZVpGhZzsNBmFFbBttBWb3tBdcxQKbeonKVim2BFealU3uIS3hhxAP7LSNaGUFNC6hZ3hL4iRTR6pYiXgcYlu1LjWt4z/oibCB02Vqjx60xRcN0Pis+4W0acOffnXewTn3468o3UqQzBGOr+tBBL2zNwKDPhiNmkNCmzg/+H4sO7w=="
        },
        {
          "name": "STM TPM EK Root CA",
          "certificate": "MIIENTCCAp2gAwIBAgIBAzANBgkqhkiG9w0BAQwFADBHMQswCQYDVQQGEwJVUzELMAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEOMAwGA1UEAxMFQ01TQ0EwHhcNMjAwODExMDEyNzM4WhcNMjUwODExMDEyNzM4WjBQMQswCQYDVQQGEwJVUzELMAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UEAxMOQ01TIFNpZ25pbmcgQ0EwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQDCpynt4bdlRofh83Y1xm+6Jk3VGwqQI63PXkUDJ8xqcybMv9S9Au0f165f+DksZ3A+PrtCmyzuL1G4klPgCoY3QeWYEFRrD1qnc1UESD+zyqPizUeKAGHq7x298D8ztrkAT+1ChmdlF2DXB7hIKX69/AjnwyobW/pgJv8V1XG7+nD+wUqyKEzPkQbMrNSoRzf4YjkVWZ4v2DECcHYE3GbUaOZkAo5jaqc74v3D5n33j84aPfsD4aL5VVz/61Akkv6wWlW2NoIecwsjFxr4+oviKy62V9s1Ndti+L9SLaZApEsXjNV7kmtIVllPSb2rO2T1/cTJNGViJrAwMd173JvLLtBL8a1mVZMYXMXmuKc/yIQ0lCwseXQkNrP+jAcZLe0N0U5/hJmwO8ojVaXNg5BfTUefH6kkbIFYB3kpMcCZ99Mvkkm+XQUs3yGHc2bVRdWFgyk3fy5bVzvyY/LpI0FQkIWdCJbcnIZn68mIpiYsJPmM7JxY4Ua1nXitxgGbn9MCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggGBALZqCy21FSA2NI45LT4gOab9K7XrmMB55Jxecnb8QoRAkyBhPgBe5kw2KjXQ1ocoAe/fmiPhAIOPZdgm7H+G5LyYHRIvuqUyAoap9yDH5xvolVz1wBvLU+XLYWN9JfbYWQvDp96FxZ+gvIVKPzMQ1PTXPL6pLU4z6rAE5t94IsKZw7v3ip3KwYnBfEYuzUs+eAD+iLwpXzJcSoCbXWU9aAMv3MElM5EcCrmHvbOML5uS4NG+MBNv9XsLJp3FDs6EkewG/cWgMqGIskXsVbZICTCI7FxnWA0E1k0/qX2tu1QAe74vF2pAT51lKN30w8dn3FLnLyuAEoOfVJF7dOaRS5zwg1J4WD/ubW5WBOi0z1yUa850H7A1zoY9HUYHcrI84pJMaPRVMD4Q6p+JXp/DyEQXYDt6ySRL3dNT4j3rgoGY2P0GosUd4UFJXCFD6EfsfhmDLkweTFV/H+ASSIjs0qUGjRMQCTNvHOB1QoaqE7KvB6BjQFFcnfYj2chSAGbUVA=="
        }
        ]
        }
    post:
      consumes:
      - application/json
      description: |
        Imports an existing CA certificate into the Certificate store.
        Returns - The imported CA Certificate from the store.
      operationId: CreateCACertificate
      parameters:
      - in: body
        name: CreateCACertificate
        required: true
        schema:
          $ref: '#/definitions/CaCertificate'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the CA Certificate in CertStore.
          schema:
            $ref: '#/definitions/CaCertificate'
        "400":
          description: Invalid CACertificate in request body/Invalid type, only root
            or endorsement ca certificate can be added
        "415":
          description: Invalid Accept/Content-Type Header in Request - should be application/json
        "500":
          description: Internal server error - Error persisting Certificate in CertStore
      security:
      - bearerAuth: []
      tags:
      - CACertificates
      x-permissions: cacertificates:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/ca-certificates
      x-sample-call-input: |
        {
        "name": "HVS Root Certificate - New",
        "type": "root",
        "certificate": "MIIEBjCCAm6gAwIBAgIQN0rzaln9PujeaZe6mfzrezANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDExtIVlMgRW5kb3JzZW1lbnQgQ2VydGlmaWNhdGUwHhcNMjAwODExMDEzMDE5WhcNMjUwODExMDEzMDE5WjAmMSQwIgYDVQQDExtIVlMgRW5kb3JzZW1lbnQgQ2VydGlmaWNhdGUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQDFW0RgQdEL7j43LBaCkHyPE8gbk/Ig49Ba/7YaU0DLDg2cGEl8HmNrMA50TJt3uq7HOpFxXt9n9Yy/SyiK0GBSon+ix4x23WEFRaVsDBNJOkM7jvsVIIRN18nySK5IMNvGuLAWwrE7IredC5sTsHClUN6ExQycg6clrEb9UvDqQO2u7GebnRAjXWuSMW/ZuhNkMBh+HSLKB5+GL4KAl96yyusfvXLgUiEJAxv5vh9A1f2JStZWtlqfzPBYabIe6W9JPhLYGrE2gD1TEklqQMJ6YNpVfNJTwWiKB/sT5F+3wnlNp+7J1O0W1FkboZSjDf7smDfV30ma1pWL2K6vJjG65Rh6/eGdIbPRp6JKfVM99IoNUSTzCj39qFrVxpPK1+5yG0JwUJKEKRJKte/UTLnTU++l/ShzVjsmuLhm22V6mSjoZgrqdq/EqZy641J/k/+Dmd14aKzIJxgUrHJhosfAwzhGNGk5AsXgaMk9J0R7QGYB4qptj4sx4IURFC6X2JkCAwEAAaMwMC4wDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0RBAQwAoIAMA0GCSqGSIb3DQEBCwUAA4IBgQBU42dQ/WxJSa+v5+TIsRWOHbvZUV5k8JJFXdlPfu6sPAYAy/rvqWhfAUyhHYGlYdRW5qXDm/jtHUjSUqMPl9T48bxjCYl3wVVRrhk/zX/YFhjV/fDHSqgRGGTfvH/zb7oJMPG+vRmh8hH6OLk6NMnvD1K025S0YyQEoYOxbNnPkU6o2t5hyvKwRFDzTUHO2waPejZ40zSy/MRDSl3R3wIdoWASXdYugbdBqkFc9YVQXs7FIt9RmJKIWZe2chx61bZqw6mBSQpdj0oh6o4pqL1QrQbpnWsYEPvPZFM3lqj/h/QgvX79n5CfSmhoaUosSwnAhpciu4cB/xPOO/9ezdOhpSv4y9jjQ+eUaq8JD/K2a+U815QpsenSZar4cUjW8WqlbZ3ykzFPEPpc4KjyVok5j4Wc53f3HwWyeDC2sTMAZ7JJ51HL6yE3nOfnuhb41iVAhzgGNUegL+C0E+/ZyKjJl/SJbovCRjYtDyHL1TZDrCvmxQjci6XA+tw4tSL9o5o="
        }
      x-sample-call-output: |-
        {
        "name": "HVS Root Certificate - New",
        "type": "root",
        "certificate": "MIIEBjCCAm6gAwIBAgIQN0rzaln9PujeaZe6mfzrezANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDExtIVlMgRW5kb3JzZW1lbnQgQ2VydGlmaWNhdGUwHhcNMjAwODExMDEzMDE5WhcNMjUwODExMDEzMDE5WjAmMSQwIgYDVQQDExtIVlMgRW5kb3JzZW1lbnQgQ2VydGlmaWNhdGUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQDFW0RgQdEL7j43LBaCkHyPE8gbk/Ig49Ba/7YaU0DLDg2cGEl8HmNrMA50TJt3uq7HOpFxXt9n9Yy/SyiK0GBSon+ix4x23WEFRaVsDBNJOkM7jvsVIIRN18nySK5IMNvGuLAWwrE7IredC5sTsHClUN6ExQycg6clrEb9UvDqQO2u7GebnRAjXWuSMW/ZuhNkMBh+HSLKB5+GL4KAl96yyusfvXLgUiEJAxv5vh9A1f2JStZWtlqfzPBYabIe6W9JPhLYGrE2gD1TEklqQMJ6YNpVfNJTwWiKB/sT5F+3wnlNp+7J1O0W1FkboZSjDf7smDfV30ma1pWL2K6vJjG65Rh6/eGdIbPRp6JKfVM99IoNUSTzCj39qFrVxpPK1+5yG0JwUJKEKRJKte/UTLnTU++l/ShzVjsmuLhm22V6mSjoZgrqdq/EqZy641J/k/+Dmd14aKzIJxgUrHJhosfAwzhGNGk5AsXgaMk9J0R7QGYB4qptj4sx4IURFC6X2JkCAwEAAaMwMC4wDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0RBAQwAoIAMA0GCSqGSIb3DQEBCwUAA4IBgQBU42dQ/WxJSa+v5+TIsRWOHbvZUV5k8JJFXdlPfu6sPAYAy/rvqWhfAUyhHYGlYdRW5qXDm/jtHUjSUqMPl9T48bxjCYl3wVVRrhk/zX/YFhjV/fDHSqgRGGTfvH/zb7oJMPG+vRmh8hH6OLk6NMnvD1K025S0YyQEoYOxbNnPkU6o2t5hyvKwRFDzTUHO2waPejZ40zSy/MRDSl3R3wIdoWASXdYugbdBqkFc9YVQXs7FIt9RmJKIWZe2chx61bZqw6mBSQpdj0oh6o4pqL1QrQbpnWsYEPvPZFM3lqj/h/QgvX79n5CfSmhoaUosSwnAhpciu4cB/xPOO/9ezdOhpSv4y9jjQ+eUaq8JD/K2a+U815QpsenSZar4cUjW8WqlbZ3ykzFPEPpc4KjyVok5j4Wc53f3HwWyeDC2sTMAZ7JJ51HL6yE3nOfnuhb41iVAhzgGNUegL+C0E+/ZyKjJl/SJbovCRjYtDyHL1TZDrCvmxQjci6XA+tw4tSL9o5o="
        }
  /ca-certificates/{certType}:
    get:
      description: |
        Retrieve returns an existing CA certificate from the Certificate store.
        Returns - The retrieved CA Certificate from the Certificate store.
      operationId: RetrieveCACertificate
      parameters:
      - description: Available Certificate Types are {root, endorsement, ek, privacy,
          aik, tag, saml, tls}
        enum:
        - root
        - endorsement
        - ek
        - privacy
        - aik
        - tag
        - saml
        - tls
        in: path
        name: certType
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the CA Certificate from CertStore.
          schema:
            $ref: '#/definitions/CaCertificate'
        "400":
          description: Invalid Certificate Type provided
        "415":
          description: Invalid Accept Header in Request - should be application/json
        "500":
          description: Internal server error - Certificates with specified type have
            not been created/loaded
      tags:
      - CACertificates
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/ca-certificates/tag
      x-sample-call-output: |-
        {
          "name": "HVS Tag Certificate",
          "certificate": "MIID9zCCAl+gAwIBAgIRANtyyihLjg1Jeh6j1bxsApEwDQYJKoZIhvcNAQELBQAwHjEcMBoGA1UEAxMTSFZTIFRhZyBDZXJ0aWZpY2F0ZTAeFw0yMDA4MTEwMTMwMjFaFw0yNTA4MTEwMTMwMjFaMB4xHDAaBgNVBAMTE0hWUyBUYWcgQ2VydGlmaWNhdGUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQC7WJP2DKkRPBmjd0Rkxf1QcMN3vcTTTXNjJGOe+DXgLcveH8XSQOqhP/fkUn5+1dbdlrlPT48i2381opczX0B2pfZ1W3vlw6XzX2Y7+hW71/5k95hUrNcpUjlkfg+hN9RqnwtkVQIDOK9OhxuRiifycX/3rhymoeVxV9v/8L2evEyD37TENTNBL6yH6vk0qBIK6tqJlXg3k8xIv4J4jHd0ftQ6N5XC+6vXIEN1DCWc8t2ZHkRpMCVxQbzYWLjf31c+/H90HPbiQKjDLR8epCsck38Qm6Ge9/89TztWeCTCu1xI1evTOUpgH8OprsCTqS71wnFxBRP7uVuQCTeGII1/NfOs0Tj+tGXiUsJDDSKSDAE8CEdoqLHXVoCTcQKW3rAga8AARYh7cLHGhus3BqG4ABIzZxONuAEkElJM8BeC8k9av6S4lSNlwpFPXO+w9+h5rNqUMC0R9+kWT08WganMaX18PeJ6WW/vg4SJ+tc0vZTCAHadx6tcH7asoAKWchMCAwEAAaMwMC4wDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0RBAQwAoIAMA0GCSqGSIb3DQEBCwUAA4IBgQAljHqgnNyHWXsKxW3bB6Es3Bnsqud71esHULdKj55ygi94U2Tte+Wp5os596KhBDMpiopCTepAmSzPZ2l9A73lFlbHvYmfek6RS0G7NAjltMCmQnRm3t6PaDK1vE1Q4XrM76q52KXYgCMrpza5kWql+ZNDfp08XMYm0j6t/XYHp2XP3iuHVMtJ+Uf8yRqUlK89pE7c9JuJqcJ9w121WjHrzSj9CKK8glSqHtVyzOgekWMHnRz82HDvTihfXfgkDbz1oG2cR6XT8u8h6x5NJIBPVw7GrgYVFVV7vabfocKHFR5mnLmkDiKBFUSoSCVE7eooaj/oAo9V+tW1dzdUvLAbyoswHre71JmDtyTIfterp16qkcdtkUDgNCayXnM32xDgqkMXKKEkryItUFNUmIqv40IiiKvyozrO0+oXOBNf/hJL9g/O4ziV2uC/BqRq5CgxutW+08DRPvV60VwVUcRNnyMmADBRpQu7Qd5HXN566Cufl4rQboObq9xTN+Xftck="
        }
  /esxi-cluster:
    get:
      description: |2

        This API resource allows entire Clusters of VMWare  ESXi hosts to be managed as a group, using the vCenter Cluster object. When a Cluster is registered to the Host Verification Service, the Host Verification Service will automatically mirror the Cluster object in vCenter, automatically registering any ESXi hosts currently in the Cluster in vCenter.  As additional ESXi hosts are added or removed from the Cluster object in vCenter, the Host Verification Service will also register or remove the ESXi hosts from its own database.

        Searches for ESXi clusters. Only one identifying parameter can be specified to search ESXi clusters which will return ESXi cluster collection as a result.
      operationId: Search-ESXi-cluster-records
      parameters:
      - description: ESXi cluster ID
        format: uuid
        in: query
        name: id
        type: string
      - description: ESXi cluster name.
        in: query
        name: clusterName
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the ESXi clusters.
          schema:
            $ref: '#/definitions/ESXiClusterCollection'
        "400":
          description: Invalid search criteria provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - ESXi-Cluster
      x-permissions: esxi_clusters:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/esxi-cluster?clusterName=Cluster-name
      x-sample-call-output: |-
        {
            "esxi_clusters": [
            {
                "id": "9519febc-2c8d-4bb0-afec-b7a23db5735a",
                "connection_string": "https://vCenter-url:443/sdk",
                "cluster_name": "Cluster name",
                "hosts": [
                    "host.ip1",
                    "host.ip2"
                ]
            } ]
        }
    post:
      consumes:
      - application/json
      description: "Creates a ESXi cluster record in database.\n\nThe serialized ESXi
        cluster Go struct object represents the content of the request body.\n\n |
        Attribute                      | Description                                     |\n
        |--------------------------------|-------------------------------------------------|\n
        | cluster_name                   | Name of the vCenter cluster. The name needs
        to be exactly as it appears in vCenter. |\n | connection_string \t\t\t   |
        The connection string is of the form <b>https://vCenter-url:443/sdk;u=vCenter-username;p=password\"</b>.
        This is used to connect to vCenter and get the cluster information. |\n"
      operationId: Create-ESXi-cluster-record
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/ESXiClusterCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the ESXi cluster record.
          schema:
            $ref: '#/definitions/ESXiCluster'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - ESXi-Cluster
      x-permissions: esxi_clusters:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/esxi-cluster
      x-sample-call-input: |
        {
            "connection_string" : "https://vCenter-url:443/sdk;u=vCenter-username;p=password",
            "cluster_name" : "Cluster name"
        }
      x-sample-call-output: |-
        {
            "id": "9519febc-2c8d-4bb0-afec-b7a23db5735a",
            "connection_string": "https://vCenter-url:443/sdk",
            "cluster_name": "CSS-Attestation"
        }
  /esxi-cluster/{esxi-cluster_id}:
    delete:
      description: |
        Deletes an ESXi cluster. If the cluster is still associated with any hosts, it will delete the host associations and the host records as well from database
      operationId: Delete-ESXi-cluster-record
      parameters:
      - description: Unique ID of the ESXi cluster.
        format: uuid
        in: path
        name: esxi-cluster_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the ESXi cluster.
        "404":
          description: The cluster to be deleted was not found.
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - ESXi-Cluster
      x-permissions: esxi_clusters:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/esxi-cluster/9519febc-2c8d-4bb0-afec-b7a23db5735a
    get:
      description: |
        Retrieves an ESXi cluster.
        Returns - The serialized ESXi cluster Go struct object that was retrieved and a list of associated host names
      operationId: Retrieve-ESXi-cluster-record
      parameters:
      - description: Unique ID of the ESXi cluster.
        format: uuid
        in: path
        name: esxi-cluster_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the ESXi cluster.
          schema:
            $ref: '#/definitions/ESXiCluster'
        "404":
          description: No relevant cluster records found.
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error.
      security:
      - bearerAuth: []
      tags:
      - ESXi-Cluster
      x-permissions: esxi_clusters:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/esxi-cluster/9519febc-2c8d-4bb0-afec-b7a23db5735a
      x-sample-call-output: |-
        {
            "id": "9519febc-2c8d-4bb0-afec-b7a23db5735a",
            "connection_string": "https://vCenter-url:443/sdk",
            "cluster_name": "Cluster name",
            "hosts": [
                "host.ip1",
                "host.ip2"
            ]
        }
  /flavor-from-app-manifest:
    post:
      consumes:
      - application/xml
      description: |
        A flavor is a set of measurements and metadata organized in a flexible format that allows for ease of further extension. The measurements included in the flavor pertain to various hardware, software and feature categories, and their respective metadata sections provide descriptive information.

        When a flavor is created, it is associated with a flavor group. This means that the measurements for that flavor type are deemed acceptable to obtain a trusted status. If a host, associated with the same flavor group, matches the measurements contained within that flavor, the host is trusted for that particular flavor category (dependent on the flavor group policy). If no flavor group name is defined in input, flavor is, by default, associated with automatic flavor group.

        A manifest is a list of files/directories/symlinks that are to be measured. The manifest provided can be used to create SOFTWARE flavor only.

        The Verification Service exposes this REST API to create and store SOFTWARE flavor as per the manifest provided.

        The serialized ManifestRequest Go struct object represents the content of the request body.

          | Attribute                      | Description                                     |
          |--------------------------------|-------------------------------------------------|
          | hostId                         | (Optional) The host id is used to fetch the connection string from database. If not provided, 'connectionString' needs to be provided.|
          | connectionString               | (Optional) The connection string is of the form <b>https://tagent-ip:1443"</b>. If not provided, 'hostId' needs to be provided.|
          | flavorgroupNames               | (Optional) Name of the flavor groups the created flavor needs to be associated to. If not provided, flavor is associated to default flavor group.|
          | Manifest                       | Application manifest for which flavor needs to be created. |
      operationId: Create-Software-Flavor
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/ManifestRequest'
      - description: Content-Type header
        enum:
        - application/xml
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the software flavor.
          schema:
            $ref: '#/definitions/Flavor'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Accept/Content-Type Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavor-From-App-Manifest
      x-permissions: software_flavors:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-from-app-manifest
      x-sample-call-input: |
        `<ManifestRequest xmlns="lib:wml:manifests-req:1.0">
            <connectionString>intel:https://tagent-ip:1443</connectionString>
            <Manifest xmlns="lib:wml:manifests:1.0" DigestAlg="SHA384" Label="Sample_Label">
                <Dir Include=".*" Exclude="" Path="/usr/local/bin"/>
                <File Path="/usr/local/bin/wget"/>
            </Manifest>
        </ManifestRequest>`
      x-sample-call-output: |
        {
           "meta": {
               "schema": {
                   "uri": "lib:wml:measurements:1.0"
               },
               "id": "5226d7f1-8105-4f98-9fe2-82220044b514",
               "description": {
                   "flavor_part": "SOFTWARE",
                   "label": "ISL_Applications1234",
                   "digest_algorithm": "SHA384"
               }
           },
           "software": {
               "measurements": {
                   "opt-trustagent-bin": {
                       "type": "directoryMeasurementType",
                       "value": "3519466d871c395ce1f5b073a4a3847b6b8f0b3e495337daa0474f967aeecd48f699df29a4d106288f3b0d1705ecef75",
                       "Path": "/opt/trustagent/bin",
                       "Include": ".*"
                   },
                   "opt-trustagent-bin-module_analysis_da.sh": {
                       "type": "fileMeasurementType",
                       "value": "2a99c3e80e99d495a6b8cce8e7504af511201f05fcb40b766a41e6af52a54a34ea9fba985d2835aef929e636ad2a6f1d",
                       "Path": "/opt/trustagent/bin/module_analysis_da.sh"
                   }
               },
               "cumulative_hash": "be7c2c93d8fd084a6b5ba0b4641f02315bde361202b36c4b88eefefa6928a2c17ac0e65ec6aeb930220cf079e46bcb9f"
           }
        }
  /flavor-templates:
    get:
      description: |
        Retrieves all the flavor templates available in the database.
      operationId: Search-FlavorTemplates
      parameters:
      - description: Boolean value to indicate whether the deleted templates should
          be included in the search.
        format: bool
        in: query
        name: includeDeleted
        type: string
      - description: Flavor template which has given uuid value will be returned
        format: uuid
        in: query
        name: id
        type: string
      - description: Flavor templates that have given label will be included
        in: query
        name: label
        type: string
      - description: Flavor templates that contain the given condition will be included
        in: query
        name: conditionContains
        type: string
      - description: Flavor templates that contain the specified flavor part will
          be included
        in: query
        name: flavorPartContains
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavortemplate
          schema:
            $ref: '#/definitions/FlavorTemplate'
        "400":
          description: Invalid or Bad request
        "401":
          description: Unauthorized request
        "404":
          description: Flavortemplate record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      x-permissions: flavor-template:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates
      x-sample-call-output: |-
        [
          {
              "id": "d6f81340-b033-4fae-8ccf-795430f486e7",
              "label": "default_uefi",
              "condition": [
                  "//meta/vendor='Linux'",
                  "//meta/tpm_version/='2.0'",
                  "//meta/uefi_enabled/='true' or //meta/suefi_enabled/='true'"
              ],
              "flavor-parts": {
                  "PLATFORM": {
                      "meta": {
                          "vendor": "Linux",
                          "tpm_version": "2.0",
                          "uefi_enabled": true
                      },
                      "pcr_rules": [
                          {
                              "pcr": {
                                  "index": 0,
                                  "bank": "SHA256"
                              },
                              "pcr_matches": true
                          }
                      ]
                  },
                  "OS": {
                      "meta": {
                          "vendor": "Linux",
                          "tpm_version": "2.0",
                          "uefi_enabled": true
                      },
                      "pcr_rules": [
                          {
                              "pcr": {
                                  "index": 7,
                                  "bank": "SHA256"
                              },
                              "pcr_matches": null,
                              "eventlog_includes": [
                                  "shim",
                                  "db",
                                  "kek",
                                  "vmlinuz"
                              ]
                          }
                      ]
                  }
              }
          },
          {
              "id": "3f8a57a8-f6d7-49ea-8309-0e00b997fbce",
              "label": "default-pfr",
              "condition": [
                "//meta/vendor='Linux'",
                "//meta/tpm_version/='2.0'"
              ],
              "flavor-parts": {
                  "PLATFORM": {
                      "meta": {
                          "vendor":"Linux",
                          "tpm_version": "2.0",
                          "uefi_enabled": true
                      },
                      "pcr_rules": [
                          {
                              "pcr": {
                                  "index": 7,
                                  "bank": "SHA256"
                              },
                              "eventlog_includes": ["Inte PFR"]
                          }
                      ]
                  }
              }
          }
        ]
    post:
      consumes:
      - application/json
      description: |2

        Flavor Template: Flavor templates are used to implement dynamic flavor generation. It supports definition of rules for Linux & ESXI hosts. The templates need to be defined in JSON format. The rules defined will be used for matching the templates while generating flavors.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | flavor_template                | Skeleton to generate dynamic flavors  |
         | flavorgroup_names              | (Optional) Flavor group names that the created flavor-template(s) will be associated with. If not provided, created flavor-template will be associated with automatic flavor group. |

         | Attribute                      | Description|
         |--------------------------------|------------|
         | ID                             | Unique ID of flavor template. |
         | Label                          | Name of the flavortemplate to be created. |
         | Condition                      | The “condition” uses meta-data from the host-manifest to determine if the flavor-template should be applied. An array of 'jsonquery' statements that are used to determine if the template should be executed. For example, “if TBOOT is installed”, use the information in the child “flavor-parts” to copy event-logs from the manifest’s PCR 17 & 18 to the PLATFORM flavor-part. |
         | FlavorParts                    | One or more flavor-part entities that are generated by the template. |

        FlavorParts: The type or classification of the flavor. For more information on flavor parts, see the
        product guide.
        Supported FlavorParts types are, PLATFORM, OS and HOST_UNIQUE

         | Attribute                      | Description|
         |--------------------------------|------------|
         | Meta                           | Provides the template-author the option to populate arbitrary key/value pairs that will be copied to flavor-part’s “meta/description” entity. |
         | PcrRules                       | Instructs the flavor creation engine to copy PCR bank values from the host-manifest to the resulting flavor-part. |

        PcrRules: An array of verification rules that will be applied to a PCR.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | PCR                            | Lists the rules that are to be applied to each PCR.  There cannot be duplicate index/banks in this array. |
         | PcrMatches                     | Setting ‘pcr_matches’ to true in the flavor-template will update the flavor-part to enforce “PCR Matches Constants” rules during flavor verfication. |
         | EventLogEquals                 | Event log equals contains “eventlog_equals” section will update the flavor-part to enforce “PCR Event Log Equals” rules during verification.  The optional “excluding_tags” element can be used to omit events with a one or more “tags” during verification. |
         | EventLogIncludes               | EventLogInclude contains “eventlog_includes” section will update the flavor-part to enforce “PCR Event Log Includes” rules during verification. |

        Creates a Flavor template and stores it in the database.
      operationId: Create-FlavorTemplate
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/FlavorTemplateReq'
      - description: Content-Type header
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the flavortemplate.
          schema:
            $ref: '#/definitions/FlavorTemplate'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      x-permissions: flavor-template:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates
      x-sample-call-input: |
        {
        flavor_template : {
           "label": "default-uefi",
           "condition": [
               "//host_info/os_name//*[text()='RedHatEnterprise']",
               "//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']",
               "//host_info/hardware_features/UEFI/enabled//*[text()='true'] or //host_info/hardware_features/UEFI/meta/secure_boot_enabled//*[text()='true']"
           ],
           "flavor_parts": {
               "PLATFORM": {
                   "meta": {
                       "vendor": "Linux",
                       "tpm_version": "2.0",
                       "uefi_enabled": true
                   },
                   "pcr_rules": [
                       {
                           "pcr": {
                               "index": 0,
                               "bank": "SHA256"
                           },
                           "pcr_matches": true,
                           "eventlog_equals": {}
                       }
                   ]
               },
               "OS": {
                   "meta": {
                       "vendor": "Linux",
                       "tpm_version": "2.0",
                       "uefi_enabled": true
                   },
                   "pcr_rules": [
                       {
                           "pcr": {
                               "index": 7,
                               "bank": "SHA256"
                           },
                           "pcr_matches": true,
                           "eventlog_includes": [
                               "shim",
                               "db",
                               "kek",
                               "vmlinuz"
                           ]
                       }
                   ]
               }
           }
        }
        }
      x-sample-call-output: |-
        {
            "id": "3f8a57a8-f6d7-49ea-8309-0e00b997fbce",
             "label": "default-uefi",
             "condition": [
                 "//host_info/os_name//*[text()='RedHatEnterprise']",
                 "//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']",
                 "//host_info/hardware_features/UEFI/enabled//*[text()='true'] or //host_info/hardware_features/UEFI/meta/secure_boot_enabled//*[text()='true']"
             ],
             "flavor_parts": {
                 "PLATFORM": {
                     "meta": {
                         "vendor": "Linux",
                         "tpm_version": "2.0",
                         "uefi_enabled": true
                     },
                     "pcr_rules": [
                         {
                             "pcr": {
                                 "index": 0,
                                 "bank": "SHA256"
                             },
                             "pcr_matches": true,
                             "eventlog_equals": {}
                         }
                     ]
                 },
                 "OS": {
                     "meta": {
                         "vendor": "Linux",
                         "tpm_version": "2.0",
                         "uefi_enabled": true
                     },
                     "pcr_rules": [
                         {
                             "pcr": {
                                 "index": 7,
                                 "bank": "SHA256"
                             },
                             "pcr_matches": true,
                             "eventlog_includes": [
                                 "shim",
                                 "db",
                                 "kek",
                                 "vmlinuz"
                             ]
                         }
                     ]
                 }
             }
         }
  /flavor-templates/{flavortemplate_id}:
    delete:
      description: |
        Deletes a flavor template from database.
      operationId: Delete-FlavorTemplate
      parameters:
      - description: Unique ID of the flavortemplate
        format: uuid
        in: path
        name: flavortemplate_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully performed lazy delete on flavor template based
            on flavortemplate_id
        "400":
          description: Invalid or Bad request
        "401":
          description: Unauthorized request
        "404":
          description: Flavortemplate record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      x-permissions: flavor-template:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/d6f81340-b033-4fae-8ccf-795430f486e7
    get:
      description: |
        Retrieves a flavor template.
      operationId: Retrieve-FlavorTemplate
      parameters:
      - description: Unique ID of the flavortemplate
        format: uuid
        in: path
        name: flavortemplate_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavortemplate
          schema:
            $ref: '#/definitions/FlavorTemplate'
        "400":
          description: Invalid or Bad request
        "401":
          description: Unauthorized request
        "404":
          description: Flavortemplate record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      x-permissions: flavor-template:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/d6f81340-b033-4fae-8ccf-795430f486e7
      x-sample-call-output: |-
        {
            "id": "d6f81340-b033-4fae-8ccf-795430f486e7",
            "label": "default_uefi",
            "condition": [
                "//meta/vendor='Linux'",
                "//meta/tpm_version/='2.0'",
                "//meta/uefi_enabled/='true' or //meta/suefi_enabled/='true'"
            ],
            "flavor-parts": {
                "PLATFORM": {
                    "meta": {
                        "vendor": "Linux",
                        "tpm_version": "2.0",
                        "uefi_enabled": true
                    },
                    "pcr_rules": [
                        {
                            "pcr": {
                                "index": 0,
                                "bank": "SHA256"
                            },
                            "pcr_matches": true
                        }
                    ]
                },
                "OS": {
                    "meta": {
                        "vendor": "Linux",
                        "tpm_version": "2.0",
                        "uefi_enabled": true
                    },
                    "pcr_rules": [
                        {
                            "pcr": {
                                "index": 7,
                                "bank": "SHA256"
                            },
                            "pcr_matches": null,
                            "eventlog_includes": [
                                "shim",
                                "db",
                                "kek",
                                "vmlinuz"
                            ]
                        }
                    ]
                }
            }
        }
  /flavor-templates/{flavortemplate_id}/flavorgroups:
    get:
      description: |
        Retrieves a list of FlavorTemplate-FlavorGroup associations corresponding to a flavor template.
        Returns - The FlavorTemplateFlavorgroupCollection in JSON format that are associated with the flavor template.
      operationId: Search-Flavorgrouplinks
      parameters:
      - description: Unique ID of the flavor template.
        format: uuid
        in: path
        name: flavortemplate_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the FlavorTemplateFlavorgroupCollection.
          schema:
            $ref: '#/definitions/FlavorTemplateFlavorgroupCollection'
        "404":
          description: Flavor Template record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      x-permissions: flavor-template:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/e5574593-0f92-41f0-8f2d-93b97cea9c06/flavorgroups
      x-sample-call-output: |-
        {
          "flavorgroup_flavortemplate_links": [
          {
            "flavortemplate_id": "e5574593-0f92-41f0-8f2d-93b97cea9c06",
            "flavorgroup_id": "fdd4240b-2369-4175-80e7-7fbf8ec78ce8"
          },
          {
            "flavortemplate_id": "e5574593-0f92-41f0-8f2d-93b97cea9c06",
            "flavorgroup_id": "bf8a9882-8a49-43ca-8052-b666bd7c0172"
          }
          ]
        }
  /flavor-templates/{flavortemplate_id}/flavorgroups/{flavorgroup_id}:
    delete:
      description: |
        Deletes an individual Flavortemplate Flavorgroup link.
      operationId: Delete-FlavorgroupLink
      parameters:
      - description: Unique ID of the flavor template.
        format: uuid
        in: path
        name: flavortemplate_id
        required: true
        type: string
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the Flavortemplate-Flavorgroup link.
        "404":
          description: Flavortemplate/Flavorgroup record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      - ""
      x-permissions: flavor-template:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/826501bd-3c75-4839-a08f-db5f744f8498/flavorgroups/e5574593-0f92-41f0-8f2d-93b97cea9c06
  /flavor-templates/{flavortemplates_id}/flavorgroups:
    post:
      consumes:
      - application/json
      description: |
        Creates an association between a FlavorTemplate and FlavorGroup record.

        The serialized FlavorTemplateFlavorgroupCreateRequest Go struct object represents the content of the request body.

         | Attribute                      | Description                                                       |
         |--------------------------------|-------------------------------------------------------------------|
         | flavorgroup_id                 | ID of the Flavorgroup record to be linked with the FlavorTemplate |
      operationId: Create-FlavorgroupLink
      parameters:
      - format: uuid
        in: path
        name: flavortemplates_id
        required: true
        type: string
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/FlavorTemplateFlavorgroupCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully linked the FlavorTemplate and FlavorGroup.
          schema:
            $ref: '#/definitions/FlavorTemplateFlavorgroupCreateRequest'
        "400":
          description: Invalid request body provided/FlavorgroupID provided in request
            body does not exist/FlavorTemplate-FlavorGroup link already exists
        "404":
          description: FlavorTemplate ID in request path does not exist
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavortemplates
      - ""
      x-permissions: flavor-template:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/8d7964db-4e4d-49a0-b441-1beabbcebf78/flavorgroups
      x-sample-call-input: |
        {
            "flavorgroup_id":"1429cebf-1c09-4e78-b2aa-da10e58d7446",
        }
      x-sample-call-output: |-
        {
          "flavortemplate_id": "8d7964db-4e4d-49a0-b441-1beabbcebf78",
          "flavorgroup_id": "1429cebf-1c09-4e78-b2aa-da10e58d7446"
        }
  /flavor-templates/{flavortemplates_id}/flavorgroups/{flavorgroup_id}:
    get:
      description: |
        Retrieves a FlavorTemplate-FlavorGroup association.
        Returns - The FlavorTemplateFlavorGroupLink in JSON format that represents the association.
      operationId: Retrieve-Flavorgrouplink
      parameters:
      - description: Unique ID of the flavor template.
        format: uuid
        in: path
        name: flavortemplates_id
        required: true
        type: string
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the FlavorTemplate Flavorgroup link.
          schema:
            $ref: '#/definitions/FlavorTemplateFlavorgroup'
        "404":
          description: Flavortemplate/Flavorgroup record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavor-templates
      x-permissions: flavor-template:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavor-templates/8d7964db-4e4d-49a0-b441-1beabbcebf78/flavorgroups/1429cebf-1c09-4e78-b2aa-da10e58d7446
      x-sample-call-output: |-
        {
          "flavortemplate_id": "8d7964db-4e4d-49a0-b441-1beabbcebf78",
          "flavorgroup_id": "1429cebf-1c09-4e78-b2aa-da10e58d7446"
        }
  /flavorgroups:
    get:
      description: |2

        <b>Flavor Group</b>: A flavor group represents a collection of flavors that has a specified policy, which is used
        to verify host against those flavors. Flavors can be added to a flavor group, and hosts can be associated with a
        flavor group.

        The flavor group policy lists the individual flavor parts and the match policy rules associated with each one.

        <b>Flavor Part</b>: The type or classification of the flavor. For more information on flavor parts, see the
        product guide.
            - PLATFORM
            - OS
            - ASSET_TAG
            - HOST_UNIQUE
            - SOFTWARE

        <b>Match Policy</b>: The policy which defines how the host is verified against the flavors in the flavor group for
        the specified flavor part.

          <u>Match Type</u>: An enum whose value identifies how the policy is evaluated for the specified flavor part.

           | Match Type | Description |
           |------------|-------------|
           |  ANY_OF    | The host can match any of the flavors of this type (flavor part) in the flavor group, but it <br> must match at least one. |
           |  ALL_OF    | The host must match each and every one of the flavors of this type (flavor part) in <br> the flavor group. |
           |  LATEST    | The host must match latest of the flavors of this type (flavor part) in the flavor group. |


          <u>Required</u>: An enum whose value determines whether the flavor part needs to be evaluated.

           | Required            | Description |
           |---------------------|-------------|
           | REQUIRED            | A flavor of this type (flavor part) must exist in the flavor group in order for the <br> host to be trusted. |
           | REQUIRED_IF_DEFINED | If a flavor of this type(flavor part) exists in the flavorgroup, then the corresponding <br> flavor is required/mandatory. If the flavor of this type is not present in the flavorgroup,<br> then flavor part will be ignored and host will still be trusted |


        <b>Default Flavor Groups</b>: Four flavor groups exist by default.

           | Flavorgroup         | Description |
           |---------------------|-------------|
           |  automatic          | Default flavor group for flavor verification. |
           |  host_unique        | Default flavor group for host unique flavor parts. All host unique flavor parts are <br> associated with this flavor group regardless of user settings. This flavor group’s <br> policy is null, and the match policy for its flavor parts are defined in each <br> individual separate flavor group. This separation is required for backend processing <br> and handling of the host unique flavors. Host Unique Flavor Parts: ASSET_TAG, HOST_UNIQUE |
           |  platform_software  | Default flavor group for default platform software flavors for application integrity <br> of Trust Agent |
           |  workload_software  | Default flavor group for default platform software flavors for application integrity <br> of Workload Agent |

        <b>Searches for flavor groups</b>
        Only one identifying parameter can be specified to search flavorgroups which will return flavorgroup collection as
        a result.
      operationId: Search
      parameters:
      - description: Flavor group ID
        format: uuid
        in: query
        name: id
        type: string
      - description: Flavor group name.
        in: query
        name: nameEqualTo
        type: string
      - description: Substring of flavor group name.
        in: query
        name: nameContains
        type: string
      - description: Boolean value to indicate whether the content of the flavors
          contained within the <br> specified flavor group should be included in the
          response body. Default value is false.
        in: query
        name: includeFlavorContent
        type: boolean
      - in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavorgroups.
          schema:
            $ref: '#/definitions/FlavorgroupCollection'
        "400":
          description: Invalid values for search parameters
        "415":
          description: Invalid Accept Header in Request
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      x-permissions: flavorgroups:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups
      x-sample-call-output: |-
        {
            "flavorgroups": [
                {
                    "id": "826501bd-3c75-4839-a08f-db5f744f8498",
                    "name": "automatic",
                    "flavor_match_policy_collection": {
                        "flavor_match_policies": [
                            {
                                "flavor_part": "PLATFORM",
                                "match_policy": {
                                    "match_type": "ANY_OF",
                                    "required": "REQUIRED"
                                }
                            },
                            {
                                "flavor_part": "OS",
                                "match_policy": {
                                    "match_type": "ANY_OF",
                                    "required": "REQUIRED"
                                }
                            },
                            {
                                "flavor_part": "ASSET_TAG",
                                "match_policy": {
                                    "match_type": "ANY_OF",
                                    "required": "REQUIRED_IF_DEFINED"
                                }
                            },
                            {
                                "flavor_part": "HOST_UNIQUE",
                                "match_policy": {
                                    "match_type": "ANY_OF",
                                    "required": "REQUIRED_IF_DEFINED"
                                }
                            }
                        ]
                    },
                    "flavor_ids": [
                        "b37580dd-f300-4229-8358-2640936c3841"
                    ]
                }
            ]
        }
    post:
      consumes:
      - application/json
      description: |
        Creates a flavor group.

        The serialized Flavorgroup Go struct object represents the content of the request body.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | name                           | Name of the flavorgroup to be created. |
         | flavor_match_policy_collection | Collection of flavor match policies. Each flavor match policy contains two <br> parts: <br><b>flavor_part</b>:The type or classification of the flavor.<br> <b>match_policy</b>:The policy which defines how the host is verified against the <br> flavors in the flavor group for the specified flavor part. |
         | flavorTemplateIds              | (Optional) Flavor template ids that the created flavorgroup will be associated with. If not provided, created flavorgroup will be associated with all the templates associated with the automatic flavor group. |
      operationId: Create
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/FlavorGroup'
      - in: header
        name: Content-Type
        required: true
        type: string
      - in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the flavorgroup.
          schema:
            $ref: '#/definitions/FlavorGroup'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      x-permissions: flavorgroups:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups
      x-sample-call-input: |
        {
            "name":"CustomerX",
            "flavor_match_policy_collection": {
                "flavor_match_policies": [
                   {
                       "flavor_part": "PLATFORM",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED"
                       }
                   },
                   {
                       "flavor_part": "OS",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED"
                       }
                   },
                   {
                       "flavor_part": "ASSET_TAG",
                       "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED_IF_DEFINED"
                        }
                   },
                   {
                       "flavor_part": "HOST_UNIQUE",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED_IF_DEFINED"
                       }
                   }
               ]
            }
        }
      x-sample-call-output: |-
        {
            "id": "1fdb39de-7bf4-440e-ad05-286eca933f78",
            "name":"CustomerX",
            "flavor_match_policy_collection":{
                "flavor_match_policies": [
                   {
                       "flavor_part": "PLATFORM",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED"
                       }
                   },
                   {
                       "flavor_part": "OS",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED"
                       }
                   },
                   {
                       "flavor_part": "ASSET_TAG",
                       "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED_IF_DEFINED"
                        }
                   },
                   {
                       "flavor_part": "HOST_UNIQUE",
                       "match_policy": {
                           "match_type": "ANY_OF",
                           "required": "REQUIRED_IF_DEFINED"
                       }
                   }
               ]
            }
        }
  /flavorgroups/{flavorgroup_id}:
    delete:
      description: |
        Deletes a flavor group. If the flavor group is still associated with any hosts, an error will be thrown.
      operationId: Delete
      parameters:
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the Flavorgroup.
        "404":
          description: Flavorgroup record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      x-permissions: flavorgroups:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/826501bd-3c75-4839-a08f-db5f744f8498
    get:
      description: |
        Retrieves a flavor group.
        Returns - The serialized Flavorgroup Go struct object that was retrieved and a list of associated flavor IDs
      operationId: Retrieve
      parameters:
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavorgroup.
          schema:
            $ref: '#/definitions/FlavorGroup'
        "404":
          description: Flavorgroup record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      x-permissions: flavorgroups:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/826501bd-3c75-4839-a08f-db5f744f8498
      x-sample-call-output: |-
        {
            "id": "826501bd-3c75-4839-a08f-db5f744f8498",
            "name": "automatic",
            "flavor_match_policy_collection": {
                "flavor_match_policies": [
                    {
                        "flavor_part": "PLATFORM",
                        "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED"
                        }
                    },
                    {
                        "flavor_part": "OS",
                        "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED"
                        }
                    },
                    {
                        "flavor_part": "ASSET_TAG",
                        "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED_IF_DEFINED"
                        }
                    },
                    {
                        "flavor_part": "HOST_UNIQUE",
                        "match_policy": {
                            "match_type": "ANY_OF",
                            "required": "REQUIRED_IF_DEFINED"
                        }
                    }
                ]
            },
            "flavor_ids": [
                "b37580dd-f300-4229-8358-2640936c3841"
            ]
        }
  /flavorgroups/{flavorgroup_id}/flavors:
    get:
      description: |
        Retrieves a list of FlavorGroup-Flavor associations corresponding to a flavorgroup.
        Returns - The FlavorgroupFlavorLinkCollection in JSON format that are associated with the flavorgroup.
      operationId: Search-Flavorlinks
      parameters:
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the FlavorgroupFlavorLinkCollection.
          schema:
            $ref: '#/definitions/FlavorgroupFlavorLinkCollection'
        "404":
          description: Flavorgroup record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      x-permissions: flavorgroups:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/e5574593-0f92-41f0-8f2d-93b97cea9c06/flavors
      x-sample-call-output: |-
        {
        "flavor_flavorgroup_links": [
        {
        "flavorgroup_id": "e5574593-0f92-41f0-8f2d-93b97cea9c06",
        "flavor_id": "fdd4240b-2369-4175-80e7-7fbf8ec78ce8"
        },
        {
        "flavorgroup_id": "e5574593-0f92-41f0-8f2d-93b97cea9c06",
        "flavor_id": "bf8a9882-8a49-43ca-8052-b666bd7c0172"
        }
        ]
        }
    post:
      consumes:
      - application/json
      description: |
        Creates an association between a Flavor and FlavorGroup record.

        The serialized FlavorgroupFlavorLinkCriteria Go struct object represents the content of the request body.

         | Attribute                      | Description                                               |
         |--------------------------------|-----------------------------------------------------------|
         | flavor_id                      | ID of the Flavor record to be linked with the FlavorGroup |
      operationId: Create-FlavorLink
      parameters:
      - format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/FlavorgroupFlavorLinkCriteria'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully linked the FlavorGroup and Flavor.
          schema:
            $ref: '#/definitions/FlavorgroupFlavorLink'
        "400":
          description: Invalid request body provided/FlavorID provided in request
            body does not exist/FlavorGroup-Flavor link already exists
        "404":
          description: FlavorGroup ID in request path does not exist
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      - ""
      x-permissions: flavorgroups:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/8d7964db-4e4d-49a0-b441-1beabbcebf78/flavors
      x-sample-call-input: |
        {
            "flavor_id":"1429cebf-1c09-4e78-b2aa-da10e58d7446",
        }
      x-sample-call-output: |-
        {
          "flavorgroup_id": "8d7964db-4e4d-49a0-b441-1beabbcebf78",
          "flavor_id": "1429cebf-1c09-4e78-b2aa-da10e58d7446"
        }
  /flavorgroups/{flavorgroup_id}/flavors/{flavor_id}:
    delete:
      description: |
        Deletes an individual FlavorGroup Flavor link.
      operationId: Delete-FlavorLink
      parameters:
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the Flavorgroup-Flavor link.
        "404":
          description: Flavorgroup/Flavor record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      - ""
      x-permissions: flavorgroups:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/826501bd-3c75-4839-a08f-db5f744f8498
    get:
      description: |
        Retrieves a FlavorGroup-Flavor association.
        Returns - The FlavorGroupFlavorLink in JSON format that represents the association.
      operationId: Retrieve-Flavorlink
      parameters:
      - description: Unique ID of the flavorgroup.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Unique ID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the FlavorGroupFlavorLink.
          schema:
            $ref: '#/definitions/FlavorgroupFlavorLink'
        "404":
          description: Flavorgroup/Flavor record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavorgroups
      - ""
      x-permissions: flavorgroups:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavorgroups/8d7964db-4e4d-49a0-b441-1beabbcebf78/flavors/1429cebf-1c09-4e78-b2aa-da10e58d7446
      x-sample-call-output: |-
        {
          "flavorgroup_id": "8d7964db-4e4d-49a0-b441-1beabbcebf78",
          "flavor_id": "1429cebf-1c09-4e78-b2aa-da10e58d7446"
        }
  /flavors:
    get:
      description: |
        A flavor is a set of measurements and metadata organized in a flexible format that allows for ease of further extension. The measurements included in the flavor pertain to various hardware, software and feature categories, and their respective metadata sections provide descriptive information.

        The four current flavor categories:
        PLATFORM, OS, ASSET_TAG, HOST_UNIQUE, SOFTWARE (See the product guide for a detailed explanation)

        When a flavor is created, it is associated with a flavor group. This means that the measurements for that flavor type are deemed acceptable to obtain a trusted status. If a host, associated with the same flavor group, matches the measurements contained within that flavor, the host is trusted for that particular flavor category (dependent on the flavor group policy). Searches for Flavor records. The identifying parameter can be specified as query to search flavors which will return flavor collection as a result.

        Searches for relevant flavors and returns the signed flavor collection consisting of all the associated flavors.
        Returns - The serialized Signed FlavorCollection Go struct object that was retrieved.
      operationId: Search-Flavors
      parameters:
      - description: Flavor ID
        format: uuid
        in: query
        name: id
        type: string
      - description: The key can be any “key” field from the meta description section
          of a flavor. The value can be any “value” of the specified key field in
          the flavor meta description section. Both key and value query parameters
          need to be specified.
        in: query
        name: key
        type: string
      - description: The value of the key attribute in flavor description. When provided,
          key must be provided in query as well.
        in: query
        name: value
        type: string
      - description: The flavor group ID. Returns all the flavors associated with
          the flavor group ID.
        in: query
        name: flavorgroupId
        type: string
      - description: An array of flavor parts returns all the flavors associated with
          the flavor parts
        in: query
        name: flavorParts
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully searched and returned a signed flavor collection.
          schema:
            $ref: '#/definitions/SignedFlavorCollection'
        "400":
          description: Invalid search criteria provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-permissions: flavors:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavors?id=f66ac31d-124d-418e-8200-2abf414a9adf
      x-sample-call-output: |-
        {
           "signed_flavors": [
           {
               "flavor": {
                   "meta": {
                       "schema": {
                           "uri": "lib:wml:measurements:1.0"
                       },
                       "id": "f66ac31d-124d-418e-8200-2abf414a9adf",
                       "description": {
                           "flavor_part": "SOFTWARE",
                           "label": "ISL_Applications",
                           "digest_algorithm": "SHA384"
                       }
                   },
                   "software": {
                       "measurements": {
                           "opt-trustagent-bin": {
                               "type": "directoryMeasurementType",
                               "value": "3519466d871c395ce1f5b073a4a3847b6b8f0b3e495337daa0474f967aeecd48f699df29a4d106288f3b0d1705ecef75",
                               "Path": "/opt/trustagent/bin",
                               "Include": ".*"
                           },
                           "opt-trustagent-bin-module_analysis_da.sh": {
                               "type": "fileMeasurementType",
                               "value": "2a99c3e80e99d495a6b8cce8e7504af511201f05fcb40b766a41e6af52a54a34ea9fba985d2835aef929e636ad2a6f1d",
                               "Path": "/opt/trustagent/bin/module_analysis_da.sh"
                           }
                       },
                       "cumulative_hash": "be7c2c93d8fd084a6b5ba0b4641f02315bde361202b36c4b88eefefa6928a2c17ac0e65ec6aeb930220cf079e46bcb9f"
                   }
               },
               "signature": "aas8/Nv7yYuwx2ZIOMrXFpNf333tBJgr87Dpo7Z5jjUR36Estlb8pYaTGN4Dz9JtbXZy2uIBLr1wjhkHVWm2r1FQq+2yJznXGCpkxWiQSZK84dmmr9tPxIxwxH5U/y8iYgSOnAdvWOn5E7tecil0WcYI/pDlXOs6WtsOWWDsHNXLswzw5qOhqU8WY/2ZVp0l1dnIFT17qQM9SOPi67Jdt75rMAqgl3gOmh9hygqa8KCmF7lrILv3u8ALxNyrqNqbInLGrWaHz5jSka1U+aF6ffmyPFUEmVwT3dp41kCNQshHor9wYo0nD1SAcls8EGZehM/xDokUCjUbfTJfTawYHgwGrXtWEpQVIPI+0xOtLK5NfUl/ZrQiJ9Vn95NQ0FYjfctuDJmlVjCTF/EXiAQmbEAh5WneGvXOzp6Ovp8SoJD5OWRuGhfaT7si3Z0KqGZ2Q6U0ppa8oJ3l4uPSfYlRdg4DFb4PyIScHSo93euQ6AnzGiMT7Tvk3e+lxymkNBwX"
           }]
        }
    post:
      consumes:
      - application/json
      description: |
        Creates new flavor(s) in database.
        Flavors can be created by directly providing the flavor content in the request body, or they can be imported from a host. If the flavor content is provided, the flavor parameter must be set in the request. If the flavor is being imported from a host, the host connection string must be specified.

        If a flavor group is not specified, the flavor(s) created will be assigned to the default “automatic” flavor group, with the exception of the host unique flavors, which are associated with the “host_unique” flavor group. If a flavor group is specified and does not already exist, it will be created with a default flavor match policy.

        Partial flavor types can be specified as an array input. In this fashion, the user can choose which flavor types to import from a host. Only flavor types that are defined in the flavor group flavor match policy can be specified. If no partial flavor types are provided, the default action is to attempt retrieval of all flavor types. The response will contain all flavor types that it was able to create.

        If generic flavors are created, all hosts in the flavor group will be added to the backend queue, flavor verification process to re-evaluate their trust status. If host unique flavors are created, the individual affected hosts are added to the flavor verification process.

        The serialized FlavorCreateRequest Go struct object represents the content of the request body.

         | Attribute                      | Description                                     |
         |--------------------------------|-------------------------------------------------|
         | connection_string              | (Optional) The host connection string. flavorgroup_names, partial_flavor_types can be provided as optional parameters along with the host connection string. |
         |                                | For INTEL hosts, this would have the vendor name, the IP addresses, or DNS host name and credentials i.e.: "intel:https://trustagent.server.com:1443 |
         |                                | For VMware, this includes the vCenter and host IP address or DNS host name i.e.: "vmware:https://vCenterServer.com:443/sdk;h=host;u=vCenterUsername;p=vCenterPassword" |
         | flavors                        | (Optional) A collection of flavors in the defined flavor format. No other parameters are needed in this case.
         | signed_flavors                 | (Optional) This is collection of signed flavors consisting of flavor and signature provided by user. |
         | flavorgroup_names              | (Optional) Flavor group names that the created flavor(s) will be associated with. If not provided, created flavor will be associated with automatic flavor group. |
         | partial_flavor_types           | (Optional) List array input of flavor types to be imported from a host. Partial flavor type can be any of the following: PLATFORM, OS, ASSET_TAG, HOST_UNIQUE, SOFTWARE. Can be provided with the host connection string. See the product guide for more details on how flavor types are broken down for each host type. |
      operationId: Create-Flavors
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/FlavorCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the flavors.
          schema:
            $ref: '#/definitions/SignedFlavorCollection'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-permissions: flavors:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavors
      x-sample-call-input: |
        {
            "connection_string" : "https://tagent-ip:1443/",
            "partial_flavor_types" : ["OS", "PLATFORM"]
        }
      x-sample-call-output: |-
        {
         "signed_flavors": [
             {
                 "flavor": {
                     "meta": {
                         "id": "1347c8a4-10ff-4cd4-81e6-75ec765a3be3",
                         "description": {
                             "bios_name": "Intel Corporation",
                             "bios_version": "WLYDCRB1.SYS.0021.D02.2011260651",
                             "cbnt_enabled": true,
                             "flavor_part": "PLATFORM",
                             "flavor_template_ids": [
                                 "48df0b29-9b05-485c-a005-8379aa2f4e5d",
                                 "0969de9f-8c84-4024-808e-8d87ab03e7f4",
                                 "9732b264-9a09-46d5-ad1d-dbf4a0028623"
                             ],
                             "label": "INTEL_IntelCorporation_WLYDCRB1.SYS.0021.D02.2011260651_CBNT_BTGP3_TPM_TXT_UEFI_SecureBootEnabled_2020-12-31T10:06:35.506222-05:00",
                             "source": "wlr19s04",
                             "suefi_enabled": true,
                             "tboot_installed": false,
                             "tpm_version": "2.0",
                             "uefi_enabled": true,
                             "vendor": "Linux"
                         },
                         "vendor": "INTEL"
                     },
                     "bios": {
                         "bios_name": "Intel Corporation",
                         "bios_version": "WLYDCRB1.SYS.0021.D02.2011260651"
                     },
                     "hardware": {
                         "processor_info": "A6 06 06 00 FF FB EB BF",
                         "processor_flags": "FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE-36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE",
                         "feature": {
                             "TXT": {
                                 "enabled": true
                             },
                             "TPM": {
                                 "enabled": true,
                                 "version": "2.0",
                                 "pcr_banks": [
                                     "SHA1",
                                     "SHA256"
                                 ]
                             },
                             "CBNT": {
                                 "enabled": true,
                                 "profile": "BTGP3"
                             },
                             "SUEFI": {
                                 "enabled": true,
                                 "secure_boot_enabled": true
                             }
                         }
                     },
                     "pcrs": [
                         {
                             "pcr": {
                                 "index": 6,
                                 "bank": "SHA256"
                             },
                             "measurement": "3d458cfe55cc03ea1f443f1562beec8df51c75e14a9fcf9a7234a13f198e7969",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 7,
                                 "bank": "SHA256"
                             },
                             "measurement": "2989281f06f7a4aebd9c1a03869f91918ee7dfb2b4de64d6a0c80bd3a5db3bb5",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 0,
                                 "bank": "SHA256"
                             },
                             "measurement": "6ff721e905c69ec83db8ae31bef0885982cab0d0c3b98c5e4eb18ceb2afbc354",
                             "pcr_matches": true,
                             "eventlog_equals": {
                                 "events": [
                                     {
                                         "type_id": "0x3",
                                         "type_name": "EV_NO_ACTION",
                                         "measurement": "0000000000000000000000000000000000000000000000000000000000000000"
                                     },
                                     {
                                         "type_id": "0x7",
                                         "type_name": "EV_S_CRTM_CONTENTS",
                                         "tags": [
                                             "Boot Guard Measured S-CRTM"
                                         ],
                                         "measurement": "240613f42068696ad49312f41f50e94f22d6801d1128450c425555e955a441f2"
                                     },
                                     {
                                         "type_id": "0x8",
                                         "type_name": "EV_S_CRTM_VERSION",
                                         "measurement": "96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7"
                                     },
                                     {
                                         "type_id": "0x80000008",
                                         "type_name": "EV_EFI_PLATFORM_FIRMWARE_BLOB",
                                         "measurement": "c4eefd2fc4037c299ef6270a12a23c62afcc79b41c243f4691a94f92f9ea8013"
                                     },
                                     {
                                         "type_id": "0x80000008",
                                         "type_name": "EV_EFI_PLATFORM_FIRMWARE_BLOB",
                                         "measurement": "2e3ffa3b146eab8ab958049f512a52342a51dc3bc0ccba2e06a98f8fbf92966b"
                                     },
                                     {
                                         "type_id": "0x80000008",
                                         "type_name": "EV_EFI_PLATFORM_FIRMWARE_BLOB",
                                         "measurement": "4b8f9e2b2a4f06fb132f325f2a36d6cd7cffa23382b243b0a597d989cf82769b"
                                     },
                                     {
                                         "type_id": "0x80000008",
                                         "type_name": "EV_EFI_PLATFORM_FIRMWARE_BLOB",
                                         "measurement": "c4eefd2fc4037c299ef6270a12a23c62afcc79b41c243f4691a94f92f9ea8013"
                                     },
                                     {
                                         "type_id": "0x1",
                                         "type_name": "EV_POST_CODE",
                                         "tags": [
                                             "ACPI DATA"
                                         ],
                                         "measurement": "3d13b2f22e51c24408ee29a1a423cceb48f045fddef8f4604f7b2dbe1692fb07"
                                     },
                                     {
                                         "type_id": "0x1",
                                         "type_name": "EV_POST_CODE",
                                         "tags": [
                                             "ACPI DATA"
                                         ],
                                         "measurement": "608072d8953921f15718897cbb0a47623e0c29fa7286d20beb0d733756acb643"
                                     },
                                     {
                                         "type_id": "0x4",
                                         "type_name": "EV_SEPARATOR",
                                         "measurement": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119"
                                     }
                                 ]
                             }
                         },
                         {
                             "pcr": {
                                 "index": 1,
                                 "bank": "SHA256"
                             },
                             "measurement": "e2b734ab6ffa25d47efd9af408ecd7d601fd48e029299a090212c447eda02e17",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 2,
                                 "bank": "SHA256"
                             },
                             "measurement": "bd66b5177062be02c57d7fd158a21e067bbb109a2be621010f858181a31a8420",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 3,
                                 "bank": "SHA256"
                             },
                             "measurement": "3d458cfe55cc03ea1f443f1562beec8df51c75e14a9fcf9a7234a13f198e7969",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 4,
                                 "bank": "SHA256"
                             },
                             "measurement": "02fd4da1758128c7a9fb8a2d0631c99f17bed3549950f7681522a763d0a87f53",
                             "pcr_matches": true
                         },
                         {
                             "pcr": {
                                 "index": 5,
                                 "bank": "SHA256"
                             },
                             "measurement": "f2e236caadd0014f0f8b970547cbf36ca0cb248d16e4177b619db3594d782d53",
                             "pcr_matches": true
                         }
                     ]
                 },
                 "signature": "kEzL48u9q9LrXKJJGmCKeg0U/ZFxCQ4OdZtUV0l9kE2tqYmEtzEmakEgUihiYjN72IMYXr/rbLbINRkByppp2ra2lExhtmoRk3FFZssl8LkjdpAzIIttjGZAwRjdeuyHBC69vSHQKIVtOd2rsruGjiS6QkqbJOGz1A6dI+zEEVI4f6dfeBoLnkJgZ2x8zjWpLbU8u4lN1npewQ9T4cYzw0mOJqZtdcjx8vuwwFJHSkMfIhEoZGaG/b/2+3eUvptbFAhrIVHWQXKjisC8qcl5+pjdao7jawJoY4kMw+3j6zCono2mS9buCfc2FHsuoqUMJw7Z/dHfmIwBVNKet5bWuxB4l6DpKJwk4FJUEpBpJbJPpmqgMgPNFX12fVQn+FJs8/KTsWfUHovIqggN0/ZYfCjG2YIBLgliZOEPH1zMnMReXwBUOQkenNLO81OL3iH89ePBAsKiCNTjM2Hi7pgAQpaWq+vDypGIQ5YshuBZiur94JtrY40FKUHVw78kjV9B"
             },
             {
                 "flavor": {
                     "meta": {
                         "id": "2e9d20f3-47a4-4adb-a930-dac4ed613911",
                         "description": {
                             "flavor_part": "OS",
                             "flavor_template_ids": [
                                 "48df0b29-9b05-485c-a005-8379aa2f4e5d",
                                 "0969de9f-8c84-4024-808e-8d87ab03e7f4",
                                 "9732b264-9a09-46d5-ad1d-dbf4a0028623"
                             ],
                             "label": "INTEL_RedHatEnterprise_8.2_Virsh_4.5.0_2020-12-31T10:06:35.515548-05:00",
                             "os_name": "RedHatEnterprise",
                             "os_version": "8.2",
                             "source": "wlr19s04",
                             "tboot_installed": false,
                             "tpm_version": "2.0",
                             "uefi_enabled": true,
                             "vendor": "Linux",
                             "vmm_name": "Virsh",
                             "vmm_version": "4.5.0"
                         },
                         "vendor": "INTEL"
                     },
                     "bios": {
                         "bios_name": "Intel Corporation",
                         "bios_version": "WLYDCRB1.SYS.0021.D02.2011260651"
                     },
                     "pcrs": [
                         {
                             "pcr": {
                                 "index": 7,
                                 "bank": "SHA256"
                             },
                             "measurement": "2989281f06f7a4aebd9c1a03869f91918ee7dfb2b4de64d6a0c80bd3a5db3bb5",
                             "pcr_matches": true,
                             "eventlog_includes": [
                                 {
                                     "type_id": "0x80000001",
                                     "type_name": "EV_EFI_VARIABLE_DRIVER_CONFIG",
                                     "tags": [
                                         "db"
                                     ],
                                     "measurement": "5f94ef49bd3a41f60c812aa76812461b670036687f70bc615e3fb78fdf3ac332"
                                 },
                                 {
                                     "type_id": "0x800000e0",
                                     "type_name": "EV_EFI_VARIABLE_AUTHORITY",
                                     "tags": [
                                         "db"
                                     ],
                                     "measurement": "e3d4866d84e25279442e3e5eb5d8f282093fba3331dc1c6f829310f642561e79"
                                 }
                             ]
                         }
                     ]
                 },
                 "signature": "SndykHH3mrJxRerjWcH+HF6cy6r57G4qasgrSZY39DunMEkILkESfeync08KT/5nRYbx0yG7foNkYixL7PqfkYrxxjzlbs5oBQIw0j/uk/Tx+/6uMKGV0DDKscperYBiFIg8e3sC7LB34I8SAqBjpru714iiT+KQJ5qCMblJMSvvCij/R7whyMhRbhjlBYnSp9kcupTP6E5DIgoRRhbZgiAi/xFjMDN0KI4PGsTuxWnei95qku2i7c7lYwgtTUAPKYjKhuBlTpjHp6p/836D+h+AawUEPMrufFRgARlqbdl7h9snpdGJ9fJ7nQSdqBCejMEanX8ZQ3YGnRBRVQw2XR3iF+OABcTU0HMjmsix1VjVWhQW52czvQlZPSvp4Szm6al+U2jQbC/pI1Drinq6XyukHHoKN0OAuygmcJngQavTb3KhgyAYtWPKrNaZDDZN2MtdsJD1Mfx9CMVvB5TN1Kf/OWLElPtDZzygQtjNzaPoqYieg8HK3NttvCVyE4qj"
             },
        }
  /flavors/{flavor_id}:
    delete:
      description: |
        Deletes a flavor.
      operationId: Delete-Flavor
      parameters:
      - description: Unique UUID of the flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the flavor.
        "404":
          description: No flavor with the provided flavor ID found.
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-permissions: flavors:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavors/f66ac31d-124d-418e-8200-2abf414a9adf
    get:
      description: |
        Retrieves a flavor.
        Returns - The serialized Signed Flavor Go struct object that was retrieved.
      operationId: Retrieve-Flavor
      parameters:
      - description: Unique UUID of the Flavor.
        format: uuid
        in: path
        name: flavor_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the flavor.
          schema:
            $ref: '#/definitions/SignedFlavor'
        "404":
          description: No flavor with the provided flavor ID found.
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error.
      security:
      - bearerAuth: []
      tags:
      - Flavors
      x-permissions: flavors:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/flavors/f66ac31d-124d-418e-8200-2abf414a9adf
      x-sample-call-output: |-
        {
          "flavor": {
              "meta": {
                  "schema": {
                      "uri": "lib:wml:measurements:1.0"
                  },
                  "id": "f66ac31d-124d-418e-8200-2abf414a9adf",
                  "description": {
                      "flavor_part": "SOFTWARE",
                      "label": "ISL_Applications123",
                      "digest_algorithm": "SHA384"
                  }
              },
              "software": {
                  "measurements": {
                      "opt-trustagent-bin": {
                          "type": "directoryMeasurementType",
                          "value": "3519466d871c395ce1f5b073a4a3847b6b8f0b3e495337daa0474f967aeecd48f699df29a4d106288f3b0d1705ecef75",
                          "Path": "/opt/trustagent/bin",
                          "Include": ".*"
                      },
                      "opt-trustagent-bin-module_analysis_da.sh": {
                          "type": "fileMeasurementType",
                          "value": "2a99c3e80e99d495a6b8cce8e7504af511201f05fcb40b766a41e6af52a54a34ea9fba985d2835aef929e636ad2a6f1d",
                          "Path": "/opt/trustagent/bin/module_analysis_da.sh"
                      }
                  },
                  "cumulative_hash": "be7c2c93d8fd084a6b5ba0b4641f02315bde361202b36c4b88eefefa6928a2c17ac0e65ec6aeb930220cf079e46bcb9f"
              }
          },
          "signature": "aas8/Nv7yYuwx2ZIOMrXFpNf333tBJgr87Dpo7Z5jjUR36Estlb8pYaTGN4Dz9JtbXZy2uIBLr1wjhkHVWm2r1FQq+2yJznXGCpkxWiQSZK84dmmr9tPxIxwxH5U/y8iYgSOnAdvWOn5E7tecil0WcYI/pDlXOs6WtsOWWDsHNXLswzw5qOhqU8WY/2ZVp0l1dnIFT17qQM9SOPi67Jdt75rMAqgl3gOmh9hygqa8KCmF7lrILv3u8ALxNyrqNqbInLGrWaHz5jSka1U+aF6ffmyPFUEmVwT3dp41kCNQshHor9wYo0nD1SAcls8EGZehM/xDokUCjUbfTJfTawYHgwGrXtWEpQVIPI+0xOtLK5NfUl/ZrQiJ9Vn95NQ0FYjfctuDJmlVjCTF/EXiAQmbEAh5WneGvXOzp6Ovp8SoJD5OWRuGhfaT7si3Z0KqGZ2Q6U0ppa8oJ3l4uPSfYlRdg4DFb4PyIScHSo93euQ6AnzGiMT7Tvk3e+lxymkNBwX"
        }
  /host-status:
    get:
      description: |
        Searches for HostStatus records.
        Returns - The serialized HostStatusCollection Go struct object that was retrieved, which is a collection of serialized HostStatus Go struct objects.

        <b>Note</b>
        Only one identifying parameter can be specified. The parameters listed here are in the order of priority that will be evaluated.
      operationId: SearchHostStatus
      parameters:
      - description: HostStatus ID
        format: uuid
        in: query
        name: id
        type: string
      - description: Host name.
        in: query
        name: hostName
        type: string
      - description: Host UUID
        format: uuid
        in: query
        name: hostId
        type: string
      - description: Hardware UUID of host.
        format: uuid
        in: query
        name: hostHardwareId
        type: string
      - description: Host connection state.
        enum:
        - invalid
        - unknown
        - connected
        - queue
        - connection_failure
        - connection_timeout
        - unauthorized
        - aik_not_provisioned
        - ec_not_present
        - measured_launch_failure
        - tpm_ownership_failure
        - tpm_not_present
        - unsupported_tpm
        in: query
        name: hostStatus
        type: string
      - description: |
          Filters HostStatus records created after this date.
           date                                   Ex: fromDate=2006-01-02
           date+time                              Ex: fromDate=2006-01-02 15:04:05
           date+time(with milli seconds)          Ex: fromDate=2006-01-02T15:04:05.000Z
           date+time(with micro seconds)          Ex: fromDate=2006-01-02T15:04:05.000000Z
        format: date-time
        in: query
        name: fromDate
        type: string
      - description: |
          Filters HostStatus records created before this date.
           date                                   Ex: fromDate=2006-01-02
           date+time                              Ex: fromDate=2006-01-02 15:04:05
           date+time(with milli seconds)          Ex: fromDate=2006-01-02T15:04:05.000Z
           date+time(with micro seconds)          Ex: fromDate=2006-01-02T15:04:05.000000Z
        format: date-time
        in: query
        name: toDate
        type: string
      - default: true
        description: Return only the latest status of HostStatus records if true.
          Else returns records from audit log entries.
        in: query
        name: latestPerHost
        type: boolean
      - description: Returns HostStatus records created since the past 'n' days. For
          an exact range, use `fromDate` and `toDate` instead.
        in: query
        minimum: 1
        name: numberOfDays
        type: integer
      - default: 10000
        description: Limits the number of HostStatus records in the response.
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the HostStatus records. Also returned
            when no results are found.
          schema:
            $ref: '#/definitions/HostStatusCollection'
        "400":
          description: Invalid values for search criteria
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostStatuses
      x-permissions: host_status:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/host-status
      x-sample-call-output: |
        {
          "host_status": [
              {
                  "id": "055dd911-6e59-4374-9761-837250ad0113",
                  "host_id": "47a3b602-f321-4e03-b3b2-8f3ca3cde128",
                  "created": "2020-07-17T04:47:33.842636Z",
                  "status": {
                      "host_state": "CONNECTED",
                      "last_time_connected": "0001-01-01T00:00:00Z"
                  },
                  "host_manifest": {
                      "aik_certificate": "MIIDTDCCAbSgAwIBAgIGAXF82oFMMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMTEG10d2lsc29uLXBjYS1haWswHhcNMjAwNDE1MDgwMDI2WhcNMzAwNDE1MDgwMDI2WjAAMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0Ug7M15W3I3LejIOxZOiSvgXboF4+7TxvaY8BbzrNoyGbV8QfyCHjmdYHoyyzwvCUp9CB7wg1tb0btSLAqITLjFnUnTks28Sqz5tZW3et0O0X1fAsSnhJIc3vtkgxnxEIFOx2nsUDrEPXbdH1XOjSs5iRE7K45v2MzN9CO2QCwydPbUmgwauJNI3eQS5AZjF3eVnus9MMhTvYj4PNwbRj3jjuMH6OzJKX4bKeRPm05IHQcT/sEFoq5mShAmGyl+RkkRennIm5VIUnV99jm8mJvfZL3LA43kiHiOkvwiN0ImnDnNADP40IpothFFfIQEhr2L9CYUuUlq/BAkgt9epdwIDAQABozEwLzAtBgNVHREBAf8EIzAhgR8ACxj9Cf0C/f0bOXZ4QSn9JP1LQf13QWAZEV5Bsnz9MA0GCSqGSIb3DQEBCwUAA4IBgQA/SUjxvk2e6zgmTm5VhoV4WMmvvfZWZqEuKNnNB4lIkfySLuETTU7Jw1lc4skgr3KvxoftRM0099WVxhVwQMK/MarE7yNW7JQr2byNLoOrVm6FSkcRowrGFEnvFtC/qiGQ9JQTRkormIxDuPsaZWVjHMEuefEyq9T+hueTP5a1NDJmvtlXD2MjMjwEzeGf7R3TURmXt6tjMotbyO0/uv1n3Q79Wl/yWzb+bs9g5QlIlSrDGaxK7c7I7jGh0ee2gS2BOa/9iS59B9AS1TwACyj47yjFXoSQsvWqZ7XfPPzFVcFvvwtLRLeOzgIZhD+ZXutmY+smqDnkh/PB5BmXM/zDlae4QJ71rBGrmvVVj2cWGdaeZ19JivLLiBw0164yehTcpDzQzZQqyY4X+kX+fQD4fY/f8KxNkdxpq+n7ryJaBU/93ZbBdYtfwIs1r437G9QJfZ1h1rgJeIjPd/MAD3Knb1Q50c0fsEl8cnuzp86mY+imfrU2QKaF4WQzoiMItwU=",
                      "asset_tag_digest": "tHgfRQED1+pYgEZpq3dZC9ONmBCZKdx10LErTZs1k/k=",
                      "host_info": {
                          "os_name": "RedHatEnterprise",
                          "os_version": "8.1",
                          "bios_version": "SE5C620.86B.00.01.6016.032720190737",
                          "vmm_name": "Docker",
                          "vmm_version": "19.03.5",
                          "processor_info": "54 06 05 00 FF FB EB BF",
                          "host_name": "myhost",
                          "bios_name": "Intel Corporation",
                          "hardware_uuid": "1ad9c003-b0e0-4319-b2b3-06053dfd1407",
                          "process_flags": "FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE-36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE",
                          "no_of_sockets": "2",
                          "tboot_installed": "true",
                          "hardware_features": {
                              "TXT": {
                                  "enabled": "true"
                              },
                              "TPM": {
                                  "enabled": "true",
                                  "meta": {
                                      "tpm_version": "2.0",
                                      "pcr_banks": "SHA1_SHA256"
                                  }
                              }
                          },
                          "installed_components": [
                              "tagent",
                              "wlagent"
                          ]
                      },
                      "pcr_manifest": {
                          "sha1pcrs": [
                              {
                                  "index": "pcr_0",
                                  "value": "6d73d0f4be74794317102e3f9a811fe00f373cc8",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_1",
                                  "value": "c0b4764a706fd82f44dbd94b27bf1ede7019ca7b",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_2",
                                  "value": "a196e9d4b283700303db501ed7279af6ec417e2d",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_3",
                                  "value": "b2a83b0ebf2f8374299a5b2bdfc31ea955ad7236",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_18",
                                  "value": "86da61107994a14c0d154fd87ca509f82377aa30",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_19",
                                  "value": "0000000000000000000000000000000000000000",
                                  "pcr_bank": "SHA1"
                              },
                              {
                                  "index": "pcr_22",
                                  "value": "0000000000000000000000000000000000000000",
                                  "pcr_bank": "SHA1"
                              }
                          ],
                          "sha2pcrs": [
                              {
                                  "index": "pcr_0",
                                  "value": "95a27f12d848b554f31760f3811b6091788769d08eee450ff6a7e323a02bc973",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_1",
                                  "value": "1491222c41d2bd84c4ea91a331edf9bb5981f7475fca91ab476bea5294939fba",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_2",
                                  "value": "0033ef74f1d62b9d95c641bfda24642bafb7a6b54d03d90655d7c5f9b1d47caf",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_3",
                                  "value": "3d458cfe55cc03ea1f443f1562beec8df51c75e14a9fcf9a7234a13f198e7969",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_18",
                                  "value": "d9e55bd1c570a6408fb1368f3663ae92747241fc4d2a3622cef0efadae284d75",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_19",
                                  "value": "0000000000000000000000000000000000000000000000000000000000000000",
                                  "pcr_bank": "SHA256"
                              },
                              {
                                  "index": "pcr_22",
                                  "value": "0000000000000000000000000000000000000000000000000000000000000000",
                                  "pcr_bank": "SHA256"
                              }
                          ],
                          "pcr_event_log_map": {
                              "SHA1": [
                                  {
                                      "pcr_index": "pcr_17",
                                      "event_log": [
                                          {
                                              "value": "7636dbbb8b8f40a9b7b7140e6da43e5bf2f531de",
                                              "label": "HASH_START",
                                              "info": {
                                                  "ComponentName": "HASH_START",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "9dcd8ac722c21e60652f0961ad6fe31938c4cc8f",
                                              "label": "BIOSAC_REG_DATA",
                                              "info": {
                                                  "ComponentName": "BIOSAC_REG_DATA",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "3c585604e87f855973731fea83e21fab9392d2fc",
                                              "label": "CPU_SCRTM_STAT",
                                              "info": {
                                                  "ComponentName": "CPU_SCRTM_STAT",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "9069ca78e7450a285173431b3e52c5c25299e473",
                                              "label": "LCP_CONTROL_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_CONTROL_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                              "label": "LCP_DETAILS_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_DETAILS_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                              "label": "STM_HASH",
                                              "info": {
                                                  "ComponentName": "STM_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "0cf169a95bd32a9a1dc4c3499ade207d30ab8895",
                                              "label": "OSSINITDATA_CAP_HASH",
                                              "info": {
                                                  "ComponentName": "OSSINITDATA_CAP_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "ff86d5446b2cc2e7e3319048715c00aabb7dcc4e",
                                              "label": "MLE_HASH",
                                              "info": {
                                                  "ComponentName": "MLE_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "274f929dbab8b98a7031bbcd9ea5613c2a28e5e6",
                                              "label": "NV_INFO_HASH",
                                              "info": {
                                                  "ComponentName": "NV_INFO_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "ca96de412b4e8c062e570d3013d2fccb4b20250a",
                                              "label": "tb_policy",
                                              "info": {
                                                  "ComponentName": "tb_policy",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "5b870664c50ead0421e4a67514724759aa9a9d5b",
                                              "label": "vmlinuz",
                                              "info": {
                                                  "ComponentName": "vmlinuz",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "f5fe4b87cd388943202e05442ebf0973c749cf3e",
                                              "label": "initrd",
                                              "info": {
                                                  "ComponentName": "initrd",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          }
                                      ],
                                      "pcr_bank": "SHA1"
                                  },
                                  {
                                      "pcr_index": "pcr_18",
                                      "event_log": [
                                          {
                                              "value": "a395b723712b3711a89c2bb5295386c0db85fe44",
                                              "label": "SINIT_PUBKEY_HASH",
                                              "info": {
                                                  "ComponentName": "SINIT_PUBKEY_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "3c585604e87f855973731fea83e21fab9392d2fc",
                                              "label": "CPU_SCRTM_STAT",
                                              "info": {
                                                  "ComponentName": "CPU_SCRTM_STAT",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "0cf169a95bd32a9a1dc4c3499ade207d30ab8895",
                                              "label": "OSSINITDATA_CAP_HASH",
                                              "info": {
                                                  "ComponentName": "OSSINITDATA_CAP_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "9069ca78e7450a285173431b3e52c5c25299e473",
                                              "label": "LCP_CONTROL_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_CONTROL_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                              "label": "LCP_AUTHORITIES_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_AUTHORITIES_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "274f929dbab8b98a7031bbcd9ea5613c2a28e5e6",
                                              "label": "NV_INFO_HASH",
                                              "info": {
                                                  "ComponentName": "NV_INFO_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                          {
                                              "value": "ca96de412b4e8c062e570d3013d2fccb4b20250a",
                                              "label": "tb_policy",
                                              "info": {
                                                  "ComponentName": "tb_policy",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          }
                                      ],
                                      "pcr_bank": "SHA1"
                                  }
                              ],
                              "SHA256": [
                                  {
                                      "pcr_index": "pcr_15",
                                      "event_log": [
                                         {
                                              "value": "ddbb7fd2b4aa332b6645b07d75e0b0edf4baed5813f879829acdb32c83a0382d",
                                              "label": "ISecL_Default_Workload_Flavor_v1.0-b68fd1b2-e34f-4637-b3de-f9da6b7f6511",
                                              "info": {
                                                  "ComponentName": "ISecL_Default_Workload_Flavor_v1.0-b68fd1b2-e34f-4637-b3de-f9da6b7f6511",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "1d1affd0a6d562848387ee3c36a14a8158a847fb1f32ee54c67b95ea16d4d9c5",
                                              "label": "ISecL_Default_Application_Flavor_v1.0_TPM2.0-c2e5999b-8083-4c7f-917d-e979190a4183",
                                              "info": {
                                                  "ComponentName": "ISecL_Default_Application_Flavor_v1.0_TPM2.0-c2e5999b-8083-4c7f-917d-e979190a4183",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          }
                                      ],
                                      "pcr_bank": "SHA256"
                                  },
                                  {
                                      "pcr_index": "pcr_17",
                                      "event_log": [
                                         {
                                              "value": "5d0220ffbceca9ca4e28215480c0280b1681328326c593743fa183f70ffbe834",
                                              "label": "HASH_START",
                                              "info": {
                                                  "ComponentName": "HASH_START",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "893d8ebf029907725f7deb657e80f7589c4ee52cdffed44547cd315f378f48c6",
                                              "label": "BIOSAC_REG_DATA",
                                              "info": {
                                                  "ComponentName": "BIOSAC_REG_DATA",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450",
                                              "label": "CPU_SCRTM_STAT",
                                              "info": {
                                                  "ComponentName": "CPU_SCRTM_STAT",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                              "label": "LCP_CONTROL_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_CONTROL_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                              "label": "LCP_DETAILS_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_DETAILS_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                              "label": "STM_HASH",
                                              "info": {
                                                  "ComponentName": "STM_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "d81fe96dc500bc43e1cd5800bef9d72b3d030bdb7e860e10c522e4246b30bd93",
                                              "label": "OSSINITDATA_CAP_HASH",
                                              "info": {
                                                  "ComponentName": "OSSINITDATA_CAP_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "236043f5120fce826392d2170dc84f2491367cc8d8d403ab3b83ec24ea2ca186",
                                              "label": "MLE_HASH",
                                              "info": {
                                                  "ComponentName": "MLE_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b",
                                              "label": "NV_INFO_HASH",
                                              "info": {
                                                  "ComponentName": "NV_INFO_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67",
                                              "label": "tb_policy",
                                              "info": {
                                                  "ComponentName": "tb_policy",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "348a6284f46123a913681d53a201c05750d4527483ceaa2a2adbc7dda52cf506",
                                              "label": "vmlinuz",
                                              "info": {
                                                  "ComponentName": "vmlinuz",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "d018a266352fee8f1e9453bd6a3977bea33ea9ac79c84c240c6d7e29d93d0115",
                                              "label": "initrd",
                                              "info": {
                                                  "ComponentName": "initrd",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          }
                                      ],
                                      "pcr_bank": "SHA256"
                                  },
                                  {
                                      "pcr_index": "pcr_18",
                                      "event_log": [
                                         {
                                              "value": "da256395df4046319ef0af857d377a729e5bc0693429ac827002ffafe485b2e7",
                                              "label": "SINIT_PUBKEY_HASH",
                                              "info": {
                                                  "ComponentName": "SINIT_PUBKEY_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450",
                                              "label": "CPU_SCRTM_STAT",
                                              "info": {
                                                  "ComponentName": "CPU_SCRTM_STAT",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "d81fe96dc500bc43e1cd5800bef9d72b3d030bdb7e860e10c522e4246b30bd93",
                                              "label": "OSSINITDATA_CAP_HASH",
                                              "info": {
                                                  "ComponentName": "OSSINITDATA_CAP_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                              "label": "LCP_CONTROL_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_CONTROL_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                              "label": "LCP_AUTHORITIES_HASH",
                                              "info": {
                                                  "ComponentName": "LCP_AUTHORITIES_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b",
                                              "label": "NV_INFO_HASH",
                                              "info": {
                                                  "ComponentName": "NV_INFO_HASH",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          },
                                         {
                                              "value": "27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67",
                                              "label": "tb_policy",
                                              "info": {
                                                  "ComponentName": "tb_policy",
                                                  "EventName": "OpenSource.EventName"
                                              }
                                          }
                                      ],
                                      "pcr_bank": "SHA256"
                                  }
                              ]
                          }
                      },
                      "binding_key_certificate": "MIIFITCCA4mgAwIBAgIJAKrvQp6ScTi1MA0GCSqGSIb3DQEBDAUAMBsxGTAXBgNVBAMTEG10d2lsc29uLXBjYS1haWswHhcNMjAwNDE1MDgwMzE2WhcNMzAwNDEzMDgwMzE2WjAlMSMwIQYDVQQDDBpDTj1CaW5kaW5nX0tleV9DZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANJgmnV3e9VBFxZqKQP1FszztRQ0JXAlhE6SEa+1c8oTPbEG83s8nfprQwEaH89WBVm3QOe+Pl+ZS01E3jZ0asFHqkicnXh8nyWcpPY8JKQ8qRJzC68rvw2zgMo1QZKg65enTRIEABO8uFZKqye7xubJZOnanDPMbprer+Q+brdm+muOrHbROmY18utVnY3IciOPC2Hv+IC+4xzcli9PlkUxsUnmNf9pz85sLt2lft6gun4aGMh2ute8YTL6ZLNZ8nvZN8T8+7/IV3/Pklz4qtMyFxtpHIP2UUxlptk6uTvjsS4Nnwt5YdTuYm4yWzIFB7SApQsDbB4WtyPW9oRcRhkCAwEAAaOCAdwwggHYMA4GA1UdDwEB/wQEAwIFIDCBnQYHVQSBBQMCKQSBkf9UQ0eAFwAiAAs8+xFev3D2D4WG6PPhDWJey+Q/rVqgI3NYt79/YbizCwAEAP9VqgAAAAAANrGOAAAABgAAAAEBAAcAPgAMNgAAIgALta+AaKE5Tb3YIl7i/P+7tFLzXKZFlI+aWppdCEXJfw0AIgALScYOkvDeijOdoEy0phrYroOncXXSpNZ9M2JjdylBTlwwggEUBghVBIEFAwIpAQSCAQYAFAALAQBJQMBtwZmONe+QFGtDxzIrcHEg+NoQ8hQVpr+5Vt2knUAEon6gJgqz1gSWm0f0Q8TRzRVOutPxtNZMSvokbfHcdYyjmSwoIMATeK+YDieGuL+4w0ezg30lYjRukFOTxA2fw7arNkL7J/fiXGOAAUqDM+z7k4/y8bfRwBHZiN3uxbroR9SwiniPYmxUMLiIPLNMJVKdDMQLzA6z+PTSc8pxf1d78q7y/L+9OFfrThj+m6B4c5qWNHmZc37JG854QDP41FMJI9/Q1cQK6iZHapZPjTp9ikQuF+aegOxzVfcxeJI+wjkwqcGgeEfL+xFx2nhQ+1MSQrZ/uFiZhggdgqtQMA4GCFUEgQUDAikCBAIAADANBgkqhkiG9w0BAQwFAAOCAYEATBlbRClIKh5a7N0kcdEs94Z/5Vzrql8mizEe9/+xXd+Pp9ndyEGjrq3DSsMiOQyt0zQ39TGDzPOzuBQ5DG6A/w21MGVKGO1w15J7Wxzpez7Gd76HwXGHIiJnJZ5Llz9s7IWDqU5fIra/t4qWZzSxpZOVgpBe/9QzIVjgV44sXtjUahC7pnWusEPXa8kcLrdj+Y9EiMbuAldcDLmduRhDO/ex+StRs0b21BfF6sjCud5Md28r8W5/NEuXOqaKYWIFbGjD5qflCL2stEfbJFnIASiBS9dYYFAPj+fQWJzOTtxtk7lfAIz2PD3TJwHWD+HyMd5PsaHOnTw9GEKz3NDdmSc3juhnfi5RNIlFKAtYUjQ+HQjYvOhNOZTPB0S8U/91XV6ph0bTWdxJh6/KUt9jxnASapeVkoS18Q4K5sEmB/iHU0/HY56oDsrjRibX/sWfh9XG2eB3U8DlQkFtyVGvuuD3ym7cPirhVxTUiSOYa/Z6OJ04Gbaya4rWS7ZLBStD",
                      "measurement_xmls": [
                          "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Measurement xmlns=\"lib:wml:measurements:1.0\" Label=\"ISecL_Default_Workload_Flavor_v1.0\" Uuid=\"b68fd1b2-e34f-4637-b3de-f9da6b7f6511\" DigestAlg=\"SHA384\"><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/workload-agent/bin\">e64e6d5afaad329d94d749e9b72c76e23fd3cb34655db10eadab4f858fb40b25ff08afa2aa6dbfbf081e11defdb58d5a</Dir><File Path=\"/opt/workload-agent/bin/wlagent\">ac8b967514f0a4c0ddcd87ee6cfdd03ffc5e5dd73598d40b8f6b6ef6dd606040a5fc31667908561093dd28317dfa1033</File><CumulativeHash>2ae673d241fed6e55d89e33a3ae8c6d127ed228e4afedfabfc2409c2d7bf51714d469786f948935c0b25c954904a2302</CumulativeHash></Measurement>",
                          "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Measurement xmlns=\"lib:wml:measurements:1.0\" Label=\"ISecL_Default_Application_Flavor_v1.0_TPM2.0\" Uuid=\"c2e5999b-8083-4c7f-917d-e979190a4183\" DigestAlg=\"SHA384\"><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/bin\">b0d5cba0bb12d69d8dd3e92bdad09d093a34dd4ea30aea63fb31b9c26d9cbf0e84016fa9a80843b473e1493a427aa63a</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/dracut_files\">1d9c8eb15a49ea65fb96f2b919c42d5dfd30f4e4c1618205287345aeb4669d18113fe5bc87b033aeef2aeadc2e063232</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/initrd_hooks\">77b913422748a8e62f0720d739d54b2fa7856ebeb9e76fab75c41c375f2ad77b7b9ec5849b20d857e24a894a615d2de7</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/lib\">b03eb9d3b6fa0d338fd4ef803a277d523ab31db5c27186a283dd8d1fe0e7afca9bf26b31b1099833b0ba398dbe3c02fb</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/mkinitrd_files\">6928eb666f6971af5da42ad785588fb9464465b12c78f7279f46f9f8e04ae428d4872e7813671a1390cc8ed433366247</Dir><File Path=\"/opt/tbootxm/bin/tpmextend\">b936d9ec4b8c7823efb01d946a7caa074bdfffdbd11dc20108ba771b8ef65d8efc72b559cd605b1ba0d70ef99e84ba55</File><File Path=\"/opt/tbootxm/bin/measure\">c72551ddfdfab6ec901b7ed8dc28a1b093793fd590d2f6c3b685426932013ca11a69aeb3c04a31278829f653a24deeb1</File><File Path=\"/opt/tbootxm/bin/configure_host.sh\">8675ca78238f0cf6e09d0d20290a7a2b9837e2a1c19a4a0a7a8c226820c33b6a6538c2f94bb4eb78867bd1a87a859a2c</File><File Path=\"/opt/tbootxm/bin/generate_initrd.sh\">4708ed8233a81d6a17b2c4b74b955f27612d2cc04730ad8919618964209ce885cea9011e00236de56a2239a524044db4</File><File Path=\"/opt/tbootxm/bin/measure_host\">7455104eb95b1ee1dfb5487d40c8e3a677f057da97e2170d66a52b555239a4b539ca8122ee25b33bb327373aac4e4b7a</File><File Path=\"/opt/tbootxm/bin/tboot-xm-uninstall.sh\">7450bc939548eafc4a3ba9734ad1f96e46e1f46a40e4d12ad5b5f6b5eb2baf1597ade91edb035d8b5c1ecc38bde7ee59</File><File Path=\"/opt/tbootxm/bin/functions.sh\">8526f8aedbe6c4bde3ba331b0ce18051433bdabaf8991a269aff7a5306838b13982f7d1ead941fb74806fc696fef3bf0</File><File Path=\"/opt/tbootxm/dracut_files/check\">6f5949b86d3bf3387eaff8a18bb5d64e60daff9a2568d0c7eb90adde515620b9e5e9cd7d908805c6886cd178e7b382e1</File><File Path=\"/opt/tbootxm/dracut_files/install\">e2fc98a9292838a511d98348b29ba82e73c839cbb02051250c8a8ff85067930b5af2b22de4576793533259fad985df4a</File><File Path=\"/opt/tbootxm/dracut_files/module-setup.sh\">0a27a9e0bff117f30481dcab29bb5120f474f2c3ea10fa2449a9b05123c5d8ce31989fcd986bfa73e6c25c70202c50cb</File><File Path=\"/opt/tbootxm/lib/libwml.so\">56a04d0f073f0eb2a4f851ebcba79f7080553c27fa8d1f7d4a767dc849015c9cc6c9abe937d0e90d73de27814f28e378</File><File Path=\"/opt/tbootxm/lib/create_menuentry.pl\">79770fb02e5a8f6b51678bde4d017f23ac811b1a9f89182a8b7f9871990dbbc07fd9a0578275c405a02ac5223412095e</File><File Path=\"/opt/tbootxm/lib/update_menuentry.pl\">cb6754eb6f2e39e43d420682bc91c83b38d63808b603c068a3087affb856703d3ae564892ac837cd0d4453e41b2a228e</File><File Path=\"/opt/tbootxm/lib/remove_menuentry.pl\">baf4f9b63ab9bb1e8616e3fb037580e38c0ebd4073b3b7b645e0e37cc7f0588f4c5ed8b744e9be7689aa78d23df8ec4c</File><File Path=\"/opt/tbootxm/initrd_hooks/tcb\">430725e0cb08b290897aa850124f765ae0bdf385e6d3b741cdc5ff7dc72119958fbcce3f62d6b6d63c4a10c70c18ca98</File><File Path=\"/opt/tbootxm/mkinitrd_files/setup-measure_host.sh\">2791f12e447bbc88e25020ddbf5a2a8693443c5ca509c0f0020a8c7bed6c813cd62cb4c250c88491f5d540343032addc</File><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/trustagent/bin\">3519466d871c395ce1f5b073a4a3847b6b8f0b3e495337daa0474f967aeecd48f699df29a4d106288f3b0d1705ecef75</Dir><File Path=\"/opt/trustagent/bin/module_analysis.sh\">2327e72fa469bada099c5956f851817b0c8fa2d6c43089566cacd0f573bf62e7e8dd10a2c339205fb16c3956db6518a9</File><File Path=\"/opt/trustagent/bin/module_analysis_da.sh\">2a99c3e80e99d495a6b8cce8e7504af511201f05fcb40b766a41e6af52a54a34ea9fba985d2835aef929e636ad2a6f1d</File><File Path=\"/opt/trustagent/bin/module_analysis_da_tcg.sh\">0f47a757c86e91a3a175cd6ee597a67f84c6fec95936d7f2c9316b0944c27cb72f84e32c587adb456b94e64486d14242</File><CumulativeHash>7425a5806dc8a5aacd508e4d6866655bf475947cc8bb630a03ff42b898ee8a7d8fd3ca71c3e1dacdc0f375bcbaf11efc</CumulativeHash></Measurement>"
                      ]
                  }
              }
          ]
        }
  /host-status/{hoststatus_id}:
    get:
      description: |
        This API is used to retrieve an individual HostStatus record.

        A host status gives the current state of a host. When a host is registered or created, the backend queue, flavor verification
        process is initiated for that host, and a connection is attempted to the host. Other activities will also automatically trigger
        backend queue flavor verifications which may force connections to the host.
        If a successful connection is made, the host status will reflect a CONNECTED state and include the host manifest.

        The host manifest contains information collected from the host that is used to verify the host against respective flavors
        within the host’s associated flavor group.

        If the connection fails or a problem occurs when attempting to retrieve the required information from the host, the host status will
        reflect an error state.

        Below is a list of applicable Host States:
        | Host State                     | Description                                     |
        |--------------------------------|-------------------------------------------------|
        | CONNECTED                      | Host is in a good, connected state |
        | QUEUE                          | Host is currently in the flavor verification queue  |
        | CONNECTION_FAILURE             | A connection failure occurred  |
        | UNAUTHORIZED                   | The Host Verification Service is NOT authorized to access the host  |
        | AIK_NOT_PROVISIONED            | Host AIK certificate is not provisioned  |
        | EC_NOT_PRESENT                 | Host Endorsement Certificate (EC) is not present  |
        | MEASURED_LAUNCH_FAILURE        | Host failed to launch TXT  |
        | TPM_OWNERSHIP_FAILURE          |  Host agent does not have TPM ownership  |
        | TPM_NOT_PRESENT                |  No TPM exists on the host  |
        | UNSUPPORTED_TPM                |  Host TPM version is unsupported  |
        | UNKNOWN                        |  Host is in unknown state  |

        Returns - The serialized Host Go struct object that was retrieved.
      operationId: RetrieveHostStatus
      parameters:
      - description: Unique ID of the HostStatus record.
        format: uuid
        in: path
        name: hoststatus_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the HostStatus record.
          schema:
            $ref: '#/definitions/HostStatus'
        "404":
          description: HostStatus record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostStatuses
      x-permissions: host_status:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/host-status/055dd911-6e59-4374-9761-837250ad0113
      x-sample-call-output: |
        {
            "id": "06f9d8c6-0102-49e6-ae7a-0455de25f282",
            "host_id": "91b022fc-3f9b-4269-999c-b39af2eac1eb",
            "created": "2020-07-20T13:52:25.84078Z",
            "status": {
                "host_state": "CONNECTED",
                "last_time_connected": "2020-07-20T06:52:25.840740767-07:00"
            },
            "host_manifest": {
                "aik_certificate": "MIIDLzCCAZegAwIBAgIRAN+l/AlQRBLsXNHOJ4lxh8gwDQYJKoZIhvcNAQELBQAwIjEgMB4GA1UEAxMXSFZTIFByaXZhY3kgQ2VydGlmaWNhdGUwHhcNMjAwNzIwMTM0NzQzWhcNMjUwNzIwMTM0NzQzWjAAMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlVfaCXwhDrp61SyHCCibvsMnsEMsm5NE679e9alFmDPzQFSNyzfcUkx1FYtpmEde/f4lKmupTkQYGhhSDoS3haPEn6W1s6zBKc9WZwrdViRRJvku0tbtZ2NgCxmP/dTQ0jdWfHd7i1/DNmx1L/vyVp+Cf1Dvk0/y7mEJXoCuL2x4sz0rvaru0Qb/THBX/h+bZiUMrmGvldcxMzuWNBGA+bYZ9rch8g6z5JR9XsnC46ssE7g2jidBccmka8GMMn/lAnismTnL8mRWNOa8Uq5VtdlVPFkoM02eIg54N7TJZpVPxIUducfJGF2GP9nI9Nz+1+Zz275Cq1lC+gA+QKvOkwIDAQABowIwADANBgkqhkiG9w0BAQsFAAOCAYEAqdx0uH3VX9U/Rh/JdYdlGTPsD6B6En/2SI92gKVVDC8bYolB5etZIocJpc8385XNMXbA8WX8lFxws12KeB6bdFXuN/wtpJWMbuFnsb7/QPB4C+NznZFjRebxmTmNOZMhBKwhGRDVkevaPV/uFJcXqI0f10lKDiZjG4I2t3y0DJJMTAIg9mz6h7BGGnhmdyfLWwR56bHnJGO7t5tz7nBfbUhJ7KTBjRHyb0G1DUiT2DOit8+V0eRWmqsPk0hQAL0WzR93Ckw/wWWvM32OV768XKWKFPHNYeZIQRZglejg/PjYOU2ppz0w5M0Z/CzY3aRrwX0rkC9CqKWgkzwQrElk1sU6hE9DQh+uw9KdN2rtZ3urTLRVRD6ojqwyznl8gJ2uq6G92HGEPzq9orLLxNIcXtMrJeHsXK3r5zyos8s2fHLjR9A2Bqg/gK7QzzEJzbUoHvjp/i86Xs5jiwvwY7dE3SSLwjIbhxgCKZ6j2CKAKxmaZVbHurh3nPsgruQ/WnDG",
                "asset_tag_digest": "l2m29vWCZmwLFAhHE9P3XlN/xXbC6hNQeFiV/7INjMvier/4h04HYyeDaaL4iTxu",
                "host_info": {
                    "os_name": "RedHatEnterprise",
                    "os_version": "8.1",
                    "bios_version": "SE5C620.86B.00.01.0015.110720180833",
                    "vmm_name": "Virsh",
                    "vmm_version": "4.5.0",
                    "processor_info": "54 06 05 00 FF FB EB BF",
                    "host_name": "myhost2",
                    "bios_name": "Intel Corporation",
                    "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
                    "process_flags": "FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE-36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE",
                    "no_of_sockets": "2",
                    "tboot_installed": "true",
                    "hardware_features": {
                        "TXT": {
                            "enabled": "true"
                        },
                        "TPM": {
                            "enabled": "true",
                            "meta": {
                                "tpm_version": "2.0",
                                "pcr_banks": "SHA1_SHA256"
                            }
                        }
                    },
                    "installed_components": [
                        "tagent",
                        "wlagent"
                    ]
                },
                "pcr_manifest": {
                    "sha1pcrs": [
                        {
                            "index": "pcr_0",
                            "value": "d1f5a8283c75db86938aef334ba11ed4ff613a4e",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_1",
                            "value": "58c94d1d346ade551354b585a771d734d50cd187",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_2",
                            "value": "63311d0a7e2b22dd18554946a39776645c9d20ef",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_3",
                            "value": "b2a83b0ebf2f8374299a5b2bdfc31ea955ad7236",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_4",
                            "value": "45e5d65ceb021729f860b2bea40a8679e0a69dda",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_5",
                            "value": "e397ec446342c88fde23940025dc00d07089b015",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_6",
                            "value": "b2a83b0ebf2f8374299a5b2bdfc31ea955ad7236",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_7",
                            "value": "518bd167271fbb64589c61e43d8c0165861431d8",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_8",
                            "value": "b45858058ced5e553558c6ebee9b04c5fb678ce5",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_9",
                            "value": "b049d9f5b64eaa1ba64576c5c5ead28bae8200c5",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_10",
                            "value": "e4276735b646ac12f950848faa5dfc5fa3f2559d",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_11",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_12",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_13",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_14",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_15",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_16",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_17",
                            "value": "fd9341534c3fbe2eccf5904e42822a3dd2e7dc67",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_18",
                            "value": "86da61107994a14c0d154fd87ca509f82377aa30",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_19",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_20",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_21",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_22",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        },
                        {
                            "index": "pcr_23",
                            "value": "0000000000000000000000000000000000000000",
                            "pcr_bank": "SHA1"
                        }
                    ],
                    "sha2pcrs": [
                        {
                            "index": "pcr_0",
                            "value": "d19f11e851d901297961e6a85e934c3baa27faeaa3f47d3288e90b480091d12d",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_1",
                            "value": "3fdda2b900db244d8192089bddddb272b2879efde2ae9a9e4bc590a52866e4e6",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_2",
                            "value": "352b1c6afdc287cc95a563d0f04ed43491fd94f1599f62b0b91b20194873f104",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_3",
                            "value": "3d458cfe55cc03ea1f443f1562beec8df51c75e14a9fcf9a7234a13f198e7969",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_4",
                            "value": "8570fd50e3c21aa17ab3d777de5e24c6e5dcb94f198db1430e76c0f8d845a16c",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_5",
                            "value": "3f7117f945335ff6cee453ff88f2794fef44c6185124344c88e25265a1aa9c74",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_6",
                            "value": "3d458cfe55cc03ea1f443f1562beec8df51c75e14a9fcf9a7234a13f198e7969",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_7",
                            "value": "65caf8dd1e0ea7a6347b635d2b379c93b9a1351edc2afc3ecda700e534eb3068",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_8",
                            "value": "df25ce52349e168ce827d76c154b697828db6a646662dcd79111a869ec5a805f",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_9",
                            "value": "6a6832ae313339d01a7a647f574078ac1467bb9f4b25269d55da88a0ca0c3e83",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_10",
                            "value": "ab7448ad07e8361397213888d596462ea576683a5089e89e7f0f89d6287c9769",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_11",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_12",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_13",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_14",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_15",
                            "value": "d8549ec3e68399eeef05fa44b1552ea4cd459bf6476e62716348651662bee73f",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_16",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_17",
                            "value": "12ed2e819c021aae0f368d6100b6c100b6a1f36e33fc506132a26184834714bf",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_18",
                            "value": "d9e55bd1c570a6408fb1368f3663ae92747241fc4d2a3622cef0efadae284d75",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_19",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_20",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_21",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_22",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        },
                        {
                            "index": "pcr_23",
                            "value": "0000000000000000000000000000000000000000000000000000000000000000",
                            "pcr_bank": "SHA256"
                        }
                    ],
                    "pcr_event_log_map": {
                        "SHA1": [
                            {
                                "pcr_index": "pcr_17",
                                "event_log": [
                                   {
                                        "value": "69fba4144e24d63e9fa677b20dd781e84490f038",
                                        "label": "HASH_START",
                                        "info": {
                                            "ComponentName": "HASH_START",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "45b0e0ccabd8160d0d019d80c5622cc5415c71a1",
                                        "label": "BIOSAC_REG_DATA",
                                        "info": {
                                            "ComponentName": "BIOSAC_REG_DATA",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "3c585604e87f855973731fea83e21fab9392d2fc",
                                        "label": "CPU_SCRTM_STAT",
                                        "info": {
                                            "ComponentName": "CPU_SCRTM_STAT",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "9069ca78e7450a285173431b3e52c5c25299e473",
                                        "label": "LCP_CONTROL_HASH",
                                        "info": {
                                            "ComponentName": "LCP_CONTROL_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                        "label": "LCP_DETAILS_HASH",
                                        "info": {
                                            "ComponentName": "LCP_DETAILS_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                        "label": "STM_HASH",
                                        "info": {
                                            "ComponentName": "STM_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "0cf169a95bd32a9a1dc4c3499ade207d30ab8895",
                                        "label": "OSSINITDATA_CAP_HASH",
                                        "info": {
                                            "ComponentName": "OSSINITDATA_CAP_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "ff86d5446b2cc2e7e3319048715c00aabb7dcc4e",
                                        "label": "MLE_HASH",
                                        "info": {
                                            "ComponentName": "MLE_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "274f929dbab8b98a7031bbcd9ea5613c2a28e5e6",
                                        "label": "NV_INFO_HASH",
                                        "info": {
                                            "ComponentName": "NV_INFO_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "ca96de412b4e8c062e570d3013d2fccb4b20250a",
                                        "label": "tb_policy",
                                        "info": {
                                            "ComponentName": "tb_policy",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "f3b26409294f95d0c60ea7c15ac260a2f3215e9d",
                                        "label": "vmlinuz",
                                        "info": {
                                            "ComponentName": "vmlinuz",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "2ef8f9f592d7c61b7a9f6bca452060f89c013c7a",
                                        "label": "initrd",
                                        "info": {
                                            "ComponentName": "initrd",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    }
                                ],
                                "pcr_bank": "SHA1"
                            },
                            {
                                "pcr_index": "pcr_18",
                                "event_log": [
                                   {
                                        "value": "a395b723712b3711a89c2bb5295386c0db85fe44",
                                        "label": "SINIT_PUBKEY_HASH",
                                        "info": {
                                            "ComponentName": "SINIT_PUBKEY_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "3c585604e87f855973731fea83e21fab9392d2fc",
                                        "label": "CPU_SCRTM_STAT",
                                        "info": {
                                            "ComponentName": "CPU_SCRTM_STAT",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "0cf169a95bd32a9a1dc4c3499ade207d30ab8895",
                                        "label": "OSSINITDATA_CAP_HASH",
                                        "info": {
                                            "ComponentName": "OSSINITDATA_CAP_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "9069ca78e7450a285173431b3e52c5c25299e473",
                                        "label": "LCP_CONTROL_HASH",
                                        "info": {
                                            "ComponentName": "LCP_CONTROL_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "5ba93c9db0cff93f52b521d7420e43f6eda2784f",
                                        "label": "LCP_AUTHORITIES_HASH",
                                        "info": {
                                            "ComponentName": "LCP_AUTHORITIES_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "274f929dbab8b98a7031bbcd9ea5613c2a28e5e6",
                                        "label": "NV_INFO_HASH",
                                        "info": {
                                            "ComponentName": "NV_INFO_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                   {
                                        "value": "ca96de412b4e8c062e570d3013d2fccb4b20250a",
                                        "label": "tb_policy",
                                        "info": {
                                            "ComponentName": "tb_policy",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    }
                                ],
                                "pcr_bank": "SHA1"
                            }
                        ],
                        "SHA256": [
                            {
                                "pcr_index": "pcr_15",
                                "event_log": [
                                    {
                                        "value": "574d669fc8cae83fe53f32fbed23e581d78e0ab9307c8aa0ba1f5615f1194d43",
                                        "label": "ISecL_Default_Application_Flavor_v2.2_TPM2.0-77a13c96-c04a-4d21-84f4-3b7c017d076d",
                                        "info": {
                                            "ComponentName": "ISecL_Default_Application_Flavor_v2.2_TPM2.0-77a13c96-c04a-4d21-84f4-3b7c017d076d",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "2dff3ae87e6dd29fb60c1c4b3bec614fbe5859eb84712318ecfbf41e7511e923",
                                        "label": "ISecL_Default_Workload_Flavor_v2.2-eb01c331-57aa-48cd-95db-87c16f1d1102",
                                        "info": {
                                            "ComponentName": "ISecL_Default_Workload_Flavor_v2.2-eb01c331-57aa-48cd-95db-87c16f1d1102",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    }
                                ],
                                "pcr_bank": "SHA256"
                            },
                            {
                                "pcr_index": "pcr_17",
                                "event_log": [
                                    {
                                        "value": "940a487b3a2b3a82858b18c20f55ad9c73522f43aab071f62350093bd7c2d6ba",
                                        "label": "HASH_START",
                                        "info": {
                                            "ComponentName": "HASH_START",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "7980d1a2034e18a33da6fde28ddd8a296c7147a3e4cea6dc32997f4fc40a97a5",
                                        "label": "BIOSAC_REG_DATA",
                                        "info": {
                                            "ComponentName": "BIOSAC_REG_DATA",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450",
                                        "label": "CPU_SCRTM_STAT",
                                        "info": {
                                            "ComponentName": "CPU_SCRTM_STAT",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                        "label": "LCP_CONTROL_HASH",
                                        "info": {
                                            "ComponentName": "LCP_CONTROL_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                        "label": "LCP_DETAILS_HASH",
                                        "info": {
                                            "ComponentName": "LCP_DETAILS_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                        "label": "STM_HASH",
                                        "info": {
                                            "ComponentName": "STM_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "d81fe96dc500bc43e1cd5800bef9d72b3d030bdb7e860e10c522e4246b30bd93",
                                        "label": "OSSINITDATA_CAP_HASH",
                                        "info": {
                                            "ComponentName": "OSSINITDATA_CAP_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "236043f5120fce826392d2170dc84f2491367cc8d8d403ab3b83ec24ea2ca186",
                                        "label": "MLE_HASH",
                                        "info": {
                                            "ComponentName": "MLE_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b",
                                        "label": "NV_INFO_HASH",
                                        "info": {
                                            "ComponentName": "NV_INFO_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67",
                                        "label": "tb_policy",
                                        "info": {
                                            "ComponentName": "tb_policy",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "7b533984a9a209e70c1770205df45c7ca671cf2f90e0a83737949324e3ec1778",
                                        "label": "vmlinuz",
                                        "info": {
                                            "ComponentName": "vmlinuz",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "2b6b6bcd39f809e87b14a8a47e751a6919c4ee57b46319f29fa35379c8d84f7a",
                                        "label": "initrd",
                                        "info": {
                                            "ComponentName": "initrd",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    }
                                ],
                                "pcr_bank": "SHA256"
                            },
                            {
                                "pcr_index": "pcr_18",
                                "event_log": [
                                    {
                                        "value": "da256395df4046319ef0af857d377a729e5bc0693429ac827002ffafe485b2e7",
                                        "label": "SINIT_PUBKEY_HASH",
                                        "info": {
                                            "ComponentName": "SINIT_PUBKEY_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450",
                                        "label": "CPU_SCRTM_STAT",
                                        "info": {
                                            "ComponentName": "CPU_SCRTM_STAT",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "d81fe96dc500bc43e1cd5800bef9d72b3d030bdb7e860e10c522e4246b30bd93",
                                        "label": "OSSINITDATA_CAP_HASH",
                                        "info": {
                                            "ComponentName": "OSSINITDATA_CAP_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                        "label": "LCP_CONTROL_HASH",
                                        "info": {
                                            "ComponentName": "LCP_CONTROL_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d",
                                        "label": "LCP_AUTHORITIES_HASH",
                                        "info": {
                                            "ComponentName": "LCP_AUTHORITIES_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b",
                                        "label": "NV_INFO_HASH",
                                        "info": {
                                            "ComponentName": "NV_INFO_HASH",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    },
                                    {
                                        "value": "27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67",
                                        "label": "tb_policy",
                                        "info": {
                                            "ComponentName": "tb_policy",
                                            "EventName": "OpenSource.EventName"
                                        }
                                    }
                                ],
                                "pcr_bank": "SHA256"
                            }
                        ]
                    }
                },
                "binding_key_certificate": "MIIFHDCCA4SgAwIBAgIRA/K2fjaHwJVEX8DlX0VdW9EwDQYJKoZIhvcNAQEMBQAwIjEgMB4GA1UEAxMXSFZTIFByaXZhY3kgQ2VydGlmaWNhdGUwHhcNMjAwNzE5MTcxMjEzWhcNMzAwNzE5MTcxMjEzWjAiMSAwHgYDVQQDDBdCaW5kaW5nX0tleV9DZXJ0aWZpY2F0ZTCCASEwDQYJKoZIhvcNAQEBBQADggEOADCCAQkCggEBAJnSZHhEg4fqk3OU+H59y3DiWEg1hWySu/qgnpnUWZKrzWPLvyQdeBBRO6hIT43bdhXWhfiu1AOgduBOGcUmBqLM9RvX1+HhUWZ2FcfsH/prs6hxWRDa6BRvxPYmFZoietT2JtrBn8kq6Smeflo3VHIef52qFWLoGVrv+5V79yZmjMfcCq4HMvklR2ELiUVfDCfJdAnxp5tQak+NOfzQhiHbjPV/5SKFvS60e1qMX+7DaIMzeHuBZLKU4kytGFEHkcPkdwvALpQsNhnnc0zLFRyeAZVXcJYc4fE7MGkIm2yyGpW0izDDQnlCghKaLxsh/CoKzrB1+zyxDeGQDRfPbC0CAgEAo4IBzDCCAcgwDgYDVR0PAQH/BAQDAgWgMIGdBgdVBIEFAwIpBIGR/1RDR4AXACIACx6Zgv7MibJQ6gE53QmMHmHU9u5uKGObJwgIhFLqahZZAAQA/1WqAAAAANpTgn8AAAAJAAAAAQEABwAoAAgyAAAiAAvML2xwknp3hNsQ8Fa4xiVp+Gm/3FrOrl5nM927N2TimAAiAAs70Q4QKWR445dxMBYOHECnHeh+vsYYBOJKj9XhBfE8yDCCARQGCFUEgQUDAikBBIIBBgAUAAsBAGBXD+UihZDF3CgMRNtI03JPtsfQz8j4ErnyazO3qHSbHlIKwG2PG3lX8mZhzOSXN3TTa9nyqGd1KCdR5QPwW+AzzWRWKvq36X3bW1otxqI2VSbnkMBzEgt4jZStwPoPeztpyaityB/UZ4wmiGtLAvbnEEJBtpVa7Je6tlPOjQfP31izthGkJZfsC0s6U+FT5aPu6HVPQqmmgLJgreUStqidEAxJo16Skg5Ft3RoVcOYq6PIOb/6h74exbrhb6OhwwkbJA3ysaukYvTZid1zaHx+RhyZ5bElEISLi6ey1zVKZn+xOxwJ810ELo3MeolGDVGGIartkMboEJ2gQHwmBAwwDQYJKoZIhvcNAQEMBQADggGBAJ3hp8wW4cp9dwpnV8kEIbpOm48HvuFYy8j9LmcHGQZQcis2cAQnZycG00qmtCNPUqGhhk8+cFNoE4F67IdTKPDITsBdEwp0SEuYWqK0P4XkK1o+KfHWzyscJSErgX6nQMMvDwKOTqKmgRRRUj4povd+1Ov/LpH73Lh1gyJLtzADFBsF1t+gFk+l2jH8q/Pix10DS+VJtY6PLwGCJbuMmVzo8Qlh7SpJ+olB4T3jIyiMNB2RgJTNcUiWzAOtb35YVuXdpcr+9Yptaz/HEQTDW1HOfI7VwGGbfFdcGIK2ArvdprI2gyBZcGc9WVkOrciyXcrEP5La87AClWAM0Irv93oxSnAU6mmorsaWyooxf4dUbv3RXGTou8CENEFdg8g+REQ2wZEsYiBwzyFXZPEe0QbZbfVuveHhuYiJ2YW3EQ2SdRhI/4yprry/IdCB5SIkWzktrzMX4CnC4q72FXEMUsfFFNcreg2Tj1sH94uhOnhQubUtaaswCxFHpazbuS9V9Q==",
                "measurement_xmls": [
                    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Measurement xmlns=\"lib:wml:measurements:1.0\" Label=\"ISecL_Default_Application_Flavor_v2.2_TPM2.0\" Uuid=\"77a13c96-c04a-4d21-84f4-3b7c017d076d\" DigestAlg=\"SHA384\"><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/bin\">b0d5cba0bb12d69d8dd3e92bdad09d093a34dd4ea30aea63fb31b9c26d9cbf0e84016fa9a80843b473e1493a427aa63a</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/dracut_files\">1d9c8eb15a49ea65fb96f2b919c42d5dfd30f4e4c1618205287345aeb4669d18113fe5bc87b033aeef2aeadc2e063232</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/initrd_hooks\">77b913422748a8e62f0720d739d54b2fa7856ebeb9e76fab75c41c375f2ad77b7b9ec5849b20d857e24a894a615d2de7</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/lib\">b03eb9d3b6fa0d338fd4ef803a277d523ab31db5c27186a283dd8d1fe0e7afca9bf26b31b1099833b0ba398dbe3c02fb</Dir><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/tbootxm/mkinitrd_files\">6928eb666f6971af5da42ad785588fb9464465b12c78f7279f46f9f8e04ae428d4872e7813671a1390cc8ed433366247</Dir><File Path=\"/opt/tbootxm/bin/tpmextend\">b936d9ec4b8c7823efb01d946a7caa074bdfffdbd11dc20108ba771b8ef65d8efc72b559cd605b1ba0d70ef99e84ba55</File><File Path=\"/opt/tbootxm/bin/measure\">c72551ddfdfab6ec901b7ed8dc28a1b093793fd590d2f6c3b685426932013ca11a69aeb3c04a31278829f653a24deeb1</File><File Path=\"/opt/tbootxm/bin/configure_host.sh\">8675ca78238f0cf6e09d0d20290a7a2b9837e2a1c19a4a0a7a8c226820c33b6a6538c2f94bb4eb78867bd1a87a859a2c</File><File Path=\"/opt/tbootxm/bin/generate_initrd.sh\">4708ed8233a81d6a17b2c4b74b955f27612d2cc04730ad8919618964209ce885cea9011e00236de56a2239a524044db4</File><File Path=\"/opt/tbootxm/bin/measure_host\">7455104eb95b1ee1dfb5487d40c8e3a677f057da97e2170d66a52b555239a4b539ca8122ee25b33bb327373aac4e4b7a</File><File Path=\"/opt/tbootxm/bin/tboot-xm-uninstall.sh\">7450bc939548eafc4a3ba9734ad1f96e46e1f46a40e4d12ad5b5f6b5eb2baf1597ade91edb035d8b5c1ecc38bde7ee59</File><File Path=\"/opt/tbootxm/bin/functions.sh\">8526f8aedbe6c4bde3ba331b0ce18051433bdabaf8991a269aff7a5306838b13982f7d1ead941fb74806fc696fef3bf0</File><File Path=\"/opt/tbootxm/dracut_files/check\">6f5949b86d3bf3387eaff8a18bb5d64e60daff9a2568d0c7eb90adde515620b9e5e9cd7d908805c6886cd178e7b382e1</File><File Path=\"/opt/tbootxm/dracut_files/install\">e2fc98a9292838a511d98348b29ba82e73c839cbb02051250c8a8ff85067930b5af2b22de4576793533259fad985df4a</File><File Path=\"/opt/tbootxm/dracut_files/module-setup.sh\">0a27a9e0bff117f30481dcab29bb5120f474f2c3ea10fa2449a9b05123c5d8ce31989fcd986bfa73e6c25c70202c50cb</File><File Path=\"/opt/tbootxm/initrd_hooks/tcb\">430725e0cb08b290897aa850124f765ae0bdf385e6d3b741cdc5ff7dc72119958fbcce3f62d6b6d63c4a10c70c18ca98</File><File Path=\"/opt/tbootxm/lib/libwml.so\">4b33910d5d03045275c2e8593f8bebefc2d4689c575a198a516121b25f44269107fb5075d1b5d9b35cf0b1da56b9e1e9</File><File Path=\"/opt/tbootxm/lib/create_menuentry.pl\">79770fb02e5a8f6b51678bde4d017f23ac811b1a9f89182a8b7f9871990dbbc07fd9a0578275c405a02ac5223412095e</File><File Path=\"/opt/tbootxm/lib/update_menuentry.pl\">cb6754eb6f2e39e43d420682bc91c83b38d63808b603c068a3087affb856703d3ae564892ac837cd0d4453e41b2a228e</File><File Path=\"/opt/tbootxm/lib/remove_menuentry.pl\">baf4f9b63ab9bb1e8616e3fb037580e38c0ebd4073b3b7b645e0e37cc7f0588f4c5ed8b744e9be7689aa78d23df8ec4c</File><File Path=\"/opt/tbootxm/mkinitrd_files/setup-measure_host.sh\">2791f12e447bbc88e25020ddbf5a2a8693443c5ca509c0f0020a8c7bed6c813cd62cb4c250c88491f5d540343032addc</File><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/trustagent/bin\">3519466d871c395ce1f5b073a4a3847b6b8f0b3e495337daa0474f967aeecd48f699df29a4d106288f3b0d1705ecef75</Dir><File Path=\"/opt/trustagent/bin/tagent\">49d1b74611cfe29f39e917bfe2f2682105144cbbc0779de07c33486d868ef24a475d61e5b48a6a91e3bf3943b6827706</File><File Path=\"/opt/trustagent/bin/module_analysis.sh\">2327e72fa469bada099c5956f851817b0c8fa2d6c43089566cacd0f573bf62e7e8dd10a2c339205fb16c3956db6518a9</File><File Path=\"/opt/trustagent/bin/module_analysis_da.sh\">2a99c3e80e99d495a6b8cce8e7504af511201f05fcb40b766a41e6af52a54a34ea9fba985d2835aef929e636ad2a6f1d</File><File Path=\"/opt/trustagent/bin/module_analysis_da_tcg.sh\">0f47a757c86e91a3a175cd6ee597a67f84c6fec95936d7f2c9316b0944c27cb72f84e32c587adb456b94e64486d14242</File><CumulativeHash>5dd16d5e60b2d211ce1b416e0d9042d91b0e79d59ea24ec19d387778f44d643fd39160c4d9537590a81bf3de424c524b</CumulativeHash></Measurement>",
                    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Measurement xmlns=\"lib:wml:measurements:1.0\" Label=\"ISecL_Default_Workload_Flavor_v2.2\" Uuid=\"eb01c331-57aa-48cd-95db-87c16f1d1102\" DigestAlg=\"SHA384\"><Dir Exclude=\"\" Include=\".*\" Path=\"/opt/workload-agent/bin\">e64e6d5afaad329d94d749e9b72c76e23fd3cb34655db10eadab4f858fb40b25ff08afa2aa6dbfbf081e11defdb58d5a</Dir><File Path=\"/opt/workload-agent/bin/wlagent\">ad913d6e02f1055694dad2b3a1e81ec9c783d4b3f473d66ace78cdc83be4df7cf885a0545c1e44c8badbe5f3692ff04f</File><CumulativeHash>45d785cd9bccc298ea0c4ce416f604b6982396ce3182bfdf2d835285dc21e0439187405407d258711c2fdae9ed6ecc98</CumulativeHash></Measurement>"
                ]
            }
        }
  /hosts:
    get:
      description: |
        <b>Host</b>
        <pre>
        A host is a datacenter server. When a host is created, the connection details are specified and it is associated with a flavor group. The host will be continually monitored against the flavors in the respective flavor group, and the trust status will be updated accordingly.</br>
        </pre>

        <b>Searches for hosts.</b>
        <pre>
        Only one identifying parameter can be specified. The parameters listed here are in the order of priority that will be evaluated.</br>
        </pre>

        Returns - The serialized HostCollection Go struct object that was retrieved, which is a collection of serialized Host Go struct objects.
      operationId: SearchHost
      parameters:
      - description: Host ID
        format: uuid
        in: query
        name: id
        type: string
      - description: Host name.
        in: query
        name: nameEqualTo
        type: string
      - description: Substring of host name.
        in: query
        name: nameContains
        type: string
      - description: Hardware UUID of host.
        format: uuid
        in: query
        name: hostHardwareId
        type: string
      - description: User needs to specify values for both key and value fields. Key
          can be any field in host info section of host report field in host status
          table.
        in: query
        name: key
        type: string
      - description: User needs to specify values for both key and value fields. Value
          will be content of key field in host info section of host report field in
          host status table.
        in: query
        name: value
        type: string
      - description: Get host by trust status.
        in: query
        name: trusted
        type: boolean
      - description: Get trust status for host.
        in: query
        name: getTrustStatus
        type: boolean
      - description: Get status of host.
        in: query
        name: getHostStatus
        type: boolean
      - description: Orders the host collection in ascending/descending order. Accepted
          values are "asc"/"desc" the default being "asc".
        enum:
        - asc
        - desc
        in: query
        name: orderBy
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the hosts.
          schema:
            $ref: '#/definitions/HostCollection'
        "400":
          description: Invalid values for request params
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Hosts
      x-permissions: hosts:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts
      x-sample-call-output: |
        {
            "hosts": [
                {
                    "id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
                    "host_name": "Purley host1",
                    "description": "RHEL TPM2.0 Purley",
                    "connection_string": "https://trustagent.server.com:1443",
                    "hardware_uuid": "80ecce40-04b8-e811-906e-00163566263e"
                    "flavorgroup_names": [
                        "automatic", "platform_software"
                    ]
                }
            ]
        }
    post:
      consumes:
      - application/json
      description: |
        <b>Host Connection String</b>
        <pre>
        For Intel hosts, this would have the vendor name, the IP addresses, or DNS host name. e.g.:
        "intel:https://trustagent.server.com:1443"</br>
        For VMware, this includes the vCenter and host IP address or DNS host name and credentials. e.g.:
        "vmware:https://vCenterServer.com:443/sdk;h=trustagent.server.com;u=vCenterUsername;p=vCenterPassword"</br>
        </pre>

        <b>Creates a host.</b>
        <pre>
        A connection string and name for the host must be specified. This name is the value the Host Verification Service (HVS) uses to keep track of the host. It does not have to be the actual host name or IP address of the server.</br>
        If a flavor group is not specified, the host created will be assigned to the default “automatic” flavor group. If a flavor group is specified and does not already exist, it will be created with a default flavor match policy.</br>
        Once the host is created, it is added to the flavor verification queue in backend.</br>
        </pre>

        The serialized HostCreateRequest Go struct object represents the content of the request body.

         | Attribute         | Description |
         |-------------------|-------------|
         | host_name         | HVS name for the host. |
         | connection_string | The host connection string. |
         | flavorgroup_names | List of flavor group names that the created host will be associated. |
         | description       | Host description. |
      operationId: CreateHost
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/HostCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the host.
          schema:
            $ref: '#/definitions/Host'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Hosts
      x-permissions: hosts:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts
      x-sample-call-input: |
        {
            "host_name": "Purley host1",
            "connection_string": "intel:https://trustagent.server.com:1443",
            "flavorgroup_names": [""],
            "description": "RHEL TPM2.0 Purley"
        }
      x-sample-call-output: |-
        {
            "id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
            "host_name":"Purley host1",
            "description": "RHEL TPM2.0 Purley",
            "connection_string": "https://trustagent.server.com:1443",
            "hardware_uuid": "80ecce40-04b8-e811-906e-00163566263e",
            "flavorgroup_names": [
                "automatic", "platform_software"
            ]
        }
  /hosts/{host_id}:
    delete:
      description: |
        Deletes a host.
      operationId: DeleteHost
      parameters:
      - description: Unique ID of the host.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - in: header
        name: Accept
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the host.
        "404":
          description: Host record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Hosts
      x-permissions: hosts:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e
    get:
      description: |
        Retrieves a host.
        Returns - The serialized Host Go struct object that was retrieved.
      operationId: RetrieveHost
      parameters:
      - description: Unique ID of the host.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - description: Fetch platform data for the host as well.
        in: query
        name: getReport
        type: boolean
      - description: Fetch host status for the host as well.
        in: query
        name: getHostStatus
        type: boolean
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the host.
          schema:
            $ref: '#/definitions/Host'
        "404":
          description: Host record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Hosts
      x-permissions: hosts:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e
      x-sample-call-output: |
        {
            "id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
            "host_name": "Purley host1",
            "description": "RHEL TPM2.0 Purley",
            "connection_string": "https://trustagent.server.com:1443",
            "hardware_uuid": "80ecce40-04b8-e811-906e-00163566263e"
            "flavorgroup_names": [
                "automatic", "platform_software"
            ]
        }
    put:
      consumes:
      - application/json
      description: |
        Updates a host.

        The serialized Host Go struct object represents the content of the request body.

         | Attribute         | Description |
         |-------------------|-------------|
         | host_name         | Complete name of the host. |
         | hardware_uuid     | Hardware UUID of the host. |
         | connection_string | The host connection string. |
         | flavorgroup_names | List of flavor group names that the created host will be associated. |
         | description       | Host description. |
      operationId: UpdateHost
      parameters:
      - description: Unique ID of the host.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/Host'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the host.
          schema:
            $ref: '#/definitions/Host'
        "400":
          description: Invalid request body provided
        "404":
          description: Host record not found
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Hosts
      x-permissions: hosts:store
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e
      x-sample-call-input: |
        {
            "host_name": "Purley host2",
            "description": "RHEL TPM2.0 Purley Host"
        }
      x-sample-call-output: |-
        {
            "id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
            "host_name":"Purley host2",
            "description": "RHEL TPM2.0 Purley Host",
            "connection_string": "https://trustagent.server.com:1443",
            "hardware_uuid": "80ecce40-04b8-e811-906e-00163566263e",
            "flavorgroup_names": [
                "automatic", "platform_software"
            ]
        }
  /hosts/{host_id}/flavorgroups:
    get:
      description: |
        Search host-flavorgroup links using host ID.
        Returns - The serialized HostFlavorgroupCollection Go struct object that was retrieved, which is a collection of serialized HostFlavorgroup Go struct objects.
      operationId: SearchHostFlavorgroupLink
      parameters:
      - description: Unique ID of the host for which the host-flavorgroup association
          needs to be retrieved.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the host flavorgroup links.
          schema:
            $ref: '#/definitions/HostFlavorgroupCollection'
        "404":
          description: Flavorgroup record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostFlavorgroupLinks
      x-permissions: hosts:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e/flavorgroups
      x-sample-call-output: |-
        {
            "flavorgroup_host_links": [
                {
                    "host_id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
                    "flavorgroup_id": "c96da83d-b202-49b0-b266-fc6018883e12"
                }
            ]
        }
    post:
      consumes:
      - application/json
      description: |
        Associates the host with the flavorgroup specified in HostFlavorgroupCreateRequest Go struct object.</br>
        Once the host is associated, it is added to the flavor verification queue in backend.

        The serialized HostFlavorgroupCreateRequest Go struct object represents the content of the request body.

         | Attribute      | Description |
         |----------------|-------------|
         | flavorgroup_id | Unique ID of the flavorgroup to be linked to host. |
      operationId: CreateHostFlavorgroupLink
      parameters:
      - description: Unique ID of the host to be linked to the flavorgroup.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/HostFlavorgroupCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the host flavorgroup link.
          schema:
            $ref: '#/definitions/HostFlavorgroup'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostFlavorgroupLinks
      x-permissions: hosts:create
  /hosts/{host_id}/flavorgroups/{flavorgroup_id}:
    delete:
      description: |
        Deletes the link between the host and the flavorgroup.
      operationId: DeleteHostFlavorgroupLink
      parameters:
      - description: Unique ID of the host that need to be dissociated from the flavorgroup.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - description: Unique ID of the flavorgroup that need to be dissociated from
          the host.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the host flavorgroup link.
        "404":
          description: Flavorgroup record not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostFlavorgroupLinks
      x-permissions: hosts:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e/flavorgroups/c96da83d-b202-49b0-b266-fc6018883e12
    get:
      description: |
        Retrieves a host-flavorgroup link.
        Returns - The serialized HostFlavorgroup Go struct object that was retrieved.
      operationId: RetrieveHostFlavorgroupLink
      parameters:
      - description: Unique ID of the host for which the host-flavorgroup association
          needs to be retrieved.
        format: uuid
        in: path
        name: host_id
        required: true
        type: string
      - description: Unique ID of the flavorgroup for which the host-flavorgroup association
          needs to be retrieved.
        format: uuid
        in: path
        name: flavorgroup_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the host flavorgroup link.
          schema:
            $ref: '#/definitions/HostFlavorgroup'
        "404":
          description: Flavorgroup record not found
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - HostFlavorgroupLinks
      x-permissions: hosts:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/hosts/fc0cc779-22b6-4741-b0d9-e2e69635ad1e/flavorgroups/c96da83d-b202-49b0-b266-fc6018883e12
      x-sample-call-output: |-
        {
            "host_id": "fc0cc779-22b6-4741-b0d9-e2e69635ad1e",
            "flavorgroup_id": "c96da83d-b202-49b0-b266-fc6018883e12"
        }
  /manifests:
    get:
      description: |
        A manifest is a list of files/directories/symlinks that are to be measured.
        Creates the manifest from a software flavor which is retrieved using the flavor uuid and returns it.
      operationId: Get-Software-Manifest
      parameters:
      - description: Flavor ID
        format: uuid
        in: query
        name: id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/xml
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/xml
      responses:
        "200":
          description: Successfully generated manifest for the software flavor.
          schema:
            $ref: '#/definitions/Manifest'
        "400":
          description: Invalid flavor ID provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Manifests
      x-permissions: flavors:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/manifests?id=f66ac31d-124d-418e-8200-2abf414a9adf
      x-sample-call-output: |
        <Manifest xmlns="" Label="Sample_label" Uuid="f66ac31d-124d-418e-8200-2abf414a9adf" DigestAlg="SHA384">
              <Dir Include=".*" Path="/usr/local/bin"></Dir>
              <File Path="/usr/local/bin/wget"></File>
        </Manifest>
  /reports:
    get:
      description: |
        A report contains the trust information produced by the flavor verification process. It provides details on if the host is trusted and the flavors it matched, or came closest to matching.
        If the host is untrusted, the report will include faults which describe why the host is untrusted. These faults allow for easy analysis and remediation of an untrusted
        result.

        A report can be returned in JSON format, or it can be returned in SAML format. A SAML report is provided in XML format and contains the same trust information in a specific attribute format.
        A SAML report also includes a signature that can be verified by the Host Verification Service’s SAML public key.

        Reports have a configurable validity period with default period of 24 hours or 86400 seconds. The Host Verification service has a background refresh process that queries for reports where the expiration time is within the next 5 minutes, and triggers generation of a new report for all results.
        This is checked every 2 minutes by default, and can be configured by changing property in the configuration. In this way fresh reports are generated before older reports expire.

        <b>Searches for reports</b>
      operationId: Search-Reports
      parameters:
      - description: Report ID
        format: uuid
        in: query
        name: id
        type: string
      - description: host Id of the host. If this parameter is specified, it will
          return report only for active host with specified host id.
        format: uuid
        in: query
        name: hostId
        type: string
      - description: Hostname of the host. If this parameter is specified, it will
          return report only for active host with specified host name.
        in: query
        name: hostName
        type: string
      - description: Hardware UUID of the host. If this parameter is specified, it
          will return report only for active host with specified host hardware uuid.
        format: uuid
        in: query
        name: hostHardwareId
        type: string
      - description: Current state of an active host.  A list of host states is defined
          in the description section of the HostStatus.
        format: string
        in: query
        name: hostStatus
        type: string
      - description: |
          Results returned will be restricted to between the current date and number of days prior. This option will override other date options.
          min: 0
          max: 365
        in: query
        name: numberOfDays
        type: integer
      - description: |
          Results returned will be restricted to after this date. Currently the following ISO 8601 date formats are supported for date parameters
              date                                   Ex: fromDate=2006-01-02
              date+time                              Ex: fromDate=2006-01-02 15:04:05
              date+time(with milli seconds)          Ex: fromDate=2006-01-02T15:04:05.000Z
              date+time(with micro seconds)          Ex: fromDate=2006-01-02T15:04:05.000000Z
        format: date-time
        in: query
        name: fromDate
        type: string
      - description: |
          Results returned will be restricted to before this date. Currently the following ISO 8601 date formats are supported for date parameters
              date                                   Ex: toDate=2006-01-02
              date+time                              Ex: toDate=2006-01-02 15:04:05
              date+time(with milli seconds)          Ex: toDate=2006-01-02T15:04:05.000Z
              date+time(with micro seconds)          Ex: toDate=2006-01-02T15:04:05.000000Z
        format: date-time
        in: query
        name: toDate
        type: string
      - default: true
        description: Returns only the latest report for each host. If latestPerHost
          is specified in conjuction with a date filter, it will return the latest
          report for within the specified date range per host.
        in: query
        name: latestPerHost
        type: boolean
      - default: 2000
        description: This limits the overall number of results (all hosts included).
        in: query
        name: limit
        type: integer
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the reports.
          schema:
            $ref: '#/definitions/ReportCollection'
        "400":
          description: Invalid search criteria provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-permissions: reports:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/reports?numberOfDays=2&amp;latestPerHost=false
      x-sample-call-output: |-
        {
            "id": "8a545a4f-d282-4d91-8ec5-bcbe439dcfbc",
            "host_id": "94824cb6-d6c8-4faf-83b0-125996ceebe2",
            "trust_information": {
                    "flavors_trust": {
                                "HOST_UNIQUE":
                                    {
                                      "trust": true,
                                       "rules":
                                           [
                                            {
                                                "rule":
                                                    {
                                                "rule_name": "com.intel.mtwilson.core.verifier.policy.rule.PcrEventLogIncludes",
                                                "markers":
                                                    [
                                                      "HOST_UNIQUE"
                                                    ],
                                                "pcr_bank": "SHA256",
                                                "pcr_index": "pcr_18",
                                                "expected":
                                                 [
                                                    {
                                                "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                                "label": "LCP_CONTROL_HASH",
                                                "info":
                                                   {
                                                     "ComponentName": "LCP_CONTROL_HASH",
                                                     "EventName": "OpenSource.EventName"
                                                    }
                                                   }
                                                ],
                                              },
                                        "flavor_id": "a774ddad-fca1-4670-86b2-605c88a16dab",
                                        "trusted": true
                                           },
                                         ]
                                 },
                                "OS": {
                                                "trust": true,
                                                "rules": [...]
                                      },

                                "PLATFORM": {       "trust": true,
                                                "rules": [...]
                                        },
                                },
                                "SOFTWARE": {       "trust": true,
                                                "rules": [...]
                                        },
                                },
            "OVERALL": true,
            "created": "2018-07-23T16:39:52-0700",
            "expiration": "2018-07-23T17:39:52-0700"
        }
    post:
      consumes:
      - application/json
      description: |
        Creates a Report.

        The serialized ReportCreateRequest Go struct object represents the content of the request body.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | host_id                        | ID of host |
         | host_name                      | hostname of host |
         | hardware_uuid                  | Hardware UUID of host |
      operationId: Create-Report
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/ReportCreateRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the report.
          schema:
            $ref: '#/definitions/Report'
        "400":
          description: Invalid search criteria provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-permissions: reports:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/reports
      x-sample-call-input: |
        {
            "host_name":"host-1"
        }
      x-sample-call-output: |-
        {
              "id": "8a545a4f-d282-4d91-8ec5-bcbe439dcfbc",
              "host_id": "94824cb6-d6c8-4faf-83b0-125996ceebe2",
              "trust_information": {
                      "flavors_trust": {
                                  "HOST_UNIQUE":
                                      {
                                        "trust": true,
                                         "rules":
                                             [
                                              {
                                                  "rule":
                                                      {
                                                  "rule_name": "com.intel.mtwilson.core.verifier.policy.rule.PcrEventLogIncludes",
                                                  "markers":
                                                      [
                                                        "HOST_UNIQUE"
                                                      ],
                                                  "pcr_bank": "SHA256",
                                                  "pcr_index": "pcr_18",
                                                  "expected":
                                                   [
                                                      {
                                                  "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                                                  "label": "LCP_CONTROL_HASH",
                                                  "info":
                                                     {
                                                       "ComponentName": "LCP_CONTROL_HASH",
                                                       "EventName": "OpenSource.EventName"
                                                      }
                                                     }
                                                  ],
                                                },
                                          "flavor_id": "a774ddad-fca1-4670-86b2-605c88a16dab",
                                          "trusted": true
                                             },
                                           ]
                                   },
                                  "OS": {
                                                  "trust": true,
                                                  "rules": [...]
                                        },

                                  "PLATFORM": {       "trust": true,
                                                  "rules": [...]
                                          },

                                  "SOFTWARE": {       "trust": true,
                                                  "rules": [...]
                                          }
                                  }
                              },
                      "OVERALL": true,
              "created": "2018-07-23T16:39:52-0700",
              "expiration": "2018-07-23T17:39:52-0700"
        }
  /reports/{report_id}:
    get:
      description: |
        Retrieves a report.
        Returns - The serialized Report Go struct object that was retrieved.
      operationId: Retrieve-Report
      parameters:
      - description: Unique ID of the Report.
        format: uuid
        in: path
        name: report_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the Report.
          schema:
            $ref: '#/definitions/Report'
        "404":
          description: No relevant report record found.
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error.
      security:
      - bearerAuth: []
      tags:
      - Reports
      x-permissions: reports:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/reports/8a545a4f-d282-4d91-8ec5-bcbe439dcfbc
      x-sample-call-output: |-
        {
          "id": "8a545a4f-d282-4d91-8ec5-bcbe439dcfbc",
          "host_id": "94824cb6-d6c8-4faf-83b0-125996ceebe2",
          "trust_information": {
            "flavors_trust": {
              "HOST_UNIQUE": {
                "trust": true,
                "rules": [
                  {
                    "rule": {
                      "rule_name": "com.intel.mtwilson.core.verifier.policy.rule.PcrEventLogIncludes",
                      "markers": [
                        "HOST_UNIQUE"
                      ],
                      "pcr_bank": "SHA256",
                      "pcr_index": "pcr_18",
                      "expected": [
                        {
                          "value": "df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                          "label": "LCP_CONTROL_HASH",
                          "info": {
                            "ComponentName": "LCP_CONTROL_HASH",
                            "EventName": "OpenSource.EventName"
                          }
                        }
                      ]
                    },
                    "flavor_id": "a774ddad-fca1-4670-86b2-605c88a16dab",
                    "trusted": true
                  }
                ]
              },
              "OS": {
                "trust": true,
                "rules": [
                  ...
                ]
              },
              "PLATFORM": {
                "trust": true,
                "rules": [
                  ...
                ]
              },
              "SOFTWARE": {
                "trust": true,
                "rules": [
                  ...
                ]
              }
            },
            "OVERALL": true,
            "created": "2018-07-23T16:39:52-0700",
            "expiration": "2018-07-23T17:39:52-0700"
          }
        }
  /rpc/deploy-software-manifest:
    post:
      consumes:
      - application/json
      description: |
        A manifest is a list of files/directories/symlinks that are to be measured. The manifest can be deployed or pushed directly to the host using the REST API described here. The Verification Service exposes this REST API to create manifest from flavor retrieved from database based cn the flavor id provided by the user and deploy it to the host whose information has been provided in the input as host id (if host is already registered to Verification Service).
        Creates the manifest from a software flavor which is retrieved using the flavor uuid and deploys it to the host based on the hostId provided as parameter.
      operationId: Deploy-Software-Manifest
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/DeployManifestRequest'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      responses:
        "200":
          description: Successfully deployed application manifest to host.
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type Header
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - Deploy-Software-Manifest
      x-permissions: software_flavors:deploy
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/rpc/deploy-software-manifest
      x-sample-call-input: |
        {
           "flavor_id":"436c729a-e3a6-4d71-8ea2-fc3b459bd4b3",
           "host_id":"d9d43923-05ae-4c8a-a64f-eba02473010d"
        }
  /rpc/deploy-tag-certificate:
    post:
      consumes:
      - application/json
      description: |
        Deploys a Tag Certificate to a connected host.

        The serialized TagCertificateDeployCriteria Go struct object represents the content of the request body.

         | Attribute         | Description |
         |-------------------|-------------|
         | certificate_id    | ID of TagCertificate to be deployed. |
      operationId: DeployTagCertificate
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/TagCertificateDeployCriteria'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deployed the TagCertificate to the host.
          schema:
            $ref: '#/definitions/SignedFlavor'
        "400":
          description: Error decoding the TagCertificateDeployCriteria.
        "404":
          description: TagCertificate does not exist.
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Error deploying the TagCertificate.
      security:
      - bearerAuth: []
      tags:
      - TagCertificates
      x-permissions: tag_certificates:deploy
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/rpc/deploy-tag-certificate
      x-sample-call-input: |
        {
            "certificate_id": "ec7a9f98-0c79-4856-994c-b1a2087d03d1"
        }
      x-sample-call-output: |
        {
            "flavor": {
                "meta": {
                    "id": "ccd8790e-f707-43a4-9f8a-2446ca2dfc63",
                    "description": {
                        "flavor_part": "ASSET_TAG",
                        "source": "computepurley",
                        "label": "INTEL_00ecd3ab-9af4-e711-906e-001560a04062_2020-07-22T21:06:02.187002-07:00",
                        "tpm_version": "2.0",
                        "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
                        "tboot_installed": "true"
                    },
                    "vendor": "INTEL"
                },
                "bios": {
                    "bios_name": "Intel Corporation",
                    "bios_version": "SE5C620.86B.00.01.0015.110720180833"
                },
                "external": {
                    "asset_tag": {
                        "tag_certificate": {
                            "encoded": "MIIEFzCCAn+gAwIBAgIRAPevjWFSqf36WgtDrLMiCvwwDQYJKoZIhvcNAQEMBQAwHjEcMBoGA1UEAxMTSFZTIFRhZyBDZXJ0aWZpY2F0ZTAeFw0yMDA3MjIxNjM5NTVaFw0yMTA3MjIxNjM5NTVaMC8xLTArBgNVBAMTJDAwZWNkM2FiLTlhZjQtZTcxMS05MDZlLTAwMTU2MGEwNDA2MjCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALZ2mwREyhc/d5Uf8PXJ38rqGH3g53qtq/Lk/Tl1uWbizMpuqEyYe14qR0FVlpon4OkoTEAW5FjonvYfL4itRaoj55M3RL8ktC1/vrOJ73z2WOnfoTFsRi9wVRu5O52SytZdr3N0sDhPT9aAaJ41sBmFfdVIfc99qDeo/5tR0LSGImERr+1nLWAy+I1qBpjBkD2yyKc9Fzg+tVODLqNfescadUoHUXHNARw7ecyqkpa1lunpdDqJG/xrGUiEPNEik/phowQUtEnf7FpciwAQhzWa6GfqxXEd0TdstOV/eKatIhnCTYzZtA81X1NTHvpQiTV9enCaOmhW3ElWZtYvrTmsnhIzHJnjZOrOlbewq5qrSFXlhSpierLrW29cmDkgzx/IINIibsXPCaERE9KUxNwjgKuSwsodmBub/znJJmqIHsiBZCuHcqMb2E5o4b5JZntlafvJEDBVMhwLRdoo9j8dGWl+oziWww2/YNDLBNmM6791ZsOLZy7faeBEk9JO9QIDAQABoz8wPTAeBgVVBIYVAQQVMBMTCExvY2F0aW9uEwdWaWV0bmFtMBsGBVUEhhUBBBIwEBMHQ29tcGFueRMFSW50ZWwwDQYJKoZIhvcNAQEMBQADggGBABXiz70tGfke0yAY/2EOsqcBoLbfRBGxHJydYGkiJO2CMt5IF4fS4wu2q5vypTHWuhRa+CduacMICys4oUPCzAvR+vW5h5zLL5wisSLT4hprS2LDP1HAV/58115GGz+NZRIpixBMSsxuf1bEawxAH6pJz7PxLzSMetxS1Wc7R9CPiHMnQf9KNVfSO88O0wehjfJteNanLTSYYKK58/yeQWLzQHTKbjHWKVM+LDBNMK/lD+0DfAiRASJGhPyMX+EVn6zz3JEl7263fOWVSKf39OEB6ghIam9xhZZauhcz520LQGsPFduG0KyOQVD6h7ChXm7EVsPWqsJs034yqAhRkFmoDWeFl6zQhpxI28W1loBgEvWKofAIVQDaR8Ao0z535Vquw7hsanudpqbOs4TcOPPF12kGk3Q0TNBt+2vIRZih2ZA/UC1qHALDGcDVV81wC545i5Hwdu6SPbdLmPhmJ71718W2A8a4oTar/lhZlN6NggdfxXhQHFhlJ/ftOs+UBw==",
                            "issuer": "CN=HVS Tag Certificate",
                            "serial_number": 6488354097176120060,
                            "subject": "00ecd3ab-9af4-e711-906e-001560a04062",
                            "not_before": "2020-07-22T16:39:55+0000",
                            "not_after": "2021-07-22T16:39:55+0000",
                            "attribute": [
                                {
                                    "attr_type": {
                                        "id": "2.5.4.789.1"
                                    },
                                    "attribute_values": [
                                        {
                                            "objects": {
                                                "name": "Location",
                                                "value": "Vietnam"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "attr_type": {
                                        "id": "2.5.4.789.1"
                                    },
                                    "attribute_values": [
                                        {
                                            "objects": {
                                                "name": "Company",
                                                "value": "Intel"
                                            }
                                        }
                                    ]
                                }
                            ],
                            "fingerprint_sha384": "7149d2dde1b44f293515f14f80e554ae874c68bde18891e6020a00895f85efa70b4e7a762bbcbcfbf703a09efa2af5b4"
                        }
                    }
                }
            },
            "signature": "Pauz4EN6RtpWuyyFZpI/S8cXia2qqAnbOmWLHzZzLEfx0D4D1zr/Soj35aN0BnngNUw4fxGcSv0oUrq5DNc0TrVf+/Doc/KcU74Iwm2+wR8MOzHAoOzW/LNlcpMOv13SabTjhJ6eQpcIoYz4XrqmMC+s3jiYnyhQ5PzFnd4K2BoJWT7hj5gvjXYX1Ccss/4Cunt3zkQsc5fnXf/ask9Gz4WqR6Qra5DQQsYKp0qdaKA4skKJVFWWDsrks+0HvXPkSLDa11xA9lq45YPJU9vPX0SMyu7txfeBeVEJ7Ov1kkE+H2ukOtiHwZZdkcuOh9h64D6q7qzTjRjjeOntgJjrooXRDsFE8SCpTh5clKLTaK+0mJCGsdcvbrBtH/UCNMHZWtB5/b+uaXeCbamOiN7oAgqI0I4ttcEonehn3HaXiwAgLbkrW1LgxWODGlUpogheCDMAjkOHyl2nwpeqjIq4n5WFfVo2NUQv5JnEJ2QZYNCEd+rOKIkCqgmoc9gCq6DM"
        }
  /tag-certificates:
    get:
      description: |
        Searches for Tag Certificates.
        Returns - The serialized TagCertificateCollection Go struct object that was retrieved, which is a collection of serialized TagCertificate Go struct objects.

        <b>Note</b>
        Only one identifying parameter can be specified. The parameters listed here are in the order of priority that will be evaluated.
      operationId: SearchTagCertificates
      parameters:
      - description: TagCertificate ID
        format: uuid
        in: query
        name: id
        type: string
      - description: TagCertificate subject strict match.
        in: query
        name: subjectEqualTo
        type: string
      - description: Substring of TagCertificate subject.
        in: query
        name: subjectContains
        type: string
      - description: TagCertificate issuer strict match.
        in: query
        name: issuerEqualTo
        type: string
      - description: Substring of TagCertificate issuer.
        in: query
        name: issuerContains
        type: string
      - description: Filters TagCertificates that are valid on this date.
        format: date-time
        in: query
        name: validOn
        type: string
      - description: Filters TagCertificates that are valid before this date.
        format: date-time
        in: query
        name: validBefore
        type: string
      - description: Filters TagCertificates that are valid after this date.
        format: date-time
        in: query
        name: validAfter
        type: string
      - description: Hardware UUID of the Tag Certificate
        format: uuid
        in: query
        name: hardwareUuid
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the Tag Certificates. Returns an empty
            list when no matching records are found.
          schema:
            $ref: '#/definitions/TagCertificateCollection'
        "400":
          description: Invalid value for filter criteria.
        "415":
          description: Invalid Accept Header in Request
      security:
      - bearerAuth: []
      tags:
      - TagCertificates
      x-permissions: tag_certificates:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tag-certificates?hardwareUUID=00ecd3ab-9af4-e711-906e-001560a04062
      x-sample-call-output: |
        {
            "certificates": [
                {
                    "id": "ec7a9f98-0c79-4856-994c-b1a2087d03d1",
                    "certificate": "MIIEQTCCAqmgAwIBAgIQVGCFNpSOXMOmAC9Hh/wd1TANBgkqhkiG9w0BAQwFADAxMS8wLQYDVQQDDCYTJDAwZWNkM2FiLTlhZjQtZTcxMS05MDZlLTAwMTU2MGEwNDA2MjAeFw0yMDA3MjAxMzU1MDBaFw0yMTA3MjAxMzU1MDBaMDExLzAtBgNVBAMMJhMkMDBlY2QzYWItOWFmNC1lNzExLTkwNmUtMDAxNTYwYTA0MDYyMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAtnabBETKFz93lR/w9cnfyuoYfeDneq2r8uT9OXW5ZuLMym6oTJh7XipHQVWWmifg6ShMQBbkWOie9h8viK1FqiPnkzdEvyS0LX++s4nvfPZY6d+hMWxGL3BVG7k7nZLK1l2vc3SwOE9P1oBonjWwGYV91Uh9z32oN6j/m1HQtIYiYRGv7WctYDL4jWoGmMGQPbLIpz0XOD61U4Muo196xxp1SgdRcc0BHDt5zKqSlrWW6el0Ookb/GsZSIQ80SKT+mGjBBS0Sd/sWlyLABCHNZroZ+rFcR3RN2y05X94pq0iGcJNjNm0DzVfU1Me+lCJNX16cJo6aFbcSVZm1i+tOayeEjMcmeNk6s6Vt7CrmqtIVeWFKmJ6sutbb1yYOSDPH8gg0iJuxc8JoRET0pTE3COAq5LCyh2YG5v/OckmaogeyIFkK4dyoxvYTmjhvklme2Vp+8kQMFUyHAtF2ij2Px0ZaX6jOJbDDb9g0MsE2Yzrv3Vmw4tnLt9p4EST0k71AgMBAAGjVTBTMCMGBVUEhhUBAQH/BBcwFRMITG9jYXRpb24TCU5vcnRoUG9sZTAsBgVVBIYVAQEB/wQgMB4TB0NvbXBhbnkTE1NhbnRhQ2xhdXNlV29ya3Nob3AwDQYJKoZIhvcNAQEMBQADggGBAA5FMy2NGjZmqldsk7ZpPwWBf90aClmJTzww7HpWxPUr4YEAnWpVgay6XH+wYt9r5YkMBsbPv6sZ1U1IRcy9qDY2O2PuyiE8OfxHsndps1VEQpmX+NHClGpmX49z1/DfA6UB96vMW2w+Yewh/RnNL+P2IyvTrSG+foZA/zPQgX2PzSVYlG3w8GZhb9oY6m5k8RuRkTqJ2IJfMZsd31XwsPfEsh3sIQ8o8bSj/aZYS+LDfMD06qjSEsNJ0HUyPKTN9SQMFslaGU0oQc9a6FEGWrew2Bx5TnrEse6+qpyKh+tZUp+yxod29gTCN0oGj7lcry/sUlqKA6CenXfYUk6GLXSgrPeU7B7GACXX5VDBMRIuU/Pzy7I+rzqi3/w5OtCCE8iMgcEyIbjDRGyxaM0fsJxeXXlXdb/nuc7x+g8vqsHvWG05ITNYgJww+ePRhi2OPg0L3e3TIHLOT0+DP2VdNysXitCiVt9Y9jeu5j3XTc5ZElERsVCLGGqTZA7FzY3GcA==",
                    "subject": "00ecd3ab-9af4-e711-906e-001560a04062",
                    "issuer": "HVS Tag Certificate",
                    "not_before": "2020-07-20T13:55:00Z",
                    "not_after": "2021-07-20T13:55:00Z",
                    "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
                    "asset_tag_digest": "LyAgoHDmNoCxIBvrkDnv+neoXHd3hefsUU5ZQpPOMq4bgW/qBKNIhm16LZwEaVxb"
                },
                {
                    "id": "0d18daf4-5daa-4b5b-94fd-8c6848632dff",
                    "certificate": "MIIEQjCCAqqgAwIBAgIRAJd7560Tn7333DjilFwC3g8wDQYJKoZIhvcNAQEMBQAwMTEvMC0GA1UEAwwmEyQwMGVjZDNhYi05YWY0LWU3MTEtOTA2ZS0wMDE1NjBhMDQwNjIwHhcNMjAwNzIwMTgzOTEwWhcNMjEwNzIwMTgzOTEwWjAxMS8wLQYDVQQDDCYTJDAwZWNkM2FiLTlhZjQtZTcxMS05MDZlLTAwMTU2MGEwNDA2MjCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALZ2mwREyhc/d5Uf8PXJ38rqGH3g53qtq/Lk/Tl1uWbizMpuqEyYe14qR0FVlpon4OkoTEAW5FjonvYfL4itRaoj55M3RL8ktC1/vrOJ73z2WOnfoTFsRi9wVRu5O52SytZdr3N0sDhPT9aAaJ41sBmFfdVIfc99qDeo/5tR0LSGImERr+1nLWAy+I1qBpjBkD2yyKc9Fzg+tVODLqNfescadUoHUXHNARw7ecyqkpa1lunpdDqJG/xrGUiEPNEik/phowQUtEnf7FpciwAQhzWa6GfqxXEd0TdstOV/eKatIhnCTYzZtA81X1NTHvpQiTV9enCaOmhW3ElWZtYvrTmsnhIzHJnjZOrOlbewq5qrSFXlhSpierLrW29cmDkgzx/IINIibsXPCaERE9KUxNwjgKuSwsodmBub/znJJmqIHsiBZCuHcqMb2E5o4b5JZntlafvJEDBVMhwLRdoo9j8dGWl+oziWww2/YNDLBNmM6791ZsOLZy7faeBEk9JO9QIDAQABo1UwUzAjBgVVBIYVAQEB/wQXMBUTCExvY2F0aW9uEwlTb3V0aFBvbGUwLAYFVQSGFQEBAf8EIDAeEwdDb21wYW55ExNTYW50YUNsYXVzZVdvcmtzaG9wMA0GCSqGSIb3DQEBDAUAA4IBgQCIDffmRt8omq0mEFx+VXDHhUuQrYVWzJr8MLCRnjyZYtPaXmanJWP7YjLrddSzeF1Gd5saiQBsm6Q/vqegF98+2g18BUz4cCt9/vcZptwuUNr/zqnAsKJ/eGkz12t845QiX6O/E4IUaBaxay1t7qLpcR3c5J++wYfFKtd2FnV2hz/exu2DTFfseh4iX85QzyOZuMtzRaACjq0yNuX+yja5v++966RbwXz2c1eDGkC8r1mus/HgF1WrIcZmMWtFQtRiTe70OxMf6y7dSy8Dv4Aqad5ME/CR0MBaTSfYpLpa1+8lZodp6fQJ2dj6CXq0opHOTYBNDvs/Cs5BdqXoK7rGuWCxdhM6AENAVmL6S62Yt+vi21AKGxdO1s7Eq5LrI1JMS9NMeVU/ythsAetki48Yl1IDAfeNwLquw6VXdHypE0YLv1iOjNu9sbXkadyDony7t9ko/kDDnoYTLM1KuLzKCO2bEyUIudtNeH8Jw/sggY92d17OHOvrBXdTDnfRvwc=",
                    "subject": "00ecd3ab-9af4-e711-906e-001560a04062",
                    "issuer": "HVS Tag Certificate",
                    "not_before": "2020-07-20T18:39:10Z",
                    "not_after": "2021-07-20T18:39:10Z",
                    "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
                    "asset_tag_digest": "SQ0G0q/0YHpeqAScfQUq83luo3Qkqm9eJHx9AL0Qfo8ThM5boB0XWz57GcWOfdc+"
                }
            ]
        }
    post:
      consumes:
      - application/json
      description: |
        Creates an Asset Tag Certificate.

        An "Asset Tag" is a host-specific certificate created with a set of
        user-defined key/value pairs that can be used to "tag" a server at
        the hardware level. Asset Tags are included in host attestation, verifying
        that, if an Asset Tag has been deployed to a host, that the correct
        Tag is included in the host's TPM Quote.
        Attestation Reports will display the key/value pairs associated with the Asset Tag, and can be used by
        scheduler services or compliance audit reporting.  One typical use case for Asset Tags is "geolocation tagging",
        tagging each host with key/value pairs matching the physical location of the host.

        The serialized TagCertificateCreateRequest Go struct object represents the content of the request body.

         | Attribute         | Description |
         |-------------------|-------------|
         | hardware_uuid     | The hardware UUID of the host to which the tag certificate is associated. |
         | selection_content | an array of one or more key-value pairs with the tag selection attributes. |
      operationId: CreateTagCertificate
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/TagCertificateCreateCriteria'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the Tag Certificate.
          schema:
            $ref: '#/definitions/TagCertificate'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TagCertificates
      x-permissions: tag_certificates:create
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tag-certificates
      x-sample-call-input: |
        {
            "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
            "selection_content": [
                {
                    "name": "Location",
                    "value": "SouthPole"
                },
                {
                    "name": "Company",
                    "value": "SantaClauseWorkshop"
                }
            ]
        }
      x-sample-call-output: |-
        {
            "id": "0d18daf4-5daa-4b5b-94fd-8c6848632dff",
            "certificate": "MIIEQjCCAqqgAwIBAgIRAJd7560Tn7333DjilFwC3g8wDQYJKoZIhvcNAQEMBQAwMTEvMC0GA1UEAwwmEyQwMGVjZDNhYi05YWY0LWU3MTEtOTA2ZS0wMDE1NjBhMDQwNjIwHhcNMjAwNzIwMTgzOTEwWhcNMjEwNzIwMTgzOTEwWjAxMS8wLQYDVQQDDCYTJDAwZWNkM2FiLTlhZjQtZTcxMS05MDZlLTAwMTU2MGEwNDA2MjCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALZ2mwREyhc/d5Uf8PXJ38rqGH3g53qtq/Lk/Tl1uWbizMpuqEyYe14qR0FVlpon4OkoTEAW5FjonvYfL4itRaoj55M3RL8ktC1/vrOJ73z2WOnfoTFsRi9wVRu5O52SytZdr3N0sDhPT9aAaJ41sBmFfdVIfc99qDeo/5tR0LSGImERr+1nLWAy+I1qBpjBkD2yyKc9Fzg+tVODLqNfescadUoHUXHNARw7ecyqkpa1lunpdDqJG/xrGUiEPNEik/phowQUtEnf7FpciwAQhzWa6GfqxXEd0TdstOV/eKatIhnCTYzZtA81X1NTHvpQiTV9enCaOmhW3ElWZtYvrTmsnhIzHJnjZOrOlbewq5qrSFXlhSpierLrW29cmDkgzx/IINIibsXPCaERE9KUxNwjgKuSwsodmBub/znJJmqIHsiBZCuHcqMb2E5o4b5JZntlafvJEDBVMhwLRdoo9j8dGWl+oziWww2/YNDLBNmM6791ZsOLZy7faeBEk9JO9QIDAQABo1UwUzAjBgVVBIYVAQEB/wQXMBUTCExvY2F0aW9uEwlTb3V0aFBvbGUwLAYFVQSGFQEBAf8EIDAeEwdDb21wYW55ExNTYW50YUNsYXVzZVdvcmtzaG9wMA0GCSqGSIb3DQEBDAUAA4IBgQCIDffmRt8omq0mEFx+VXDHhUuQrYVWzJr8MLCRnjyZYtPaXmanJWP7YjLrddSzeF1Gd5saiQBsm6Q/vqegF98+2g18BUz4cCt9/vcZptwuUNr/zqnAsKJ/eGkz12t845QiX6O/E4IUaBaxay1t7qLpcR3c5J++wYfFKtd2FnV2hz/exu2DTFfseh4iX85QzyOZuMtzRaACjq0yNuX+yja5v++966RbwXz2c1eDGkC8r1mus/HgF1WrIcZmMWtFQtRiTe70OxMf6y7dSy8Dv4Aqad5ME/CR0MBaTSfYpLpa1+8lZodp6fQJ2dj6CXq0opHOTYBNDvs/Cs5BdqXoK7rGuWCxdhM6AENAVmL6S62Yt+vi21AKGxdO1s7Eq5LrI1JMS9NMeVU/ythsAetki48Yl1IDAfeNwLquw6VXdHypE0YLv1iOjNu9sbXkadyDony7t9ko/kDDnoYTLM1KuLzKCO2bEyUIudtNeH8Jw/sggY92d17OHOvrBXdTDnfRvwc=",
            "subject": "00ecd3ab-9af4-e711-906e-001560a04062",
            "issuer": "HVS Tag Certificate",
            "not_before": "2020-07-20T18:39:10Z",
            "not_after": "2021-07-20T18:39:10Z",
            "hardware_uuid": "00ecd3ab-9af4-e711-906e-001560a04062",
            "asset_tag_digest": "SQ0G0q/0YHpeqAScfQUq83luo3Qkqm9eJHx9AL0Qfo8ThM5boB0XWz57GcWOfdc+"
        }
  /tag-certificates/{tagcertificate_id}:
    delete:
      description: |
        Deletes a Tag Certificate.
      operationId: DeleteTagCertificate
      parameters:
      - description: Unique ID of the Tag Certificate.
        format: uuid
        in: path
        name: tagcertificate_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted the Tag Certificate.
        "404":
          description: TagCertificate does not exist
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TagCertificates
      x-permissions: tag_certificates:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tag-certificates/fc0cc779-22b6-4741-b0d9-e2e69635ad1e
  /tpm-endorsements:
    get:
      description: |
        An Endorsement certificate is used to bind an identity or specific security attributes to a TPM.
      operationId: Search-TpmEndorsement
      parameters:
      - description: Tpm endorsement ID
        format: uuid
        in: query
        name: id
        type: string
      - description: hardware UUID of the host to which the Ek is associated.
        format: uuid
        in: query
        name: hardwareUuidEqualTo
        type: string
      - description: Issuer name.
        in: query
        name: issuerEqualTo
        type: string
      - description: Substring of issuer name.
        format: string
        in: query
        name: issuerContains
        type: string
      - description: Boolean value to indicate status of the ek certificate. Default
          value is false.
        in: query
        name: revokedEqualTo
        type: boolean
      - description: The complete comment associated with the EK.
        in: query
        name: commentEqualTo
        type: string
      - description: Substring of comment associated with the EK.
        in: query
        name: commentContains
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the tpm-endorsements.
          schema:
            $ref: '#/definitions/TpmEndorsementCollection'
        "400":
          description: Invalid search criteria provided
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TpmEndorsements
      x-permissions: tpm_endorsements:search
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tpm-endorsements?hardwareUuidEqualTo=80e54342-94f2-e711-906e-001560a04062
      x-sample-call-output: "{\n     \"tpm_endorsements\": [\n        {\n            \"id\"
        \           \t\t: \"d7e24dd4-76c0-4384-a8b0-09552ebaa1a1\",\n            \"hardware_uuid\"
        \t\t: \"80e54342-94f2-e711-906e-001560a04062\",\n            \"issuer\"       \t\t:
        \"C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon OPTIGA(TM)
        RSA Manufacturing CA 007\",\n            \"revoked\"       \t\t: false,\n
        \           \"certificate\"   \t\t: \"MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==\",\n
        \           \"comment\"       \t\t: \"registered by trust agent\"\n            \"certificate_digest\"
        : \"da8e9c68faf66d2634a4cbe14534a1916db261f401ffaffd42dc901eae33dd57695f365a31d19da67e4cebf1491dea60\"\n
        \          }\n       ]\n   }"
    post:
      consumes:
      - application/json
      description: |
        Creates a TpmEndorsement.

        The serialized TpmEndorsement Go struct object represents the content of the request body.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | certificate                    | The Base64 encoded Endorsement Certificate |
         | hardwareUuid                   | Hardware UUID of the host associated with the certificate. Can be retrieved by calling into the GET method on the host with a specific filter criteria. |
         | issuer                         | The OEM of the TPM. Refer to sample issuer input for attributes. |
         | revoked                        | Validity status of the EK certificate. Default is false (Optional) |
         | comment                        | Comments for the certificate.  (Optional)|
      operationId: Create-TpmEndorsement
      parameters:
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/TpmEndorsement'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the tpm-endorsement.
          schema:
            $ref: '#/definitions/TpmEndorsement'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TpmEndorsements
      x-permissions: tpm_endorsements:create
      x-sample-call-endpoint: https:hvs.com:8443/hvs/v2/tpm-endorsements
      x-sample-call-input: |
        {
                  "hardware_uuid" : "0002bfac-9ac5-e711-906e-00163566263e",
                  "issuer"        : "C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007",
                  "revoked"       : false,
                  "certificate"   : "MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==",
                  "comment"       : "registered by trust agent"
        }
      x-sample-call-output: |-
        {
            "id"            : "35adea3b-9f35-4e15-8c82-dee2f8880599",
            "hardware_uuid" : "0002bfac-9ac5-e711-906e-00163566263e",
            "issuer"        : "C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007",
            "revoked"       : false,
            "certificate"   : "MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==",
            "comment"       : "registered by trust agent",
            "certificate_digest": "da8e9c68faf66d2634a4cbe14534a1916db261f401ffaffd42dc901eae33dd57695f365a31d19da67e4cebf1491dea60"
        }
  /tpm-endorsements/{tpm-endorsement_id}:
    delete:
      description: |
        Deletes a TpmEndorsement.
      operationId: Delete-TpmEndorsement
      parameters:
      - description: Unique ID of the TpmEndorsement.
        format: uuid
        in: path
        name: tpm-endorsement_id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the TpmEndorsement.
        "404":
          description: No relevant TpmEndorsement record found.
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TpmEndorsements
      x-permissions: tpm_endorsements:delete
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tpm-endorsements/826501bd-3c75-4839-a08f-db5f744f8498
    get:
      description: |
        Retrieves a tpm-endorsement.
        Returns - The serialized TpmEndorsement Go struct object that was retrieved
      operationId: Retrieve-TpmEndorsement
      parameters:
      - description: Unique ID of the TpmEndorsement.
        format: uuid
        in: path
        name: tpm-endorsement_id
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the TpmEndorsement.
          schema:
            $ref: '#/definitions/TpmEndorsement'
        "404":
          description: No relevant TpmEndorsement record found.
        "415":
          description: Invalid Accept Header in Request
        "500":
          description: Internal server error.
      security:
      - bearerAuth: []
      tags:
      - TpmEndorsements
      x-permissions: tpm_endorsements:retrieve
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tpm-endorsements/826501bd-3c75-4839-a08f-db5f744f8498
      x-sample-call-output: |-
        {
             "id"            : "35adea3b-9f35-4e15-8c82-dee2f8880599",
             "hardware_uuid" : "0002bfac-9ac5-e711-906e-00163566263e",
             "issuer"        : "C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007",
             "revoked"       : false,
             "certificate"   : "MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==",
             "comment"       : "registered by trust agent",
             "certificate_digest" : "da8e9c68faf66d2634a4cbe14534a1916db261f401ffaffd42dc901eae33dd57695f365a31d19da67e4cebf1491dea60"
        }
    put:
      consumes:
      - application/json
      description: |
        Update tpm endorsement certificate.

        The serialized TpmEndorsement Go struct object represents the content of the request body.

         | Attribute                      | Description|
         |--------------------------------|------------|
         | certificate                    | The Base64 encoded Endorsement Certificate |
         | hardwareUuid                   | Hardware UUID of the host associated with the certificate. Can be retrieved by calling into the GET method on the host with a specific filter criteria. |
         | issuer                         | The OEM of the TPM. Refer to sample issuer input for attributes. |
         | revoked                        | Validity status of the EK certificate. |
         | comment                        | Comments for the certificate. |
      operationId: Update-TpmEndorsement
      parameters:
      - description: Unique ID of the TpmEndorsement.
        format: uuid
        in: path
        name: tpm-endorsement_id
        required: true
        type: string
      - in: body
        name: request body
        required: true
        schema:
          $ref: '#/definitions/TpmEndorsement'
      - description: Content-Type header
        enum:
        - application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Accept header
        enum:
        - application/json
        in: header
        name: Accept
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the tpm-endorsement.
          schema:
            $ref: '#/definitions/TpmEndorsement'
        "400":
          description: Invalid request body provided
        "415":
          description: Invalid Content-Type/Accept Header in Request
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      tags:
      - TpmEndorsements
      x-permissions: tpm_endorsements:store
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/tpm-endorsements/ebec68d1-a78f-4b66-b643-d80ba44e7fc0
      x-sample-call-input: |
        {
                  "hardware_uuid" : "0002bfac-9ac5-e711-906e-00163566263e",
                  "issuer"        : "C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007",
                  "revoked"       : false,
                  "certificate"   : "MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==",
                  "comment"       : "registered by trust agent"
        }
      x-sample-call-output: "{\n     \"id\"            \t\t: \"ebec68d1-a78f-4b66-b643-d80ba44e7fc0\",\n
        \    \"hardware_uuid\" \t\t: \"0002bfac-9ac5-e711-906e-00163566263e\",\n     \"issuer\"
        \       \t\t: \"C=DE,O=Infineon Technologies AG,OU=OPTIGA(TM) TPM2.0,CN=Infineon
        OPTIGA(TM) RSA Manufacturing CA 007\",\n     \"revoked\"       \t\t: false,\n
        \    \"certificate\"   \t\t: \"MIIEnDCCA4SgAwIBAgIEUilBVDANBgkqhkiG9w0BAQsFADCBgzELMAk...NBgkqhkiG9w0BAQsFADCBgzELMAk==\",\n
        \    \"comment\"       \t\t: \"registered by trust agent\",\n     \"certificate_digest\"\t:
        \"da8e9c68faf66d2634a4cbe14534a1916db261f401ffaffd42dc901eae33dd57695f365a31d19da67e4cebf1491dea60\"\n}"
  /version:
    get:
      description: |
        GetVersion is used to get the version of the application.
        Returns - The version of the application.
      operationId: GetVersion
      produces:
      - text/plain
      responses:
        "200":
          description: Successfully retrieved the version.
      tags:
      - Version
      x-sample-call-endpoint: https://hvs.com:8443/hvs/v2/version
      x-sample-call-output: |-
        Service Name: Host Verification Service
        Version: v3.4.0-0f0162ea
        Build Date: 2021-03-08T12:17:18+0000
schemes:
- https
securityDefinitions:
  bearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
